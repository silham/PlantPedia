
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Plants
 * 
 */
export type Plants = $Result.DefaultSelection<Prisma.$PlantsPayload>
/**
 * Model Pests
 * 
 */
export type Pests = $Result.DefaultSelection<Prisma.$PestsPayload>
/**
 * Model Blights
 * 
 */
export type Blights = $Result.DefaultSelection<Prisma.$BlightsPayload>
/**
 * Model Pestisides
 * 
 */
export type Pestisides = $Result.DefaultSelection<Prisma.$PestisidesPayload>
/**
 * Model Taxonomy
 * 
 */
export type Taxonomy = $Result.DefaultSelection<Prisma.$TaxonomyPayload>
/**
 * Model Search
 * 
 */
export type Search = $Result.DefaultSelection<Prisma.$SearchPayload>
/**
 * Model PlantOfDay
 * 
 */
export type PlantOfDay = $Result.DefaultSelection<Prisma.$PlantOfDayPayload>
/**
 * Model Views
 * 
 */
export type Views = $Result.DefaultSelection<Prisma.$ViewsPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Level: {
  H: 'H',
  M: 'M',
  L: 'L'
};

export type Level = (typeof Level)[keyof typeof Level]


export const Type: {
  PLANTS: 'PLANTS',
  PESTS: 'PESTS',
  BLIGHTS: 'BLIGHTS'
};

export type Type = (typeof Type)[keyof typeof Type]

}

export type Level = $Enums.Level

export const Level: typeof $Enums.Level

export type Type = $Enums.Type

export const Type: typeof $Enums.Type

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Plants
 * const plants = await prisma.plants.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Plants
   * const plants = await prisma.plants.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.plants`: Exposes CRUD operations for the **Plants** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Plants
    * const plants = await prisma.plants.findMany()
    * ```
    */
  get plants(): Prisma.PlantsDelegate<ExtArgs>;

  /**
   * `prisma.pests`: Exposes CRUD operations for the **Pests** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pests
    * const pests = await prisma.pests.findMany()
    * ```
    */
  get pests(): Prisma.PestsDelegate<ExtArgs>;

  /**
   * `prisma.blights`: Exposes CRUD operations for the **Blights** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Blights
    * const blights = await prisma.blights.findMany()
    * ```
    */
  get blights(): Prisma.BlightsDelegate<ExtArgs>;

  /**
   * `prisma.pestisides`: Exposes CRUD operations for the **Pestisides** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pestisides
    * const pestisides = await prisma.pestisides.findMany()
    * ```
    */
  get pestisides(): Prisma.PestisidesDelegate<ExtArgs>;

  /**
   * `prisma.taxonomy`: Exposes CRUD operations for the **Taxonomy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Taxonomies
    * const taxonomies = await prisma.taxonomy.findMany()
    * ```
    */
  get taxonomy(): Prisma.TaxonomyDelegate<ExtArgs>;

  /**
   * `prisma.search`: Exposes CRUD operations for the **Search** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Searches
    * const searches = await prisma.search.findMany()
    * ```
    */
  get search(): Prisma.SearchDelegate<ExtArgs>;

  /**
   * `prisma.plantOfDay`: Exposes CRUD operations for the **PlantOfDay** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlantOfDays
    * const plantOfDays = await prisma.plantOfDay.findMany()
    * ```
    */
  get plantOfDay(): Prisma.PlantOfDayDelegate<ExtArgs>;

  /**
   * `prisma.views`: Exposes CRUD operations for the **Views** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Views
    * const views = await prisma.views.findMany()
    * ```
    */
  get views(): Prisma.ViewsDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.4.1
   * Query Engine version: 2f302df92bd8945e20ad4595a73def5b96afa54f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Plants: 'Plants',
    Pests: 'Pests',
    Blights: 'Blights',
    Pestisides: 'Pestisides',
    Taxonomy: 'Taxonomy',
    Search: 'Search',
    PlantOfDay: 'PlantOfDay',
    Views: 'Views'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'plants' | 'pests' | 'blights' | 'pestisides' | 'taxonomy' | 'search' | 'plantOfDay' | 'views'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Plants: {
        payload: Prisma.$PlantsPayload<ExtArgs>
        fields: Prisma.PlantsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlantsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlantsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlantsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlantsPayload>
          }
          findFirst: {
            args: Prisma.PlantsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlantsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlantsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlantsPayload>
          }
          findMany: {
            args: Prisma.PlantsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlantsPayload>[]
          }
          create: {
            args: Prisma.PlantsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlantsPayload>
          }
          createMany: {
            args: Prisma.PlantsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PlantsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlantsPayload>
          }
          update: {
            args: Prisma.PlantsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlantsPayload>
          }
          deleteMany: {
            args: Prisma.PlantsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PlantsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PlantsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlantsPayload>
          }
          aggregate: {
            args: Prisma.PlantsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlants>
          }
          groupBy: {
            args: Prisma.PlantsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PlantsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlantsCountArgs<ExtArgs>,
            result: $Utils.Optional<PlantsCountAggregateOutputType> | number
          }
        }
      }
      Pests: {
        payload: Prisma.$PestsPayload<ExtArgs>
        fields: Prisma.PestsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PestsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PestsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PestsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PestsPayload>
          }
          findFirst: {
            args: Prisma.PestsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PestsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PestsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PestsPayload>
          }
          findMany: {
            args: Prisma.PestsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PestsPayload>[]
          }
          create: {
            args: Prisma.PestsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PestsPayload>
          }
          createMany: {
            args: Prisma.PestsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PestsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PestsPayload>
          }
          update: {
            args: Prisma.PestsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PestsPayload>
          }
          deleteMany: {
            args: Prisma.PestsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PestsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PestsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PestsPayload>
          }
          aggregate: {
            args: Prisma.PestsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePests>
          }
          groupBy: {
            args: Prisma.PestsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PestsGroupByOutputType>[]
          }
          count: {
            args: Prisma.PestsCountArgs<ExtArgs>,
            result: $Utils.Optional<PestsCountAggregateOutputType> | number
          }
        }
      }
      Blights: {
        payload: Prisma.$BlightsPayload<ExtArgs>
        fields: Prisma.BlightsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BlightsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlightsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BlightsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlightsPayload>
          }
          findFirst: {
            args: Prisma.BlightsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlightsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BlightsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlightsPayload>
          }
          findMany: {
            args: Prisma.BlightsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlightsPayload>[]
          }
          create: {
            args: Prisma.BlightsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlightsPayload>
          }
          createMany: {
            args: Prisma.BlightsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BlightsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlightsPayload>
          }
          update: {
            args: Prisma.BlightsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlightsPayload>
          }
          deleteMany: {
            args: Prisma.BlightsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BlightsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BlightsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BlightsPayload>
          }
          aggregate: {
            args: Prisma.BlightsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBlights>
          }
          groupBy: {
            args: Prisma.BlightsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BlightsGroupByOutputType>[]
          }
          count: {
            args: Prisma.BlightsCountArgs<ExtArgs>,
            result: $Utils.Optional<BlightsCountAggregateOutputType> | number
          }
        }
      }
      Pestisides: {
        payload: Prisma.$PestisidesPayload<ExtArgs>
        fields: Prisma.PestisidesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PestisidesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PestisidesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PestisidesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PestisidesPayload>
          }
          findFirst: {
            args: Prisma.PestisidesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PestisidesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PestisidesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PestisidesPayload>
          }
          findMany: {
            args: Prisma.PestisidesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PestisidesPayload>[]
          }
          create: {
            args: Prisma.PestisidesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PestisidesPayload>
          }
          createMany: {
            args: Prisma.PestisidesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PestisidesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PestisidesPayload>
          }
          update: {
            args: Prisma.PestisidesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PestisidesPayload>
          }
          deleteMany: {
            args: Prisma.PestisidesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PestisidesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PestisidesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PestisidesPayload>
          }
          aggregate: {
            args: Prisma.PestisidesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePestisides>
          }
          groupBy: {
            args: Prisma.PestisidesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PestisidesGroupByOutputType>[]
          }
          count: {
            args: Prisma.PestisidesCountArgs<ExtArgs>,
            result: $Utils.Optional<PestisidesCountAggregateOutputType> | number
          }
        }
      }
      Taxonomy: {
        payload: Prisma.$TaxonomyPayload<ExtArgs>
        fields: Prisma.TaxonomyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaxonomyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TaxonomyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaxonomyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TaxonomyPayload>
          }
          findFirst: {
            args: Prisma.TaxonomyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TaxonomyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaxonomyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TaxonomyPayload>
          }
          findMany: {
            args: Prisma.TaxonomyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TaxonomyPayload>[]
          }
          create: {
            args: Prisma.TaxonomyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TaxonomyPayload>
          }
          createMany: {
            args: Prisma.TaxonomyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TaxonomyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TaxonomyPayload>
          }
          update: {
            args: Prisma.TaxonomyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TaxonomyPayload>
          }
          deleteMany: {
            args: Prisma.TaxonomyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TaxonomyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TaxonomyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TaxonomyPayload>
          }
          aggregate: {
            args: Prisma.TaxonomyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTaxonomy>
          }
          groupBy: {
            args: Prisma.TaxonomyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TaxonomyGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaxonomyCountArgs<ExtArgs>,
            result: $Utils.Optional<TaxonomyCountAggregateOutputType> | number
          }
        }
      }
      Search: {
        payload: Prisma.$SearchPayload<ExtArgs>
        fields: Prisma.SearchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SearchFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SearchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SearchFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SearchPayload>
          }
          findFirst: {
            args: Prisma.SearchFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SearchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SearchFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SearchPayload>
          }
          findMany: {
            args: Prisma.SearchFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SearchPayload>[]
          }
          create: {
            args: Prisma.SearchCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SearchPayload>
          }
          createMany: {
            args: Prisma.SearchCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SearchDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SearchPayload>
          }
          update: {
            args: Prisma.SearchUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SearchPayload>
          }
          deleteMany: {
            args: Prisma.SearchDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SearchUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SearchUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SearchPayload>
          }
          aggregate: {
            args: Prisma.SearchAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSearch>
          }
          groupBy: {
            args: Prisma.SearchGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SearchGroupByOutputType>[]
          }
          count: {
            args: Prisma.SearchCountArgs<ExtArgs>,
            result: $Utils.Optional<SearchCountAggregateOutputType> | number
          }
        }
      }
      PlantOfDay: {
        payload: Prisma.$PlantOfDayPayload<ExtArgs>
        fields: Prisma.PlantOfDayFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlantOfDayFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlantOfDayPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlantOfDayFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlantOfDayPayload>
          }
          findFirst: {
            args: Prisma.PlantOfDayFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlantOfDayPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlantOfDayFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlantOfDayPayload>
          }
          findMany: {
            args: Prisma.PlantOfDayFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlantOfDayPayload>[]
          }
          create: {
            args: Prisma.PlantOfDayCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlantOfDayPayload>
          }
          createMany: {
            args: Prisma.PlantOfDayCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PlantOfDayDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlantOfDayPayload>
          }
          update: {
            args: Prisma.PlantOfDayUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlantOfDayPayload>
          }
          deleteMany: {
            args: Prisma.PlantOfDayDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PlantOfDayUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PlantOfDayUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlantOfDayPayload>
          }
          aggregate: {
            args: Prisma.PlantOfDayAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlantOfDay>
          }
          groupBy: {
            args: Prisma.PlantOfDayGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PlantOfDayGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlantOfDayCountArgs<ExtArgs>,
            result: $Utils.Optional<PlantOfDayCountAggregateOutputType> | number
          }
        }
      }
      Views: {
        payload: Prisma.$ViewsPayload<ExtArgs>
        fields: Prisma.ViewsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ViewsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ViewsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ViewsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ViewsPayload>
          }
          findFirst: {
            args: Prisma.ViewsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ViewsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ViewsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ViewsPayload>
          }
          findMany: {
            args: Prisma.ViewsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ViewsPayload>[]
          }
          create: {
            args: Prisma.ViewsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ViewsPayload>
          }
          createMany: {
            args: Prisma.ViewsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ViewsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ViewsPayload>
          }
          update: {
            args: Prisma.ViewsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ViewsPayload>
          }
          deleteMany: {
            args: Prisma.ViewsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ViewsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ViewsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ViewsPayload>
          }
          aggregate: {
            args: Prisma.ViewsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateViews>
          }
          groupBy: {
            args: Prisma.ViewsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ViewsGroupByOutputType>[]
          }
          count: {
            args: Prisma.ViewsCountArgs<ExtArgs>,
            result: $Utils.Optional<ViewsCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PlantsCountOutputType
   */

  export type PlantsCountOutputType = {
    pests: number
    blights: number
  }

  export type PlantsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pests?: boolean | PlantsCountOutputTypeCountPestsArgs
    blights?: boolean | PlantsCountOutputTypeCountBlightsArgs
  }

  // Custom InputTypes

  /**
   * PlantsCountOutputType without action
   */
  export type PlantsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantsCountOutputType
     */
    select?: PlantsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PlantsCountOutputType without action
   */
  export type PlantsCountOutputTypeCountPestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PestsWhereInput
  }


  /**
   * PlantsCountOutputType without action
   */
  export type PlantsCountOutputTypeCountBlightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BlightsWhereInput
  }



  /**
   * Count Type PestsCountOutputType
   */

  export type PestsCountOutputType = {
    plants: number
    pestisides: number
  }

  export type PestsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plants?: boolean | PestsCountOutputTypeCountPlantsArgs
    pestisides?: boolean | PestsCountOutputTypeCountPestisidesArgs
  }

  // Custom InputTypes

  /**
   * PestsCountOutputType without action
   */
  export type PestsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PestsCountOutputType
     */
    select?: PestsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PestsCountOutputType without action
   */
  export type PestsCountOutputTypeCountPlantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlantsWhereInput
  }


  /**
   * PestsCountOutputType without action
   */
  export type PestsCountOutputTypeCountPestisidesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PestisidesWhereInput
  }



  /**
   * Count Type BlightsCountOutputType
   */

  export type BlightsCountOutputType = {
    plants: number
    pestisides: number
  }

  export type BlightsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plants?: boolean | BlightsCountOutputTypeCountPlantsArgs
    pestisides?: boolean | BlightsCountOutputTypeCountPestisidesArgs
  }

  // Custom InputTypes

  /**
   * BlightsCountOutputType without action
   */
  export type BlightsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BlightsCountOutputType
     */
    select?: BlightsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * BlightsCountOutputType without action
   */
  export type BlightsCountOutputTypeCountPlantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlantsWhereInput
  }


  /**
   * BlightsCountOutputType without action
   */
  export type BlightsCountOutputTypeCountPestisidesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PestisidesWhereInput
  }



  /**
   * Count Type PestisidesCountOutputType
   */

  export type PestisidesCountOutputType = {
    pests: number
    blights: number
  }

  export type PestisidesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pests?: boolean | PestisidesCountOutputTypeCountPestsArgs
    blights?: boolean | PestisidesCountOutputTypeCountBlightsArgs
  }

  // Custom InputTypes

  /**
   * PestisidesCountOutputType without action
   */
  export type PestisidesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PestisidesCountOutputType
     */
    select?: PestisidesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PestisidesCountOutputType without action
   */
  export type PestisidesCountOutputTypeCountPestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PestsWhereInput
  }


  /**
   * PestisidesCountOutputType without action
   */
  export type PestisidesCountOutputTypeCountBlightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BlightsWhereInput
  }



  /**
   * Count Type ViewsCountOutputType
   */

  export type ViewsCountOutputType = {
    plant: number
  }

  export type ViewsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plant?: boolean | ViewsCountOutputTypeCountPlantArgs
  }

  // Custom InputTypes

  /**
   * ViewsCountOutputType without action
   */
  export type ViewsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ViewsCountOutputType
     */
    select?: ViewsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ViewsCountOutputType without action
   */
  export type ViewsCountOutputTypeCountPlantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlantsWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Plants
   */

  export type AggregatePlants = {
    _count: PlantsCountAggregateOutputType | null
    _avg: PlantsAvgAggregateOutputType | null
    _sum: PlantsSumAggregateOutputType | null
    _min: PlantsMinAggregateOutputType | null
    _max: PlantsMaxAggregateOutputType | null
  }

  export type PlantsAvgAggregateOutputType = {
    min_h: number | null
    max_h: number | null
    min_ph: number | null
    max_ph: number | null
    min_temp: number | null
    max_temp: number | null
    viewsId: number | null
  }

  export type PlantsSumAggregateOutputType = {
    min_h: number | null
    max_h: number | null
    min_ph: number | null
    max_ph: number | null
    min_temp: number | null
    max_temp: number | null
    viewsId: number | null
  }

  export type PlantsMinAggregateOutputType = {
    id: string | null
    common_name: string | null
    scientific_name: string | null
    description: string | null
    min_h: number | null
    max_h: number | null
    min_ph: number | null
    max_ph: number | null
    min_temp: number | null
    max_temp: number | null
    water: $Enums.Level | null
    habit: string | null
    wikipedia: string | null
    britannica: string | null
    img: string | null
    taxonomyId: string | null
    viewsId: number | null
  }

  export type PlantsMaxAggregateOutputType = {
    id: string | null
    common_name: string | null
    scientific_name: string | null
    description: string | null
    min_h: number | null
    max_h: number | null
    min_ph: number | null
    max_ph: number | null
    min_temp: number | null
    max_temp: number | null
    water: $Enums.Level | null
    habit: string | null
    wikipedia: string | null
    britannica: string | null
    img: string | null
    taxonomyId: string | null
    viewsId: number | null
  }

  export type PlantsCountAggregateOutputType = {
    id: number
    common_name: number
    scientific_name: number
    synonyms: number
    description: number
    min_h: number
    max_h: number
    min_ph: number
    max_ph: number
    min_temp: number
    max_temp: number
    water: number
    habit: number
    wikipedia: number
    britannica: number
    img: number
    imgs: number
    taxonomyId: number
    viewsId: number
    _all: number
  }


  export type PlantsAvgAggregateInputType = {
    min_h?: true
    max_h?: true
    min_ph?: true
    max_ph?: true
    min_temp?: true
    max_temp?: true
    viewsId?: true
  }

  export type PlantsSumAggregateInputType = {
    min_h?: true
    max_h?: true
    min_ph?: true
    max_ph?: true
    min_temp?: true
    max_temp?: true
    viewsId?: true
  }

  export type PlantsMinAggregateInputType = {
    id?: true
    common_name?: true
    scientific_name?: true
    description?: true
    min_h?: true
    max_h?: true
    min_ph?: true
    max_ph?: true
    min_temp?: true
    max_temp?: true
    water?: true
    habit?: true
    wikipedia?: true
    britannica?: true
    img?: true
    taxonomyId?: true
    viewsId?: true
  }

  export type PlantsMaxAggregateInputType = {
    id?: true
    common_name?: true
    scientific_name?: true
    description?: true
    min_h?: true
    max_h?: true
    min_ph?: true
    max_ph?: true
    min_temp?: true
    max_temp?: true
    water?: true
    habit?: true
    wikipedia?: true
    britannica?: true
    img?: true
    taxonomyId?: true
    viewsId?: true
  }

  export type PlantsCountAggregateInputType = {
    id?: true
    common_name?: true
    scientific_name?: true
    synonyms?: true
    description?: true
    min_h?: true
    max_h?: true
    min_ph?: true
    max_ph?: true
    min_temp?: true
    max_temp?: true
    water?: true
    habit?: true
    wikipedia?: true
    britannica?: true
    img?: true
    imgs?: true
    taxonomyId?: true
    viewsId?: true
    _all?: true
  }

  export type PlantsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plants to aggregate.
     */
    where?: PlantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plants to fetch.
     */
    orderBy?: PlantsOrderByWithRelationAndSearchRelevanceInput | PlantsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Plants
    **/
    _count?: true | PlantsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlantsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlantsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlantsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlantsMaxAggregateInputType
  }

  export type GetPlantsAggregateType<T extends PlantsAggregateArgs> = {
        [P in keyof T & keyof AggregatePlants]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlants[P]>
      : GetScalarType<T[P], AggregatePlants[P]>
  }




  export type PlantsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlantsWhereInput
    orderBy?: PlantsOrderByWithAggregationInput | PlantsOrderByWithAggregationInput[]
    by: PlantsScalarFieldEnum[] | PlantsScalarFieldEnum
    having?: PlantsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlantsCountAggregateInputType | true
    _avg?: PlantsAvgAggregateInputType
    _sum?: PlantsSumAggregateInputType
    _min?: PlantsMinAggregateInputType
    _max?: PlantsMaxAggregateInputType
  }

  export type PlantsGroupByOutputType = {
    id: string
    common_name: string
    scientific_name: string
    synonyms: string[]
    description: string | null
    min_h: number | null
    max_h: number | null
    min_ph: number | null
    max_ph: number | null
    min_temp: number | null
    max_temp: number | null
    water: $Enums.Level | null
    habit: string | null
    wikipedia: string | null
    britannica: string | null
    img: string | null
    imgs: string[]
    taxonomyId: string
    viewsId: number | null
    _count: PlantsCountAggregateOutputType | null
    _avg: PlantsAvgAggregateOutputType | null
    _sum: PlantsSumAggregateOutputType | null
    _min: PlantsMinAggregateOutputType | null
    _max: PlantsMaxAggregateOutputType | null
  }

  type GetPlantsGroupByPayload<T extends PlantsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlantsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlantsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlantsGroupByOutputType[P]>
            : GetScalarType<T[P], PlantsGroupByOutputType[P]>
        }
      >
    >


  export type PlantsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    common_name?: boolean
    scientific_name?: boolean
    synonyms?: boolean
    description?: boolean
    min_h?: boolean
    max_h?: boolean
    min_ph?: boolean
    max_ph?: boolean
    min_temp?: boolean
    max_temp?: boolean
    water?: boolean
    habit?: boolean
    wikipedia?: boolean
    britannica?: boolean
    img?: boolean
    imgs?: boolean
    taxonomyId?: boolean
    viewsId?: boolean
    taxonomy?: boolean | TaxonomyDefaultArgs<ExtArgs>
    pests?: boolean | Plants$pestsArgs<ExtArgs>
    blights?: boolean | Plants$blightsArgs<ExtArgs>
    PlantOfDay?: boolean | Plants$PlantOfDayArgs<ExtArgs>
    Views?: boolean | Plants$ViewsArgs<ExtArgs>
    _count?: boolean | PlantsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plants"]>

  export type PlantsSelectScalar = {
    id?: boolean
    common_name?: boolean
    scientific_name?: boolean
    synonyms?: boolean
    description?: boolean
    min_h?: boolean
    max_h?: boolean
    min_ph?: boolean
    max_ph?: boolean
    min_temp?: boolean
    max_temp?: boolean
    water?: boolean
    habit?: boolean
    wikipedia?: boolean
    britannica?: boolean
    img?: boolean
    imgs?: boolean
    taxonomyId?: boolean
    viewsId?: boolean
  }

  export type PlantsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    taxonomy?: boolean | TaxonomyDefaultArgs<ExtArgs>
    pests?: boolean | Plants$pestsArgs<ExtArgs>
    blights?: boolean | Plants$blightsArgs<ExtArgs>
    PlantOfDay?: boolean | Plants$PlantOfDayArgs<ExtArgs>
    Views?: boolean | Plants$ViewsArgs<ExtArgs>
    _count?: boolean | PlantsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PlantsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Plants"
    objects: {
      taxonomy: Prisma.$TaxonomyPayload<ExtArgs>
      pests: Prisma.$PestsPayload<ExtArgs>[]
      blights: Prisma.$BlightsPayload<ExtArgs>[]
      PlantOfDay: Prisma.$PlantOfDayPayload<ExtArgs> | null
      Views: Prisma.$ViewsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      common_name: string
      scientific_name: string
      synonyms: string[]
      description: string | null
      min_h: number | null
      max_h: number | null
      min_ph: number | null
      max_ph: number | null
      min_temp: number | null
      max_temp: number | null
      water: $Enums.Level | null
      habit: string | null
      wikipedia: string | null
      britannica: string | null
      img: string | null
      imgs: string[]
      taxonomyId: string
      viewsId: number | null
    }, ExtArgs["result"]["plants"]>
    composites: {}
  }


  type PlantsGetPayload<S extends boolean | null | undefined | PlantsDefaultArgs> = $Result.GetResult<Prisma.$PlantsPayload, S>

  type PlantsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlantsFindManyArgs, 'select' | 'include'> & {
      select?: PlantsCountAggregateInputType | true
    }

  export interface PlantsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Plants'], meta: { name: 'Plants' } }
    /**
     * Find zero or one Plants that matches the filter.
     * @param {PlantsFindUniqueArgs} args - Arguments to find a Plants
     * @example
     * // Get one Plants
     * const plants = await prisma.plants.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlantsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PlantsFindUniqueArgs<ExtArgs>>
    ): Prisma__PlantsClient<$Result.GetResult<Prisma.$PlantsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Plants that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PlantsFindUniqueOrThrowArgs} args - Arguments to find a Plants
     * @example
     * // Get one Plants
     * const plants = await prisma.plants.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlantsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlantsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PlantsClient<$Result.GetResult<Prisma.$PlantsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Plants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantsFindFirstArgs} args - Arguments to find a Plants
     * @example
     * // Get one Plants
     * const plants = await prisma.plants.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlantsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PlantsFindFirstArgs<ExtArgs>>
    ): Prisma__PlantsClient<$Result.GetResult<Prisma.$PlantsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Plants that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantsFindFirstOrThrowArgs} args - Arguments to find a Plants
     * @example
     * // Get one Plants
     * const plants = await prisma.plants.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlantsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlantsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PlantsClient<$Result.GetResult<Prisma.$PlantsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Plants that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Plants
     * const plants = await prisma.plants.findMany()
     * 
     * // Get first 10 Plants
     * const plants = await prisma.plants.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const plantsWithIdOnly = await prisma.plants.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlantsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlantsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Plants.
     * @param {PlantsCreateArgs} args - Arguments to create a Plants.
     * @example
     * // Create one Plants
     * const Plants = await prisma.plants.create({
     *   data: {
     *     // ... data to create a Plants
     *   }
     * })
     * 
    **/
    create<T extends PlantsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PlantsCreateArgs<ExtArgs>>
    ): Prisma__PlantsClient<$Result.GetResult<Prisma.$PlantsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Plants.
     *     @param {PlantsCreateManyArgs} args - Arguments to create many Plants.
     *     @example
     *     // Create many Plants
     *     const plants = await prisma.plants.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PlantsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlantsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Plants.
     * @param {PlantsDeleteArgs} args - Arguments to delete one Plants.
     * @example
     * // Delete one Plants
     * const Plants = await prisma.plants.delete({
     *   where: {
     *     // ... filter to delete one Plants
     *   }
     * })
     * 
    **/
    delete<T extends PlantsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PlantsDeleteArgs<ExtArgs>>
    ): Prisma__PlantsClient<$Result.GetResult<Prisma.$PlantsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Plants.
     * @param {PlantsUpdateArgs} args - Arguments to update one Plants.
     * @example
     * // Update one Plants
     * const plants = await prisma.plants.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlantsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PlantsUpdateArgs<ExtArgs>>
    ): Prisma__PlantsClient<$Result.GetResult<Prisma.$PlantsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Plants.
     * @param {PlantsDeleteManyArgs} args - Arguments to filter Plants to delete.
     * @example
     * // Delete a few Plants
     * const { count } = await prisma.plants.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlantsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlantsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Plants
     * const plants = await prisma.plants.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlantsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PlantsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Plants.
     * @param {PlantsUpsertArgs} args - Arguments to update or create a Plants.
     * @example
     * // Update or create a Plants
     * const plants = await prisma.plants.upsert({
     *   create: {
     *     // ... data to create a Plants
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Plants we want to update
     *   }
     * })
    **/
    upsert<T extends PlantsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PlantsUpsertArgs<ExtArgs>>
    ): Prisma__PlantsClient<$Result.GetResult<Prisma.$PlantsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Plants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantsCountArgs} args - Arguments to filter Plants to count.
     * @example
     * // Count the number of Plants
     * const count = await prisma.plants.count({
     *   where: {
     *     // ... the filter for the Plants we want to count
     *   }
     * })
    **/
    count<T extends PlantsCountArgs>(
      args?: Subset<T, PlantsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlantsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Plants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlantsAggregateArgs>(args: Subset<T, PlantsAggregateArgs>): Prisma.PrismaPromise<GetPlantsAggregateType<T>>

    /**
     * Group by Plants.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlantsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlantsGroupByArgs['orderBy'] }
        : { orderBy?: PlantsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlantsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlantsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Plants model
   */
  readonly fields: PlantsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Plants.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlantsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    taxonomy<T extends TaxonomyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaxonomyDefaultArgs<ExtArgs>>): Prisma__TaxonomyClient<$Result.GetResult<Prisma.$TaxonomyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    pests<T extends Plants$pestsArgs<ExtArgs> = {}>(args?: Subset<T, Plants$pestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PestsPayload<ExtArgs>, T, 'findMany'> | Null>;

    blights<T extends Plants$blightsArgs<ExtArgs> = {}>(args?: Subset<T, Plants$blightsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlightsPayload<ExtArgs>, T, 'findMany'> | Null>;

    PlantOfDay<T extends Plants$PlantOfDayArgs<ExtArgs> = {}>(args?: Subset<T, Plants$PlantOfDayArgs<ExtArgs>>): Prisma__PlantOfDayClient<$Result.GetResult<Prisma.$PlantOfDayPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    Views<T extends Plants$ViewsArgs<ExtArgs> = {}>(args?: Subset<T, Plants$ViewsArgs<ExtArgs>>): Prisma__ViewsClient<$Result.GetResult<Prisma.$ViewsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Plants model
   */ 
  interface PlantsFieldRefs {
    readonly id: FieldRef<"Plants", 'String'>
    readonly common_name: FieldRef<"Plants", 'String'>
    readonly scientific_name: FieldRef<"Plants", 'String'>
    readonly synonyms: FieldRef<"Plants", 'String[]'>
    readonly description: FieldRef<"Plants", 'String'>
    readonly min_h: FieldRef<"Plants", 'Int'>
    readonly max_h: FieldRef<"Plants", 'Int'>
    readonly min_ph: FieldRef<"Plants", 'Float'>
    readonly max_ph: FieldRef<"Plants", 'Float'>
    readonly min_temp: FieldRef<"Plants", 'Int'>
    readonly max_temp: FieldRef<"Plants", 'Int'>
    readonly water: FieldRef<"Plants", 'Level'>
    readonly habit: FieldRef<"Plants", 'String'>
    readonly wikipedia: FieldRef<"Plants", 'String'>
    readonly britannica: FieldRef<"Plants", 'String'>
    readonly img: FieldRef<"Plants", 'String'>
    readonly imgs: FieldRef<"Plants", 'String[]'>
    readonly taxonomyId: FieldRef<"Plants", 'String'>
    readonly viewsId: FieldRef<"Plants", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Plants findUnique
   */
  export type PlantsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plants
     */
    select?: PlantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantsInclude<ExtArgs> | null
    /**
     * Filter, which Plants to fetch.
     */
    where: PlantsWhereUniqueInput
  }


  /**
   * Plants findUniqueOrThrow
   */
  export type PlantsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plants
     */
    select?: PlantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantsInclude<ExtArgs> | null
    /**
     * Filter, which Plants to fetch.
     */
    where: PlantsWhereUniqueInput
  }


  /**
   * Plants findFirst
   */
  export type PlantsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plants
     */
    select?: PlantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantsInclude<ExtArgs> | null
    /**
     * Filter, which Plants to fetch.
     */
    where?: PlantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plants to fetch.
     */
    orderBy?: PlantsOrderByWithRelationAndSearchRelevanceInput | PlantsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plants.
     */
    cursor?: PlantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plants.
     */
    distinct?: PlantsScalarFieldEnum | PlantsScalarFieldEnum[]
  }


  /**
   * Plants findFirstOrThrow
   */
  export type PlantsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plants
     */
    select?: PlantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantsInclude<ExtArgs> | null
    /**
     * Filter, which Plants to fetch.
     */
    where?: PlantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plants to fetch.
     */
    orderBy?: PlantsOrderByWithRelationAndSearchRelevanceInput | PlantsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plants.
     */
    cursor?: PlantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plants.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plants.
     */
    distinct?: PlantsScalarFieldEnum | PlantsScalarFieldEnum[]
  }


  /**
   * Plants findMany
   */
  export type PlantsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plants
     */
    select?: PlantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantsInclude<ExtArgs> | null
    /**
     * Filter, which Plants to fetch.
     */
    where?: PlantsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plants to fetch.
     */
    orderBy?: PlantsOrderByWithRelationAndSearchRelevanceInput | PlantsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Plants.
     */
    cursor?: PlantsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plants from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plants.
     */
    skip?: number
    distinct?: PlantsScalarFieldEnum | PlantsScalarFieldEnum[]
  }


  /**
   * Plants create
   */
  export type PlantsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plants
     */
    select?: PlantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantsInclude<ExtArgs> | null
    /**
     * The data needed to create a Plants.
     */
    data: XOR<PlantsCreateInput, PlantsUncheckedCreateInput>
  }


  /**
   * Plants createMany
   */
  export type PlantsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Plants.
     */
    data: PlantsCreateManyInput | PlantsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Plants update
   */
  export type PlantsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plants
     */
    select?: PlantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantsInclude<ExtArgs> | null
    /**
     * The data needed to update a Plants.
     */
    data: XOR<PlantsUpdateInput, PlantsUncheckedUpdateInput>
    /**
     * Choose, which Plants to update.
     */
    where: PlantsWhereUniqueInput
  }


  /**
   * Plants updateMany
   */
  export type PlantsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Plants.
     */
    data: XOR<PlantsUpdateManyMutationInput, PlantsUncheckedUpdateManyInput>
    /**
     * Filter which Plants to update
     */
    where?: PlantsWhereInput
  }


  /**
   * Plants upsert
   */
  export type PlantsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plants
     */
    select?: PlantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantsInclude<ExtArgs> | null
    /**
     * The filter to search for the Plants to update in case it exists.
     */
    where: PlantsWhereUniqueInput
    /**
     * In case the Plants found by the `where` argument doesn't exist, create a new Plants with this data.
     */
    create: XOR<PlantsCreateInput, PlantsUncheckedCreateInput>
    /**
     * In case the Plants was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlantsUpdateInput, PlantsUncheckedUpdateInput>
  }


  /**
   * Plants delete
   */
  export type PlantsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plants
     */
    select?: PlantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantsInclude<ExtArgs> | null
    /**
     * Filter which Plants to delete.
     */
    where: PlantsWhereUniqueInput
  }


  /**
   * Plants deleteMany
   */
  export type PlantsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plants to delete
     */
    where?: PlantsWhereInput
  }


  /**
   * Plants.pests
   */
  export type Plants$pestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pests
     */
    select?: PestsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestsInclude<ExtArgs> | null
    where?: PestsWhereInput
    orderBy?: PestsOrderByWithRelationAndSearchRelevanceInput | PestsOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: PestsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PestsScalarFieldEnum | PestsScalarFieldEnum[]
  }


  /**
   * Plants.blights
   */
  export type Plants$blightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blights
     */
    select?: BlightsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlightsInclude<ExtArgs> | null
    where?: BlightsWhereInput
    orderBy?: BlightsOrderByWithRelationAndSearchRelevanceInput | BlightsOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: BlightsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BlightsScalarFieldEnum | BlightsScalarFieldEnum[]
  }


  /**
   * Plants.PlantOfDay
   */
  export type Plants$PlantOfDayArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantOfDay
     */
    select?: PlantOfDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantOfDayInclude<ExtArgs> | null
    where?: PlantOfDayWhereInput
  }


  /**
   * Plants.Views
   */
  export type Plants$ViewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Views
     */
    select?: ViewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ViewsInclude<ExtArgs> | null
    where?: ViewsWhereInput
  }


  /**
   * Plants without action
   */
  export type PlantsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plants
     */
    select?: PlantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantsInclude<ExtArgs> | null
  }



  /**
   * Model Pests
   */

  export type AggregatePests = {
    _count: PestsCountAggregateOutputType | null
    _min: PestsMinAggregateOutputType | null
    _max: PestsMaxAggregateOutputType | null
  }

  export type PestsMinAggregateOutputType = {
    id: string | null
    common_name: string | null
    scientific_name: string | null
    description: string | null
    wikipedia: string | null
    britannica: string | null
    img: string | null
    taxonomyId: string | null
  }

  export type PestsMaxAggregateOutputType = {
    id: string | null
    common_name: string | null
    scientific_name: string | null
    description: string | null
    wikipedia: string | null
    britannica: string | null
    img: string | null
    taxonomyId: string | null
  }

  export type PestsCountAggregateOutputType = {
    id: number
    common_name: number
    synonyms: number
    scientific_name: number
    description: number
    wikipedia: number
    britannica: number
    img: number
    imgs: number
    taxonomyId: number
    _all: number
  }


  export type PestsMinAggregateInputType = {
    id?: true
    common_name?: true
    scientific_name?: true
    description?: true
    wikipedia?: true
    britannica?: true
    img?: true
    taxonomyId?: true
  }

  export type PestsMaxAggregateInputType = {
    id?: true
    common_name?: true
    scientific_name?: true
    description?: true
    wikipedia?: true
    britannica?: true
    img?: true
    taxonomyId?: true
  }

  export type PestsCountAggregateInputType = {
    id?: true
    common_name?: true
    synonyms?: true
    scientific_name?: true
    description?: true
    wikipedia?: true
    britannica?: true
    img?: true
    imgs?: true
    taxonomyId?: true
    _all?: true
  }

  export type PestsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pests to aggregate.
     */
    where?: PestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pests to fetch.
     */
    orderBy?: PestsOrderByWithRelationAndSearchRelevanceInput | PestsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pests
    **/
    _count?: true | PestsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PestsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PestsMaxAggregateInputType
  }

  export type GetPestsAggregateType<T extends PestsAggregateArgs> = {
        [P in keyof T & keyof AggregatePests]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePests[P]>
      : GetScalarType<T[P], AggregatePests[P]>
  }




  export type PestsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PestsWhereInput
    orderBy?: PestsOrderByWithAggregationInput | PestsOrderByWithAggregationInput[]
    by: PestsScalarFieldEnum[] | PestsScalarFieldEnum
    having?: PestsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PestsCountAggregateInputType | true
    _min?: PestsMinAggregateInputType
    _max?: PestsMaxAggregateInputType
  }

  export type PestsGroupByOutputType = {
    id: string
    common_name: string
    synonyms: string[]
    scientific_name: string
    description: string | null
    wikipedia: string | null
    britannica: string | null
    img: string | null
    imgs: string[]
    taxonomyId: string
    _count: PestsCountAggregateOutputType | null
    _min: PestsMinAggregateOutputType | null
    _max: PestsMaxAggregateOutputType | null
  }

  type GetPestsGroupByPayload<T extends PestsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PestsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PestsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PestsGroupByOutputType[P]>
            : GetScalarType<T[P], PestsGroupByOutputType[P]>
        }
      >
    >


  export type PestsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    common_name?: boolean
    synonyms?: boolean
    scientific_name?: boolean
    description?: boolean
    wikipedia?: boolean
    britannica?: boolean
    img?: boolean
    imgs?: boolean
    taxonomyId?: boolean
    taxonomy?: boolean | TaxonomyDefaultArgs<ExtArgs>
    plants?: boolean | Pests$plantsArgs<ExtArgs>
    pestisides?: boolean | Pests$pestisidesArgs<ExtArgs>
    _count?: boolean | PestsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pests"]>

  export type PestsSelectScalar = {
    id?: boolean
    common_name?: boolean
    synonyms?: boolean
    scientific_name?: boolean
    description?: boolean
    wikipedia?: boolean
    britannica?: boolean
    img?: boolean
    imgs?: boolean
    taxonomyId?: boolean
  }

  export type PestsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    taxonomy?: boolean | TaxonomyDefaultArgs<ExtArgs>
    plants?: boolean | Pests$plantsArgs<ExtArgs>
    pestisides?: boolean | Pests$pestisidesArgs<ExtArgs>
    _count?: boolean | PestsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PestsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pests"
    objects: {
      taxonomy: Prisma.$TaxonomyPayload<ExtArgs>
      plants: Prisma.$PlantsPayload<ExtArgs>[]
      pestisides: Prisma.$PestisidesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      common_name: string
      synonyms: string[]
      scientific_name: string
      description: string | null
      wikipedia: string | null
      britannica: string | null
      img: string | null
      imgs: string[]
      taxonomyId: string
    }, ExtArgs["result"]["pests"]>
    composites: {}
  }


  type PestsGetPayload<S extends boolean | null | undefined | PestsDefaultArgs> = $Result.GetResult<Prisma.$PestsPayload, S>

  type PestsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PestsFindManyArgs, 'select' | 'include'> & {
      select?: PestsCountAggregateInputType | true
    }

  export interface PestsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pests'], meta: { name: 'Pests' } }
    /**
     * Find zero or one Pests that matches the filter.
     * @param {PestsFindUniqueArgs} args - Arguments to find a Pests
     * @example
     * // Get one Pests
     * const pests = await prisma.pests.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PestsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PestsFindUniqueArgs<ExtArgs>>
    ): Prisma__PestsClient<$Result.GetResult<Prisma.$PestsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Pests that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PestsFindUniqueOrThrowArgs} args - Arguments to find a Pests
     * @example
     * // Get one Pests
     * const pests = await prisma.pests.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PestsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PestsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PestsClient<$Result.GetResult<Prisma.$PestsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Pests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PestsFindFirstArgs} args - Arguments to find a Pests
     * @example
     * // Get one Pests
     * const pests = await prisma.pests.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PestsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PestsFindFirstArgs<ExtArgs>>
    ): Prisma__PestsClient<$Result.GetResult<Prisma.$PestsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Pests that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PestsFindFirstOrThrowArgs} args - Arguments to find a Pests
     * @example
     * // Get one Pests
     * const pests = await prisma.pests.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PestsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PestsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PestsClient<$Result.GetResult<Prisma.$PestsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Pests that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PestsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pests
     * const pests = await prisma.pests.findMany()
     * 
     * // Get first 10 Pests
     * const pests = await prisma.pests.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pestsWithIdOnly = await prisma.pests.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PestsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PestsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PestsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Pests.
     * @param {PestsCreateArgs} args - Arguments to create a Pests.
     * @example
     * // Create one Pests
     * const Pests = await prisma.pests.create({
     *   data: {
     *     // ... data to create a Pests
     *   }
     * })
     * 
    **/
    create<T extends PestsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PestsCreateArgs<ExtArgs>>
    ): Prisma__PestsClient<$Result.GetResult<Prisma.$PestsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Pests.
     *     @param {PestsCreateManyArgs} args - Arguments to create many Pests.
     *     @example
     *     // Create many Pests
     *     const pests = await prisma.pests.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PestsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PestsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pests.
     * @param {PestsDeleteArgs} args - Arguments to delete one Pests.
     * @example
     * // Delete one Pests
     * const Pests = await prisma.pests.delete({
     *   where: {
     *     // ... filter to delete one Pests
     *   }
     * })
     * 
    **/
    delete<T extends PestsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PestsDeleteArgs<ExtArgs>>
    ): Prisma__PestsClient<$Result.GetResult<Prisma.$PestsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Pests.
     * @param {PestsUpdateArgs} args - Arguments to update one Pests.
     * @example
     * // Update one Pests
     * const pests = await prisma.pests.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PestsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PestsUpdateArgs<ExtArgs>>
    ): Prisma__PestsClient<$Result.GetResult<Prisma.$PestsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Pests.
     * @param {PestsDeleteManyArgs} args - Arguments to filter Pests to delete.
     * @example
     * // Delete a few Pests
     * const { count } = await prisma.pests.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PestsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PestsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PestsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pests
     * const pests = await prisma.pests.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PestsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PestsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pests.
     * @param {PestsUpsertArgs} args - Arguments to update or create a Pests.
     * @example
     * // Update or create a Pests
     * const pests = await prisma.pests.upsert({
     *   create: {
     *     // ... data to create a Pests
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pests we want to update
     *   }
     * })
    **/
    upsert<T extends PestsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PestsUpsertArgs<ExtArgs>>
    ): Prisma__PestsClient<$Result.GetResult<Prisma.$PestsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Pests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PestsCountArgs} args - Arguments to filter Pests to count.
     * @example
     * // Count the number of Pests
     * const count = await prisma.pests.count({
     *   where: {
     *     // ... the filter for the Pests we want to count
     *   }
     * })
    **/
    count<T extends PestsCountArgs>(
      args?: Subset<T, PestsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PestsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PestsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PestsAggregateArgs>(args: Subset<T, PestsAggregateArgs>): Prisma.PrismaPromise<GetPestsAggregateType<T>>

    /**
     * Group by Pests.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PestsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PestsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PestsGroupByArgs['orderBy'] }
        : { orderBy?: PestsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PestsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPestsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pests model
   */
  readonly fields: PestsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pests.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PestsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    taxonomy<T extends TaxonomyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaxonomyDefaultArgs<ExtArgs>>): Prisma__TaxonomyClient<$Result.GetResult<Prisma.$TaxonomyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    plants<T extends Pests$plantsArgs<ExtArgs> = {}>(args?: Subset<T, Pests$plantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantsPayload<ExtArgs>, T, 'findMany'> | Null>;

    pestisides<T extends Pests$pestisidesArgs<ExtArgs> = {}>(args?: Subset<T, Pests$pestisidesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PestisidesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Pests model
   */ 
  interface PestsFieldRefs {
    readonly id: FieldRef<"Pests", 'String'>
    readonly common_name: FieldRef<"Pests", 'String'>
    readonly synonyms: FieldRef<"Pests", 'String[]'>
    readonly scientific_name: FieldRef<"Pests", 'String'>
    readonly description: FieldRef<"Pests", 'String'>
    readonly wikipedia: FieldRef<"Pests", 'String'>
    readonly britannica: FieldRef<"Pests", 'String'>
    readonly img: FieldRef<"Pests", 'String'>
    readonly imgs: FieldRef<"Pests", 'String[]'>
    readonly taxonomyId: FieldRef<"Pests", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Pests findUnique
   */
  export type PestsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pests
     */
    select?: PestsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestsInclude<ExtArgs> | null
    /**
     * Filter, which Pests to fetch.
     */
    where: PestsWhereUniqueInput
  }


  /**
   * Pests findUniqueOrThrow
   */
  export type PestsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pests
     */
    select?: PestsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestsInclude<ExtArgs> | null
    /**
     * Filter, which Pests to fetch.
     */
    where: PestsWhereUniqueInput
  }


  /**
   * Pests findFirst
   */
  export type PestsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pests
     */
    select?: PestsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestsInclude<ExtArgs> | null
    /**
     * Filter, which Pests to fetch.
     */
    where?: PestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pests to fetch.
     */
    orderBy?: PestsOrderByWithRelationAndSearchRelevanceInput | PestsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pests.
     */
    cursor?: PestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pests.
     */
    distinct?: PestsScalarFieldEnum | PestsScalarFieldEnum[]
  }


  /**
   * Pests findFirstOrThrow
   */
  export type PestsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pests
     */
    select?: PestsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestsInclude<ExtArgs> | null
    /**
     * Filter, which Pests to fetch.
     */
    where?: PestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pests to fetch.
     */
    orderBy?: PestsOrderByWithRelationAndSearchRelevanceInput | PestsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pests.
     */
    cursor?: PestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pests.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pests.
     */
    distinct?: PestsScalarFieldEnum | PestsScalarFieldEnum[]
  }


  /**
   * Pests findMany
   */
  export type PestsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pests
     */
    select?: PestsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestsInclude<ExtArgs> | null
    /**
     * Filter, which Pests to fetch.
     */
    where?: PestsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pests to fetch.
     */
    orderBy?: PestsOrderByWithRelationAndSearchRelevanceInput | PestsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pests.
     */
    cursor?: PestsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pests from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pests.
     */
    skip?: number
    distinct?: PestsScalarFieldEnum | PestsScalarFieldEnum[]
  }


  /**
   * Pests create
   */
  export type PestsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pests
     */
    select?: PestsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestsInclude<ExtArgs> | null
    /**
     * The data needed to create a Pests.
     */
    data: XOR<PestsCreateInput, PestsUncheckedCreateInput>
  }


  /**
   * Pests createMany
   */
  export type PestsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pests.
     */
    data: PestsCreateManyInput | PestsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Pests update
   */
  export type PestsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pests
     */
    select?: PestsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestsInclude<ExtArgs> | null
    /**
     * The data needed to update a Pests.
     */
    data: XOR<PestsUpdateInput, PestsUncheckedUpdateInput>
    /**
     * Choose, which Pests to update.
     */
    where: PestsWhereUniqueInput
  }


  /**
   * Pests updateMany
   */
  export type PestsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pests.
     */
    data: XOR<PestsUpdateManyMutationInput, PestsUncheckedUpdateManyInput>
    /**
     * Filter which Pests to update
     */
    where?: PestsWhereInput
  }


  /**
   * Pests upsert
   */
  export type PestsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pests
     */
    select?: PestsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestsInclude<ExtArgs> | null
    /**
     * The filter to search for the Pests to update in case it exists.
     */
    where: PestsWhereUniqueInput
    /**
     * In case the Pests found by the `where` argument doesn't exist, create a new Pests with this data.
     */
    create: XOR<PestsCreateInput, PestsUncheckedCreateInput>
    /**
     * In case the Pests was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PestsUpdateInput, PestsUncheckedUpdateInput>
  }


  /**
   * Pests delete
   */
  export type PestsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pests
     */
    select?: PestsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestsInclude<ExtArgs> | null
    /**
     * Filter which Pests to delete.
     */
    where: PestsWhereUniqueInput
  }


  /**
   * Pests deleteMany
   */
  export type PestsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pests to delete
     */
    where?: PestsWhereInput
  }


  /**
   * Pests.plants
   */
  export type Pests$plantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plants
     */
    select?: PlantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantsInclude<ExtArgs> | null
    where?: PlantsWhereInput
    orderBy?: PlantsOrderByWithRelationAndSearchRelevanceInput | PlantsOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: PlantsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlantsScalarFieldEnum | PlantsScalarFieldEnum[]
  }


  /**
   * Pests.pestisides
   */
  export type Pests$pestisidesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pestisides
     */
    select?: PestisidesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestisidesInclude<ExtArgs> | null
    where?: PestisidesWhereInput
    orderBy?: PestisidesOrderByWithRelationAndSearchRelevanceInput | PestisidesOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: PestisidesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PestisidesScalarFieldEnum | PestisidesScalarFieldEnum[]
  }


  /**
   * Pests without action
   */
  export type PestsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pests
     */
    select?: PestsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestsInclude<ExtArgs> | null
  }



  /**
   * Model Blights
   */

  export type AggregateBlights = {
    _count: BlightsCountAggregateOutputType | null
    _min: BlightsMinAggregateOutputType | null
    _max: BlightsMaxAggregateOutputType | null
  }

  export type BlightsMinAggregateOutputType = {
    id: string | null
    common_name: string | null
    scientific_name: string | null
    description: string | null
    wikipedia: string | null
    britannica: string | null
    img: string | null
    taxonomyId: string | null
  }

  export type BlightsMaxAggregateOutputType = {
    id: string | null
    common_name: string | null
    scientific_name: string | null
    description: string | null
    wikipedia: string | null
    britannica: string | null
    img: string | null
    taxonomyId: string | null
  }

  export type BlightsCountAggregateOutputType = {
    id: number
    common_name: number
    synonyms: number
    scientific_name: number
    description: number
    wikipedia: number
    britannica: number
    img: number
    imgs: number
    taxonomyId: number
    _all: number
  }


  export type BlightsMinAggregateInputType = {
    id?: true
    common_name?: true
    scientific_name?: true
    description?: true
    wikipedia?: true
    britannica?: true
    img?: true
    taxonomyId?: true
  }

  export type BlightsMaxAggregateInputType = {
    id?: true
    common_name?: true
    scientific_name?: true
    description?: true
    wikipedia?: true
    britannica?: true
    img?: true
    taxonomyId?: true
  }

  export type BlightsCountAggregateInputType = {
    id?: true
    common_name?: true
    synonyms?: true
    scientific_name?: true
    description?: true
    wikipedia?: true
    britannica?: true
    img?: true
    imgs?: true
    taxonomyId?: true
    _all?: true
  }

  export type BlightsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Blights to aggregate.
     */
    where?: BlightsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blights to fetch.
     */
    orderBy?: BlightsOrderByWithRelationAndSearchRelevanceInput | BlightsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BlightsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Blights
    **/
    _count?: true | BlightsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BlightsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BlightsMaxAggregateInputType
  }

  export type GetBlightsAggregateType<T extends BlightsAggregateArgs> = {
        [P in keyof T & keyof AggregateBlights]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBlights[P]>
      : GetScalarType<T[P], AggregateBlights[P]>
  }




  export type BlightsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BlightsWhereInput
    orderBy?: BlightsOrderByWithAggregationInput | BlightsOrderByWithAggregationInput[]
    by: BlightsScalarFieldEnum[] | BlightsScalarFieldEnum
    having?: BlightsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BlightsCountAggregateInputType | true
    _min?: BlightsMinAggregateInputType
    _max?: BlightsMaxAggregateInputType
  }

  export type BlightsGroupByOutputType = {
    id: string
    common_name: string
    synonyms: string[]
    scientific_name: string
    description: string | null
    wikipedia: string | null
    britannica: string | null
    img: string | null
    imgs: string[]
    taxonomyId: string
    _count: BlightsCountAggregateOutputType | null
    _min: BlightsMinAggregateOutputType | null
    _max: BlightsMaxAggregateOutputType | null
  }

  type GetBlightsGroupByPayload<T extends BlightsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BlightsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BlightsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BlightsGroupByOutputType[P]>
            : GetScalarType<T[P], BlightsGroupByOutputType[P]>
        }
      >
    >


  export type BlightsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    common_name?: boolean
    synonyms?: boolean
    scientific_name?: boolean
    description?: boolean
    wikipedia?: boolean
    britannica?: boolean
    img?: boolean
    imgs?: boolean
    taxonomyId?: boolean
    taxonomy?: boolean | TaxonomyDefaultArgs<ExtArgs>
    plants?: boolean | Blights$plantsArgs<ExtArgs>
    pestisides?: boolean | Blights$pestisidesArgs<ExtArgs>
    _count?: boolean | BlightsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["blights"]>

  export type BlightsSelectScalar = {
    id?: boolean
    common_name?: boolean
    synonyms?: boolean
    scientific_name?: boolean
    description?: boolean
    wikipedia?: boolean
    britannica?: boolean
    img?: boolean
    imgs?: boolean
    taxonomyId?: boolean
  }

  export type BlightsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    taxonomy?: boolean | TaxonomyDefaultArgs<ExtArgs>
    plants?: boolean | Blights$plantsArgs<ExtArgs>
    pestisides?: boolean | Blights$pestisidesArgs<ExtArgs>
    _count?: boolean | BlightsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $BlightsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Blights"
    objects: {
      taxonomy: Prisma.$TaxonomyPayload<ExtArgs>
      plants: Prisma.$PlantsPayload<ExtArgs>[]
      pestisides: Prisma.$PestisidesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      common_name: string
      synonyms: string[]
      scientific_name: string
      description: string | null
      wikipedia: string | null
      britannica: string | null
      img: string | null
      imgs: string[]
      taxonomyId: string
    }, ExtArgs["result"]["blights"]>
    composites: {}
  }


  type BlightsGetPayload<S extends boolean | null | undefined | BlightsDefaultArgs> = $Result.GetResult<Prisma.$BlightsPayload, S>

  type BlightsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BlightsFindManyArgs, 'select' | 'include'> & {
      select?: BlightsCountAggregateInputType | true
    }

  export interface BlightsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Blights'], meta: { name: 'Blights' } }
    /**
     * Find zero or one Blights that matches the filter.
     * @param {BlightsFindUniqueArgs} args - Arguments to find a Blights
     * @example
     * // Get one Blights
     * const blights = await prisma.blights.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BlightsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BlightsFindUniqueArgs<ExtArgs>>
    ): Prisma__BlightsClient<$Result.GetResult<Prisma.$BlightsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Blights that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BlightsFindUniqueOrThrowArgs} args - Arguments to find a Blights
     * @example
     * // Get one Blights
     * const blights = await prisma.blights.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BlightsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BlightsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BlightsClient<$Result.GetResult<Prisma.$BlightsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Blights that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlightsFindFirstArgs} args - Arguments to find a Blights
     * @example
     * // Get one Blights
     * const blights = await prisma.blights.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BlightsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BlightsFindFirstArgs<ExtArgs>>
    ): Prisma__BlightsClient<$Result.GetResult<Prisma.$BlightsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Blights that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlightsFindFirstOrThrowArgs} args - Arguments to find a Blights
     * @example
     * // Get one Blights
     * const blights = await prisma.blights.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BlightsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BlightsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BlightsClient<$Result.GetResult<Prisma.$BlightsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Blights that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlightsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Blights
     * const blights = await prisma.blights.findMany()
     * 
     * // Get first 10 Blights
     * const blights = await prisma.blights.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const blightsWithIdOnly = await prisma.blights.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BlightsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlightsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlightsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Blights.
     * @param {BlightsCreateArgs} args - Arguments to create a Blights.
     * @example
     * // Create one Blights
     * const Blights = await prisma.blights.create({
     *   data: {
     *     // ... data to create a Blights
     *   }
     * })
     * 
    **/
    create<T extends BlightsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BlightsCreateArgs<ExtArgs>>
    ): Prisma__BlightsClient<$Result.GetResult<Prisma.$BlightsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Blights.
     *     @param {BlightsCreateManyArgs} args - Arguments to create many Blights.
     *     @example
     *     // Create many Blights
     *     const blights = await prisma.blights.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BlightsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlightsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Blights.
     * @param {BlightsDeleteArgs} args - Arguments to delete one Blights.
     * @example
     * // Delete one Blights
     * const Blights = await prisma.blights.delete({
     *   where: {
     *     // ... filter to delete one Blights
     *   }
     * })
     * 
    **/
    delete<T extends BlightsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BlightsDeleteArgs<ExtArgs>>
    ): Prisma__BlightsClient<$Result.GetResult<Prisma.$BlightsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Blights.
     * @param {BlightsUpdateArgs} args - Arguments to update one Blights.
     * @example
     * // Update one Blights
     * const blights = await prisma.blights.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BlightsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BlightsUpdateArgs<ExtArgs>>
    ): Prisma__BlightsClient<$Result.GetResult<Prisma.$BlightsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Blights.
     * @param {BlightsDeleteManyArgs} args - Arguments to filter Blights to delete.
     * @example
     * // Delete a few Blights
     * const { count } = await prisma.blights.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BlightsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BlightsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Blights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlightsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Blights
     * const blights = await prisma.blights.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BlightsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BlightsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Blights.
     * @param {BlightsUpsertArgs} args - Arguments to update or create a Blights.
     * @example
     * // Update or create a Blights
     * const blights = await prisma.blights.upsert({
     *   create: {
     *     // ... data to create a Blights
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Blights we want to update
     *   }
     * })
    **/
    upsert<T extends BlightsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BlightsUpsertArgs<ExtArgs>>
    ): Prisma__BlightsClient<$Result.GetResult<Prisma.$BlightsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Blights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlightsCountArgs} args - Arguments to filter Blights to count.
     * @example
     * // Count the number of Blights
     * const count = await prisma.blights.count({
     *   where: {
     *     // ... the filter for the Blights we want to count
     *   }
     * })
    **/
    count<T extends BlightsCountArgs>(
      args?: Subset<T, BlightsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BlightsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Blights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlightsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BlightsAggregateArgs>(args: Subset<T, BlightsAggregateArgs>): Prisma.PrismaPromise<GetBlightsAggregateType<T>>

    /**
     * Group by Blights.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BlightsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BlightsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BlightsGroupByArgs['orderBy'] }
        : { orderBy?: BlightsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BlightsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBlightsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Blights model
   */
  readonly fields: BlightsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Blights.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BlightsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    taxonomy<T extends TaxonomyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TaxonomyDefaultArgs<ExtArgs>>): Prisma__TaxonomyClient<$Result.GetResult<Prisma.$TaxonomyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    plants<T extends Blights$plantsArgs<ExtArgs> = {}>(args?: Subset<T, Blights$plantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantsPayload<ExtArgs>, T, 'findMany'> | Null>;

    pestisides<T extends Blights$pestisidesArgs<ExtArgs> = {}>(args?: Subset<T, Blights$pestisidesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PestisidesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Blights model
   */ 
  interface BlightsFieldRefs {
    readonly id: FieldRef<"Blights", 'String'>
    readonly common_name: FieldRef<"Blights", 'String'>
    readonly synonyms: FieldRef<"Blights", 'String[]'>
    readonly scientific_name: FieldRef<"Blights", 'String'>
    readonly description: FieldRef<"Blights", 'String'>
    readonly wikipedia: FieldRef<"Blights", 'String'>
    readonly britannica: FieldRef<"Blights", 'String'>
    readonly img: FieldRef<"Blights", 'String'>
    readonly imgs: FieldRef<"Blights", 'String[]'>
    readonly taxonomyId: FieldRef<"Blights", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Blights findUnique
   */
  export type BlightsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blights
     */
    select?: BlightsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlightsInclude<ExtArgs> | null
    /**
     * Filter, which Blights to fetch.
     */
    where: BlightsWhereUniqueInput
  }


  /**
   * Blights findUniqueOrThrow
   */
  export type BlightsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blights
     */
    select?: BlightsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlightsInclude<ExtArgs> | null
    /**
     * Filter, which Blights to fetch.
     */
    where: BlightsWhereUniqueInput
  }


  /**
   * Blights findFirst
   */
  export type BlightsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blights
     */
    select?: BlightsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlightsInclude<ExtArgs> | null
    /**
     * Filter, which Blights to fetch.
     */
    where?: BlightsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blights to fetch.
     */
    orderBy?: BlightsOrderByWithRelationAndSearchRelevanceInput | BlightsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Blights.
     */
    cursor?: BlightsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Blights.
     */
    distinct?: BlightsScalarFieldEnum | BlightsScalarFieldEnum[]
  }


  /**
   * Blights findFirstOrThrow
   */
  export type BlightsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blights
     */
    select?: BlightsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlightsInclude<ExtArgs> | null
    /**
     * Filter, which Blights to fetch.
     */
    where?: BlightsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blights to fetch.
     */
    orderBy?: BlightsOrderByWithRelationAndSearchRelevanceInput | BlightsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Blights.
     */
    cursor?: BlightsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blights.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Blights.
     */
    distinct?: BlightsScalarFieldEnum | BlightsScalarFieldEnum[]
  }


  /**
   * Blights findMany
   */
  export type BlightsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blights
     */
    select?: BlightsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlightsInclude<ExtArgs> | null
    /**
     * Filter, which Blights to fetch.
     */
    where?: BlightsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Blights to fetch.
     */
    orderBy?: BlightsOrderByWithRelationAndSearchRelevanceInput | BlightsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Blights.
     */
    cursor?: BlightsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Blights from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Blights.
     */
    skip?: number
    distinct?: BlightsScalarFieldEnum | BlightsScalarFieldEnum[]
  }


  /**
   * Blights create
   */
  export type BlightsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blights
     */
    select?: BlightsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlightsInclude<ExtArgs> | null
    /**
     * The data needed to create a Blights.
     */
    data: XOR<BlightsCreateInput, BlightsUncheckedCreateInput>
  }


  /**
   * Blights createMany
   */
  export type BlightsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Blights.
     */
    data: BlightsCreateManyInput | BlightsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Blights update
   */
  export type BlightsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blights
     */
    select?: BlightsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlightsInclude<ExtArgs> | null
    /**
     * The data needed to update a Blights.
     */
    data: XOR<BlightsUpdateInput, BlightsUncheckedUpdateInput>
    /**
     * Choose, which Blights to update.
     */
    where: BlightsWhereUniqueInput
  }


  /**
   * Blights updateMany
   */
  export type BlightsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Blights.
     */
    data: XOR<BlightsUpdateManyMutationInput, BlightsUncheckedUpdateManyInput>
    /**
     * Filter which Blights to update
     */
    where?: BlightsWhereInput
  }


  /**
   * Blights upsert
   */
  export type BlightsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blights
     */
    select?: BlightsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlightsInclude<ExtArgs> | null
    /**
     * The filter to search for the Blights to update in case it exists.
     */
    where: BlightsWhereUniqueInput
    /**
     * In case the Blights found by the `where` argument doesn't exist, create a new Blights with this data.
     */
    create: XOR<BlightsCreateInput, BlightsUncheckedCreateInput>
    /**
     * In case the Blights was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BlightsUpdateInput, BlightsUncheckedUpdateInput>
  }


  /**
   * Blights delete
   */
  export type BlightsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blights
     */
    select?: BlightsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlightsInclude<ExtArgs> | null
    /**
     * Filter which Blights to delete.
     */
    where: BlightsWhereUniqueInput
  }


  /**
   * Blights deleteMany
   */
  export type BlightsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Blights to delete
     */
    where?: BlightsWhereInput
  }


  /**
   * Blights.plants
   */
  export type Blights$plantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plants
     */
    select?: PlantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantsInclude<ExtArgs> | null
    where?: PlantsWhereInput
    orderBy?: PlantsOrderByWithRelationAndSearchRelevanceInput | PlantsOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: PlantsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlantsScalarFieldEnum | PlantsScalarFieldEnum[]
  }


  /**
   * Blights.pestisides
   */
  export type Blights$pestisidesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pestisides
     */
    select?: PestisidesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestisidesInclude<ExtArgs> | null
    where?: PestisidesWhereInput
    orderBy?: PestisidesOrderByWithRelationAndSearchRelevanceInput | PestisidesOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: PestisidesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PestisidesScalarFieldEnum | PestisidesScalarFieldEnum[]
  }


  /**
   * Blights without action
   */
  export type BlightsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blights
     */
    select?: BlightsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlightsInclude<ExtArgs> | null
  }



  /**
   * Model Pestisides
   */

  export type AggregatePestisides = {
    _count: PestisidesCountAggregateOutputType | null
    _min: PestisidesMinAggregateOutputType | null
    _max: PestisidesMaxAggregateOutputType | null
  }

  export type PestisidesMinAggregateOutputType = {
    id: string | null
    common_name: string | null
    scientific_name: string | null
    description: string | null
    wikipedia: string | null
    britannica: string | null
    img: string | null
  }

  export type PestisidesMaxAggregateOutputType = {
    id: string | null
    common_name: string | null
    scientific_name: string | null
    description: string | null
    wikipedia: string | null
    britannica: string | null
    img: string | null
  }

  export type PestisidesCountAggregateOutputType = {
    id: number
    common_name: number
    synonyms: number
    scientific_name: number
    description: number
    wikipedia: number
    britannica: number
    img: number
    _all: number
  }


  export type PestisidesMinAggregateInputType = {
    id?: true
    common_name?: true
    scientific_name?: true
    description?: true
    wikipedia?: true
    britannica?: true
    img?: true
  }

  export type PestisidesMaxAggregateInputType = {
    id?: true
    common_name?: true
    scientific_name?: true
    description?: true
    wikipedia?: true
    britannica?: true
    img?: true
  }

  export type PestisidesCountAggregateInputType = {
    id?: true
    common_name?: true
    synonyms?: true
    scientific_name?: true
    description?: true
    wikipedia?: true
    britannica?: true
    img?: true
    _all?: true
  }

  export type PestisidesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pestisides to aggregate.
     */
    where?: PestisidesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pestisides to fetch.
     */
    orderBy?: PestisidesOrderByWithRelationAndSearchRelevanceInput | PestisidesOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PestisidesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pestisides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pestisides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pestisides
    **/
    _count?: true | PestisidesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PestisidesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PestisidesMaxAggregateInputType
  }

  export type GetPestisidesAggregateType<T extends PestisidesAggregateArgs> = {
        [P in keyof T & keyof AggregatePestisides]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePestisides[P]>
      : GetScalarType<T[P], AggregatePestisides[P]>
  }




  export type PestisidesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PestisidesWhereInput
    orderBy?: PestisidesOrderByWithAggregationInput | PestisidesOrderByWithAggregationInput[]
    by: PestisidesScalarFieldEnum[] | PestisidesScalarFieldEnum
    having?: PestisidesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PestisidesCountAggregateInputType | true
    _min?: PestisidesMinAggregateInputType
    _max?: PestisidesMaxAggregateInputType
  }

  export type PestisidesGroupByOutputType = {
    id: string
    common_name: string | null
    synonyms: string[]
    scientific_name: string | null
    description: string | null
    wikipedia: string | null
    britannica: string | null
    img: string | null
    _count: PestisidesCountAggregateOutputType | null
    _min: PestisidesMinAggregateOutputType | null
    _max: PestisidesMaxAggregateOutputType | null
  }

  type GetPestisidesGroupByPayload<T extends PestisidesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PestisidesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PestisidesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PestisidesGroupByOutputType[P]>
            : GetScalarType<T[P], PestisidesGroupByOutputType[P]>
        }
      >
    >


  export type PestisidesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    common_name?: boolean
    synonyms?: boolean
    scientific_name?: boolean
    description?: boolean
    wikipedia?: boolean
    britannica?: boolean
    img?: boolean
    pests?: boolean | Pestisides$pestsArgs<ExtArgs>
    blights?: boolean | Pestisides$blightsArgs<ExtArgs>
    _count?: boolean | PestisidesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pestisides"]>

  export type PestisidesSelectScalar = {
    id?: boolean
    common_name?: boolean
    synonyms?: boolean
    scientific_name?: boolean
    description?: boolean
    wikipedia?: boolean
    britannica?: boolean
    img?: boolean
  }

  export type PestisidesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pests?: boolean | Pestisides$pestsArgs<ExtArgs>
    blights?: boolean | Pestisides$blightsArgs<ExtArgs>
    _count?: boolean | PestisidesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PestisidesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pestisides"
    objects: {
      pests: Prisma.$PestsPayload<ExtArgs>[]
      blights: Prisma.$BlightsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      common_name: string | null
      synonyms: string[]
      scientific_name: string | null
      description: string | null
      wikipedia: string | null
      britannica: string | null
      img: string | null
    }, ExtArgs["result"]["pestisides"]>
    composites: {}
  }


  type PestisidesGetPayload<S extends boolean | null | undefined | PestisidesDefaultArgs> = $Result.GetResult<Prisma.$PestisidesPayload, S>

  type PestisidesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PestisidesFindManyArgs, 'select' | 'include'> & {
      select?: PestisidesCountAggregateInputType | true
    }

  export interface PestisidesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pestisides'], meta: { name: 'Pestisides' } }
    /**
     * Find zero or one Pestisides that matches the filter.
     * @param {PestisidesFindUniqueArgs} args - Arguments to find a Pestisides
     * @example
     * // Get one Pestisides
     * const pestisides = await prisma.pestisides.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PestisidesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PestisidesFindUniqueArgs<ExtArgs>>
    ): Prisma__PestisidesClient<$Result.GetResult<Prisma.$PestisidesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Pestisides that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PestisidesFindUniqueOrThrowArgs} args - Arguments to find a Pestisides
     * @example
     * // Get one Pestisides
     * const pestisides = await prisma.pestisides.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PestisidesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PestisidesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PestisidesClient<$Result.GetResult<Prisma.$PestisidesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Pestisides that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PestisidesFindFirstArgs} args - Arguments to find a Pestisides
     * @example
     * // Get one Pestisides
     * const pestisides = await prisma.pestisides.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PestisidesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PestisidesFindFirstArgs<ExtArgs>>
    ): Prisma__PestisidesClient<$Result.GetResult<Prisma.$PestisidesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Pestisides that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PestisidesFindFirstOrThrowArgs} args - Arguments to find a Pestisides
     * @example
     * // Get one Pestisides
     * const pestisides = await prisma.pestisides.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PestisidesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PestisidesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PestisidesClient<$Result.GetResult<Prisma.$PestisidesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Pestisides that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PestisidesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pestisides
     * const pestisides = await prisma.pestisides.findMany()
     * 
     * // Get first 10 Pestisides
     * const pestisides = await prisma.pestisides.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pestisidesWithIdOnly = await prisma.pestisides.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PestisidesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PestisidesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PestisidesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Pestisides.
     * @param {PestisidesCreateArgs} args - Arguments to create a Pestisides.
     * @example
     * // Create one Pestisides
     * const Pestisides = await prisma.pestisides.create({
     *   data: {
     *     // ... data to create a Pestisides
     *   }
     * })
     * 
    **/
    create<T extends PestisidesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PestisidesCreateArgs<ExtArgs>>
    ): Prisma__PestisidesClient<$Result.GetResult<Prisma.$PestisidesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Pestisides.
     *     @param {PestisidesCreateManyArgs} args - Arguments to create many Pestisides.
     *     @example
     *     // Create many Pestisides
     *     const pestisides = await prisma.pestisides.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PestisidesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PestisidesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Pestisides.
     * @param {PestisidesDeleteArgs} args - Arguments to delete one Pestisides.
     * @example
     * // Delete one Pestisides
     * const Pestisides = await prisma.pestisides.delete({
     *   where: {
     *     // ... filter to delete one Pestisides
     *   }
     * })
     * 
    **/
    delete<T extends PestisidesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PestisidesDeleteArgs<ExtArgs>>
    ): Prisma__PestisidesClient<$Result.GetResult<Prisma.$PestisidesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Pestisides.
     * @param {PestisidesUpdateArgs} args - Arguments to update one Pestisides.
     * @example
     * // Update one Pestisides
     * const pestisides = await prisma.pestisides.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PestisidesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PestisidesUpdateArgs<ExtArgs>>
    ): Prisma__PestisidesClient<$Result.GetResult<Prisma.$PestisidesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Pestisides.
     * @param {PestisidesDeleteManyArgs} args - Arguments to filter Pestisides to delete.
     * @example
     * // Delete a few Pestisides
     * const { count } = await prisma.pestisides.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PestisidesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PestisidesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pestisides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PestisidesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pestisides
     * const pestisides = await prisma.pestisides.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PestisidesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PestisidesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pestisides.
     * @param {PestisidesUpsertArgs} args - Arguments to update or create a Pestisides.
     * @example
     * // Update or create a Pestisides
     * const pestisides = await prisma.pestisides.upsert({
     *   create: {
     *     // ... data to create a Pestisides
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pestisides we want to update
     *   }
     * })
    **/
    upsert<T extends PestisidesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PestisidesUpsertArgs<ExtArgs>>
    ): Prisma__PestisidesClient<$Result.GetResult<Prisma.$PestisidesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Pestisides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PestisidesCountArgs} args - Arguments to filter Pestisides to count.
     * @example
     * // Count the number of Pestisides
     * const count = await prisma.pestisides.count({
     *   where: {
     *     // ... the filter for the Pestisides we want to count
     *   }
     * })
    **/
    count<T extends PestisidesCountArgs>(
      args?: Subset<T, PestisidesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PestisidesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pestisides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PestisidesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PestisidesAggregateArgs>(args: Subset<T, PestisidesAggregateArgs>): Prisma.PrismaPromise<GetPestisidesAggregateType<T>>

    /**
     * Group by Pestisides.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PestisidesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PestisidesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PestisidesGroupByArgs['orderBy'] }
        : { orderBy?: PestisidesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PestisidesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPestisidesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pestisides model
   */
  readonly fields: PestisidesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pestisides.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PestisidesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    pests<T extends Pestisides$pestsArgs<ExtArgs> = {}>(args?: Subset<T, Pestisides$pestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PestsPayload<ExtArgs>, T, 'findMany'> | Null>;

    blights<T extends Pestisides$blightsArgs<ExtArgs> = {}>(args?: Subset<T, Pestisides$blightsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BlightsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Pestisides model
   */ 
  interface PestisidesFieldRefs {
    readonly id: FieldRef<"Pestisides", 'String'>
    readonly common_name: FieldRef<"Pestisides", 'String'>
    readonly synonyms: FieldRef<"Pestisides", 'String[]'>
    readonly scientific_name: FieldRef<"Pestisides", 'String'>
    readonly description: FieldRef<"Pestisides", 'String'>
    readonly wikipedia: FieldRef<"Pestisides", 'String'>
    readonly britannica: FieldRef<"Pestisides", 'String'>
    readonly img: FieldRef<"Pestisides", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Pestisides findUnique
   */
  export type PestisidesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pestisides
     */
    select?: PestisidesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestisidesInclude<ExtArgs> | null
    /**
     * Filter, which Pestisides to fetch.
     */
    where: PestisidesWhereUniqueInput
  }


  /**
   * Pestisides findUniqueOrThrow
   */
  export type PestisidesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pestisides
     */
    select?: PestisidesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestisidesInclude<ExtArgs> | null
    /**
     * Filter, which Pestisides to fetch.
     */
    where: PestisidesWhereUniqueInput
  }


  /**
   * Pestisides findFirst
   */
  export type PestisidesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pestisides
     */
    select?: PestisidesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestisidesInclude<ExtArgs> | null
    /**
     * Filter, which Pestisides to fetch.
     */
    where?: PestisidesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pestisides to fetch.
     */
    orderBy?: PestisidesOrderByWithRelationAndSearchRelevanceInput | PestisidesOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pestisides.
     */
    cursor?: PestisidesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pestisides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pestisides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pestisides.
     */
    distinct?: PestisidesScalarFieldEnum | PestisidesScalarFieldEnum[]
  }


  /**
   * Pestisides findFirstOrThrow
   */
  export type PestisidesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pestisides
     */
    select?: PestisidesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestisidesInclude<ExtArgs> | null
    /**
     * Filter, which Pestisides to fetch.
     */
    where?: PestisidesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pestisides to fetch.
     */
    orderBy?: PestisidesOrderByWithRelationAndSearchRelevanceInput | PestisidesOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pestisides.
     */
    cursor?: PestisidesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pestisides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pestisides.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pestisides.
     */
    distinct?: PestisidesScalarFieldEnum | PestisidesScalarFieldEnum[]
  }


  /**
   * Pestisides findMany
   */
  export type PestisidesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pestisides
     */
    select?: PestisidesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestisidesInclude<ExtArgs> | null
    /**
     * Filter, which Pestisides to fetch.
     */
    where?: PestisidesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pestisides to fetch.
     */
    orderBy?: PestisidesOrderByWithRelationAndSearchRelevanceInput | PestisidesOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pestisides.
     */
    cursor?: PestisidesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pestisides from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pestisides.
     */
    skip?: number
    distinct?: PestisidesScalarFieldEnum | PestisidesScalarFieldEnum[]
  }


  /**
   * Pestisides create
   */
  export type PestisidesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pestisides
     */
    select?: PestisidesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestisidesInclude<ExtArgs> | null
    /**
     * The data needed to create a Pestisides.
     */
    data?: XOR<PestisidesCreateInput, PestisidesUncheckedCreateInput>
  }


  /**
   * Pestisides createMany
   */
  export type PestisidesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pestisides.
     */
    data: PestisidesCreateManyInput | PestisidesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Pestisides update
   */
  export type PestisidesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pestisides
     */
    select?: PestisidesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestisidesInclude<ExtArgs> | null
    /**
     * The data needed to update a Pestisides.
     */
    data: XOR<PestisidesUpdateInput, PestisidesUncheckedUpdateInput>
    /**
     * Choose, which Pestisides to update.
     */
    where: PestisidesWhereUniqueInput
  }


  /**
   * Pestisides updateMany
   */
  export type PestisidesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pestisides.
     */
    data: XOR<PestisidesUpdateManyMutationInput, PestisidesUncheckedUpdateManyInput>
    /**
     * Filter which Pestisides to update
     */
    where?: PestisidesWhereInput
  }


  /**
   * Pestisides upsert
   */
  export type PestisidesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pestisides
     */
    select?: PestisidesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestisidesInclude<ExtArgs> | null
    /**
     * The filter to search for the Pestisides to update in case it exists.
     */
    where: PestisidesWhereUniqueInput
    /**
     * In case the Pestisides found by the `where` argument doesn't exist, create a new Pestisides with this data.
     */
    create: XOR<PestisidesCreateInput, PestisidesUncheckedCreateInput>
    /**
     * In case the Pestisides was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PestisidesUpdateInput, PestisidesUncheckedUpdateInput>
  }


  /**
   * Pestisides delete
   */
  export type PestisidesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pestisides
     */
    select?: PestisidesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestisidesInclude<ExtArgs> | null
    /**
     * Filter which Pestisides to delete.
     */
    where: PestisidesWhereUniqueInput
  }


  /**
   * Pestisides deleteMany
   */
  export type PestisidesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pestisides to delete
     */
    where?: PestisidesWhereInput
  }


  /**
   * Pestisides.pests
   */
  export type Pestisides$pestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pests
     */
    select?: PestsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestsInclude<ExtArgs> | null
    where?: PestsWhereInput
    orderBy?: PestsOrderByWithRelationAndSearchRelevanceInput | PestsOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: PestsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PestsScalarFieldEnum | PestsScalarFieldEnum[]
  }


  /**
   * Pestisides.blights
   */
  export type Pestisides$blightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blights
     */
    select?: BlightsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlightsInclude<ExtArgs> | null
    where?: BlightsWhereInput
    orderBy?: BlightsOrderByWithRelationAndSearchRelevanceInput | BlightsOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: BlightsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BlightsScalarFieldEnum | BlightsScalarFieldEnum[]
  }


  /**
   * Pestisides without action
   */
  export type PestisidesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pestisides
     */
    select?: PestisidesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestisidesInclude<ExtArgs> | null
  }



  /**
   * Model Taxonomy
   */

  export type AggregateTaxonomy = {
    _count: TaxonomyCountAggregateOutputType | null
    _min: TaxonomyMinAggregateOutputType | null
    _max: TaxonomyMaxAggregateOutputType | null
  }

  export type TaxonomyMinAggregateOutputType = {
    id: string | null
    kingdom: string | null
    phylum: string | null
    class: string | null
    order: string | null
    family: string | null
    genus: string | null
    species: string | null
  }

  export type TaxonomyMaxAggregateOutputType = {
    id: string | null
    kingdom: string | null
    phylum: string | null
    class: string | null
    order: string | null
    family: string | null
    genus: string | null
    species: string | null
  }

  export type TaxonomyCountAggregateOutputType = {
    id: number
    kingdom: number
    phylum: number
    class: number
    order: number
    family: number
    genus: number
    species: number
    _all: number
  }


  export type TaxonomyMinAggregateInputType = {
    id?: true
    kingdom?: true
    phylum?: true
    class?: true
    order?: true
    family?: true
    genus?: true
    species?: true
  }

  export type TaxonomyMaxAggregateInputType = {
    id?: true
    kingdom?: true
    phylum?: true
    class?: true
    order?: true
    family?: true
    genus?: true
    species?: true
  }

  export type TaxonomyCountAggregateInputType = {
    id?: true
    kingdom?: true
    phylum?: true
    class?: true
    order?: true
    family?: true
    genus?: true
    species?: true
    _all?: true
  }

  export type TaxonomyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Taxonomy to aggregate.
     */
    where?: TaxonomyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Taxonomies to fetch.
     */
    orderBy?: TaxonomyOrderByWithRelationAndSearchRelevanceInput | TaxonomyOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaxonomyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Taxonomies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Taxonomies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Taxonomies
    **/
    _count?: true | TaxonomyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaxonomyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaxonomyMaxAggregateInputType
  }

  export type GetTaxonomyAggregateType<T extends TaxonomyAggregateArgs> = {
        [P in keyof T & keyof AggregateTaxonomy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTaxonomy[P]>
      : GetScalarType<T[P], AggregateTaxonomy[P]>
  }




  export type TaxonomyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaxonomyWhereInput
    orderBy?: TaxonomyOrderByWithAggregationInput | TaxonomyOrderByWithAggregationInput[]
    by: TaxonomyScalarFieldEnum[] | TaxonomyScalarFieldEnum
    having?: TaxonomyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaxonomyCountAggregateInputType | true
    _min?: TaxonomyMinAggregateInputType
    _max?: TaxonomyMaxAggregateInputType
  }

  export type TaxonomyGroupByOutputType = {
    id: string
    kingdom: string | null
    phylum: string | null
    class: string | null
    order: string | null
    family: string | null
    genus: string | null
    species: string | null
    _count: TaxonomyCountAggregateOutputType | null
    _min: TaxonomyMinAggregateOutputType | null
    _max: TaxonomyMaxAggregateOutputType | null
  }

  type GetTaxonomyGroupByPayload<T extends TaxonomyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaxonomyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaxonomyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaxonomyGroupByOutputType[P]>
            : GetScalarType<T[P], TaxonomyGroupByOutputType[P]>
        }
      >
    >


  export type TaxonomySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kingdom?: boolean
    phylum?: boolean
    class?: boolean
    order?: boolean
    family?: boolean
    genus?: boolean
    species?: boolean
    plant?: boolean | Taxonomy$plantArgs<ExtArgs>
    pest?: boolean | Taxonomy$pestArgs<ExtArgs>
    blight?: boolean | Taxonomy$blightArgs<ExtArgs>
  }, ExtArgs["result"]["taxonomy"]>

  export type TaxonomySelectScalar = {
    id?: boolean
    kingdom?: boolean
    phylum?: boolean
    class?: boolean
    order?: boolean
    family?: boolean
    genus?: boolean
    species?: boolean
  }

  export type TaxonomyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plant?: boolean | Taxonomy$plantArgs<ExtArgs>
    pest?: boolean | Taxonomy$pestArgs<ExtArgs>
    blight?: boolean | Taxonomy$blightArgs<ExtArgs>
  }


  export type $TaxonomyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Taxonomy"
    objects: {
      plant: Prisma.$PlantsPayload<ExtArgs> | null
      pest: Prisma.$PestsPayload<ExtArgs> | null
      blight: Prisma.$BlightsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      kingdom: string | null
      phylum: string | null
      class: string | null
      order: string | null
      family: string | null
      genus: string | null
      species: string | null
    }, ExtArgs["result"]["taxonomy"]>
    composites: {}
  }


  type TaxonomyGetPayload<S extends boolean | null | undefined | TaxonomyDefaultArgs> = $Result.GetResult<Prisma.$TaxonomyPayload, S>

  type TaxonomyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TaxonomyFindManyArgs, 'select' | 'include'> & {
      select?: TaxonomyCountAggregateInputType | true
    }

  export interface TaxonomyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Taxonomy'], meta: { name: 'Taxonomy' } }
    /**
     * Find zero or one Taxonomy that matches the filter.
     * @param {TaxonomyFindUniqueArgs} args - Arguments to find a Taxonomy
     * @example
     * // Get one Taxonomy
     * const taxonomy = await prisma.taxonomy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TaxonomyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TaxonomyFindUniqueArgs<ExtArgs>>
    ): Prisma__TaxonomyClient<$Result.GetResult<Prisma.$TaxonomyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Taxonomy that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TaxonomyFindUniqueOrThrowArgs} args - Arguments to find a Taxonomy
     * @example
     * // Get one Taxonomy
     * const taxonomy = await prisma.taxonomy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TaxonomyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TaxonomyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TaxonomyClient<$Result.GetResult<Prisma.$TaxonomyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Taxonomy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaxonomyFindFirstArgs} args - Arguments to find a Taxonomy
     * @example
     * // Get one Taxonomy
     * const taxonomy = await prisma.taxonomy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TaxonomyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TaxonomyFindFirstArgs<ExtArgs>>
    ): Prisma__TaxonomyClient<$Result.GetResult<Prisma.$TaxonomyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Taxonomy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaxonomyFindFirstOrThrowArgs} args - Arguments to find a Taxonomy
     * @example
     * // Get one Taxonomy
     * const taxonomy = await prisma.taxonomy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TaxonomyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TaxonomyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TaxonomyClient<$Result.GetResult<Prisma.$TaxonomyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Taxonomies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaxonomyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Taxonomies
     * const taxonomies = await prisma.taxonomy.findMany()
     * 
     * // Get first 10 Taxonomies
     * const taxonomies = await prisma.taxonomy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taxonomyWithIdOnly = await prisma.taxonomy.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TaxonomyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TaxonomyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaxonomyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Taxonomy.
     * @param {TaxonomyCreateArgs} args - Arguments to create a Taxonomy.
     * @example
     * // Create one Taxonomy
     * const Taxonomy = await prisma.taxonomy.create({
     *   data: {
     *     // ... data to create a Taxonomy
     *   }
     * })
     * 
    **/
    create<T extends TaxonomyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TaxonomyCreateArgs<ExtArgs>>
    ): Prisma__TaxonomyClient<$Result.GetResult<Prisma.$TaxonomyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Taxonomies.
     *     @param {TaxonomyCreateManyArgs} args - Arguments to create many Taxonomies.
     *     @example
     *     // Create many Taxonomies
     *     const taxonomy = await prisma.taxonomy.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TaxonomyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TaxonomyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Taxonomy.
     * @param {TaxonomyDeleteArgs} args - Arguments to delete one Taxonomy.
     * @example
     * // Delete one Taxonomy
     * const Taxonomy = await prisma.taxonomy.delete({
     *   where: {
     *     // ... filter to delete one Taxonomy
     *   }
     * })
     * 
    **/
    delete<T extends TaxonomyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TaxonomyDeleteArgs<ExtArgs>>
    ): Prisma__TaxonomyClient<$Result.GetResult<Prisma.$TaxonomyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Taxonomy.
     * @param {TaxonomyUpdateArgs} args - Arguments to update one Taxonomy.
     * @example
     * // Update one Taxonomy
     * const taxonomy = await prisma.taxonomy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TaxonomyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TaxonomyUpdateArgs<ExtArgs>>
    ): Prisma__TaxonomyClient<$Result.GetResult<Prisma.$TaxonomyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Taxonomies.
     * @param {TaxonomyDeleteManyArgs} args - Arguments to filter Taxonomies to delete.
     * @example
     * // Delete a few Taxonomies
     * const { count } = await prisma.taxonomy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TaxonomyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TaxonomyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Taxonomies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaxonomyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Taxonomies
     * const taxonomy = await prisma.taxonomy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TaxonomyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TaxonomyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Taxonomy.
     * @param {TaxonomyUpsertArgs} args - Arguments to update or create a Taxonomy.
     * @example
     * // Update or create a Taxonomy
     * const taxonomy = await prisma.taxonomy.upsert({
     *   create: {
     *     // ... data to create a Taxonomy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Taxonomy we want to update
     *   }
     * })
    **/
    upsert<T extends TaxonomyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TaxonomyUpsertArgs<ExtArgs>>
    ): Prisma__TaxonomyClient<$Result.GetResult<Prisma.$TaxonomyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Taxonomies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaxonomyCountArgs} args - Arguments to filter Taxonomies to count.
     * @example
     * // Count the number of Taxonomies
     * const count = await prisma.taxonomy.count({
     *   where: {
     *     // ... the filter for the Taxonomies we want to count
     *   }
     * })
    **/
    count<T extends TaxonomyCountArgs>(
      args?: Subset<T, TaxonomyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaxonomyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Taxonomy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaxonomyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaxonomyAggregateArgs>(args: Subset<T, TaxonomyAggregateArgs>): Prisma.PrismaPromise<GetTaxonomyAggregateType<T>>

    /**
     * Group by Taxonomy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaxonomyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaxonomyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaxonomyGroupByArgs['orderBy'] }
        : { orderBy?: TaxonomyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaxonomyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaxonomyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Taxonomy model
   */
  readonly fields: TaxonomyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Taxonomy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaxonomyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    plant<T extends Taxonomy$plantArgs<ExtArgs> = {}>(args?: Subset<T, Taxonomy$plantArgs<ExtArgs>>): Prisma__PlantsClient<$Result.GetResult<Prisma.$PlantsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    pest<T extends Taxonomy$pestArgs<ExtArgs> = {}>(args?: Subset<T, Taxonomy$pestArgs<ExtArgs>>): Prisma__PestsClient<$Result.GetResult<Prisma.$PestsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    blight<T extends Taxonomy$blightArgs<ExtArgs> = {}>(args?: Subset<T, Taxonomy$blightArgs<ExtArgs>>): Prisma__BlightsClient<$Result.GetResult<Prisma.$BlightsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Taxonomy model
   */ 
  interface TaxonomyFieldRefs {
    readonly id: FieldRef<"Taxonomy", 'String'>
    readonly kingdom: FieldRef<"Taxonomy", 'String'>
    readonly phylum: FieldRef<"Taxonomy", 'String'>
    readonly class: FieldRef<"Taxonomy", 'String'>
    readonly order: FieldRef<"Taxonomy", 'String'>
    readonly family: FieldRef<"Taxonomy", 'String'>
    readonly genus: FieldRef<"Taxonomy", 'String'>
    readonly species: FieldRef<"Taxonomy", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Taxonomy findUnique
   */
  export type TaxonomyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taxonomy
     */
    select?: TaxonomySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaxonomyInclude<ExtArgs> | null
    /**
     * Filter, which Taxonomy to fetch.
     */
    where: TaxonomyWhereUniqueInput
  }


  /**
   * Taxonomy findUniqueOrThrow
   */
  export type TaxonomyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taxonomy
     */
    select?: TaxonomySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaxonomyInclude<ExtArgs> | null
    /**
     * Filter, which Taxonomy to fetch.
     */
    where: TaxonomyWhereUniqueInput
  }


  /**
   * Taxonomy findFirst
   */
  export type TaxonomyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taxonomy
     */
    select?: TaxonomySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaxonomyInclude<ExtArgs> | null
    /**
     * Filter, which Taxonomy to fetch.
     */
    where?: TaxonomyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Taxonomies to fetch.
     */
    orderBy?: TaxonomyOrderByWithRelationAndSearchRelevanceInput | TaxonomyOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Taxonomies.
     */
    cursor?: TaxonomyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Taxonomies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Taxonomies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Taxonomies.
     */
    distinct?: TaxonomyScalarFieldEnum | TaxonomyScalarFieldEnum[]
  }


  /**
   * Taxonomy findFirstOrThrow
   */
  export type TaxonomyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taxonomy
     */
    select?: TaxonomySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaxonomyInclude<ExtArgs> | null
    /**
     * Filter, which Taxonomy to fetch.
     */
    where?: TaxonomyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Taxonomies to fetch.
     */
    orderBy?: TaxonomyOrderByWithRelationAndSearchRelevanceInput | TaxonomyOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Taxonomies.
     */
    cursor?: TaxonomyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Taxonomies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Taxonomies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Taxonomies.
     */
    distinct?: TaxonomyScalarFieldEnum | TaxonomyScalarFieldEnum[]
  }


  /**
   * Taxonomy findMany
   */
  export type TaxonomyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taxonomy
     */
    select?: TaxonomySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaxonomyInclude<ExtArgs> | null
    /**
     * Filter, which Taxonomies to fetch.
     */
    where?: TaxonomyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Taxonomies to fetch.
     */
    orderBy?: TaxonomyOrderByWithRelationAndSearchRelevanceInput | TaxonomyOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Taxonomies.
     */
    cursor?: TaxonomyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Taxonomies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Taxonomies.
     */
    skip?: number
    distinct?: TaxonomyScalarFieldEnum | TaxonomyScalarFieldEnum[]
  }


  /**
   * Taxonomy create
   */
  export type TaxonomyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taxonomy
     */
    select?: TaxonomySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaxonomyInclude<ExtArgs> | null
    /**
     * The data needed to create a Taxonomy.
     */
    data?: XOR<TaxonomyCreateInput, TaxonomyUncheckedCreateInput>
  }


  /**
   * Taxonomy createMany
   */
  export type TaxonomyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Taxonomies.
     */
    data: TaxonomyCreateManyInput | TaxonomyCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Taxonomy update
   */
  export type TaxonomyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taxonomy
     */
    select?: TaxonomySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaxonomyInclude<ExtArgs> | null
    /**
     * The data needed to update a Taxonomy.
     */
    data: XOR<TaxonomyUpdateInput, TaxonomyUncheckedUpdateInput>
    /**
     * Choose, which Taxonomy to update.
     */
    where: TaxonomyWhereUniqueInput
  }


  /**
   * Taxonomy updateMany
   */
  export type TaxonomyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Taxonomies.
     */
    data: XOR<TaxonomyUpdateManyMutationInput, TaxonomyUncheckedUpdateManyInput>
    /**
     * Filter which Taxonomies to update
     */
    where?: TaxonomyWhereInput
  }


  /**
   * Taxonomy upsert
   */
  export type TaxonomyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taxonomy
     */
    select?: TaxonomySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaxonomyInclude<ExtArgs> | null
    /**
     * The filter to search for the Taxonomy to update in case it exists.
     */
    where: TaxonomyWhereUniqueInput
    /**
     * In case the Taxonomy found by the `where` argument doesn't exist, create a new Taxonomy with this data.
     */
    create: XOR<TaxonomyCreateInput, TaxonomyUncheckedCreateInput>
    /**
     * In case the Taxonomy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaxonomyUpdateInput, TaxonomyUncheckedUpdateInput>
  }


  /**
   * Taxonomy delete
   */
  export type TaxonomyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taxonomy
     */
    select?: TaxonomySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaxonomyInclude<ExtArgs> | null
    /**
     * Filter which Taxonomy to delete.
     */
    where: TaxonomyWhereUniqueInput
  }


  /**
   * Taxonomy deleteMany
   */
  export type TaxonomyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Taxonomies to delete
     */
    where?: TaxonomyWhereInput
  }


  /**
   * Taxonomy.plant
   */
  export type Taxonomy$plantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plants
     */
    select?: PlantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantsInclude<ExtArgs> | null
    where?: PlantsWhereInput
  }


  /**
   * Taxonomy.pest
   */
  export type Taxonomy$pestArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pests
     */
    select?: PestsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PestsInclude<ExtArgs> | null
    where?: PestsWhereInput
  }


  /**
   * Taxonomy.blight
   */
  export type Taxonomy$blightArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Blights
     */
    select?: BlightsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BlightsInclude<ExtArgs> | null
    where?: BlightsWhereInput
  }


  /**
   * Taxonomy without action
   */
  export type TaxonomyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Taxonomy
     */
    select?: TaxonomySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TaxonomyInclude<ExtArgs> | null
  }



  /**
   * Model Search
   */

  export type AggregateSearch = {
    _count: SearchCountAggregateOutputType | null
    _min: SearchMinAggregateOutputType | null
    _max: SearchMaxAggregateOutputType | null
  }

  export type SearchMinAggregateOutputType = {
    id: string | null
    common_name: string | null
    scientific_name: string | null
    decription: string | null
    img: string | null
    type: $Enums.Type | null
  }

  export type SearchMaxAggregateOutputType = {
    id: string | null
    common_name: string | null
    scientific_name: string | null
    decription: string | null
    img: string | null
    type: $Enums.Type | null
  }

  export type SearchCountAggregateOutputType = {
    id: number
    common_name: number
    scientific_name: number
    decription: number
    img: number
    type: number
    _all: number
  }


  export type SearchMinAggregateInputType = {
    id?: true
    common_name?: true
    scientific_name?: true
    decription?: true
    img?: true
    type?: true
  }

  export type SearchMaxAggregateInputType = {
    id?: true
    common_name?: true
    scientific_name?: true
    decription?: true
    img?: true
    type?: true
  }

  export type SearchCountAggregateInputType = {
    id?: true
    common_name?: true
    scientific_name?: true
    decription?: true
    img?: true
    type?: true
    _all?: true
  }

  export type SearchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Search to aggregate.
     */
    where?: SearchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Searches to fetch.
     */
    orderBy?: SearchOrderByWithRelationAndSearchRelevanceInput | SearchOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SearchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Searches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Searches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Searches
    **/
    _count?: true | SearchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SearchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SearchMaxAggregateInputType
  }

  export type GetSearchAggregateType<T extends SearchAggregateArgs> = {
        [P in keyof T & keyof AggregateSearch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSearch[P]>
      : GetScalarType<T[P], AggregateSearch[P]>
  }




  export type SearchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SearchWhereInput
    orderBy?: SearchOrderByWithAggregationInput | SearchOrderByWithAggregationInput[]
    by: SearchScalarFieldEnum[] | SearchScalarFieldEnum
    having?: SearchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SearchCountAggregateInputType | true
    _min?: SearchMinAggregateInputType
    _max?: SearchMaxAggregateInputType
  }

  export type SearchGroupByOutputType = {
    id: string
    common_name: string | null
    scientific_name: string | null
    decription: string | null
    img: string | null
    type: $Enums.Type | null
    _count: SearchCountAggregateOutputType | null
    _min: SearchMinAggregateOutputType | null
    _max: SearchMaxAggregateOutputType | null
  }

  type GetSearchGroupByPayload<T extends SearchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SearchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SearchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SearchGroupByOutputType[P]>
            : GetScalarType<T[P], SearchGroupByOutputType[P]>
        }
      >
    >


  export type SearchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    common_name?: boolean
    scientific_name?: boolean
    decription?: boolean
    img?: boolean
    type?: boolean
  }, ExtArgs["result"]["search"]>

  export type SearchSelectScalar = {
    id?: boolean
    common_name?: boolean
    scientific_name?: boolean
    decription?: boolean
    img?: boolean
    type?: boolean
  }


  export type $SearchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Search"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      common_name: string | null
      scientific_name: string | null
      decription: string | null
      img: string | null
      type: $Enums.Type | null
    }, ExtArgs["result"]["search"]>
    composites: {}
  }


  type SearchGetPayload<S extends boolean | null | undefined | SearchDefaultArgs> = $Result.GetResult<Prisma.$SearchPayload, S>

  type SearchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SearchFindManyArgs, 'select' | 'include'> & {
      select?: SearchCountAggregateInputType | true
    }

  export interface SearchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Search'], meta: { name: 'Search' } }
    /**
     * Find zero or one Search that matches the filter.
     * @param {SearchFindUniqueArgs} args - Arguments to find a Search
     * @example
     * // Get one Search
     * const search = await prisma.search.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SearchFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SearchFindUniqueArgs<ExtArgs>>
    ): Prisma__SearchClient<$Result.GetResult<Prisma.$SearchPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Search that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SearchFindUniqueOrThrowArgs} args - Arguments to find a Search
     * @example
     * // Get one Search
     * const search = await prisma.search.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SearchFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SearchFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SearchClient<$Result.GetResult<Prisma.$SearchPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Search that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SearchFindFirstArgs} args - Arguments to find a Search
     * @example
     * // Get one Search
     * const search = await prisma.search.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SearchFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SearchFindFirstArgs<ExtArgs>>
    ): Prisma__SearchClient<$Result.GetResult<Prisma.$SearchPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Search that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SearchFindFirstOrThrowArgs} args - Arguments to find a Search
     * @example
     * // Get one Search
     * const search = await prisma.search.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SearchFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SearchFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SearchClient<$Result.GetResult<Prisma.$SearchPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Searches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SearchFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Searches
     * const searches = await prisma.search.findMany()
     * 
     * // Get first 10 Searches
     * const searches = await prisma.search.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const searchWithIdOnly = await prisma.search.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SearchFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SearchFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SearchPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Search.
     * @param {SearchCreateArgs} args - Arguments to create a Search.
     * @example
     * // Create one Search
     * const Search = await prisma.search.create({
     *   data: {
     *     // ... data to create a Search
     *   }
     * })
     * 
    **/
    create<T extends SearchCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SearchCreateArgs<ExtArgs>>
    ): Prisma__SearchClient<$Result.GetResult<Prisma.$SearchPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Searches.
     *     @param {SearchCreateManyArgs} args - Arguments to create many Searches.
     *     @example
     *     // Create many Searches
     *     const search = await prisma.search.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SearchCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SearchCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Search.
     * @param {SearchDeleteArgs} args - Arguments to delete one Search.
     * @example
     * // Delete one Search
     * const Search = await prisma.search.delete({
     *   where: {
     *     // ... filter to delete one Search
     *   }
     * })
     * 
    **/
    delete<T extends SearchDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SearchDeleteArgs<ExtArgs>>
    ): Prisma__SearchClient<$Result.GetResult<Prisma.$SearchPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Search.
     * @param {SearchUpdateArgs} args - Arguments to update one Search.
     * @example
     * // Update one Search
     * const search = await prisma.search.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SearchUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SearchUpdateArgs<ExtArgs>>
    ): Prisma__SearchClient<$Result.GetResult<Prisma.$SearchPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Searches.
     * @param {SearchDeleteManyArgs} args - Arguments to filter Searches to delete.
     * @example
     * // Delete a few Searches
     * const { count } = await prisma.search.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SearchDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SearchDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Searches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SearchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Searches
     * const search = await prisma.search.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SearchUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SearchUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Search.
     * @param {SearchUpsertArgs} args - Arguments to update or create a Search.
     * @example
     * // Update or create a Search
     * const search = await prisma.search.upsert({
     *   create: {
     *     // ... data to create a Search
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Search we want to update
     *   }
     * })
    **/
    upsert<T extends SearchUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SearchUpsertArgs<ExtArgs>>
    ): Prisma__SearchClient<$Result.GetResult<Prisma.$SearchPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Searches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SearchCountArgs} args - Arguments to filter Searches to count.
     * @example
     * // Count the number of Searches
     * const count = await prisma.search.count({
     *   where: {
     *     // ... the filter for the Searches we want to count
     *   }
     * })
    **/
    count<T extends SearchCountArgs>(
      args?: Subset<T, SearchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SearchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Search.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SearchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SearchAggregateArgs>(args: Subset<T, SearchAggregateArgs>): Prisma.PrismaPromise<GetSearchAggregateType<T>>

    /**
     * Group by Search.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SearchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SearchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SearchGroupByArgs['orderBy'] }
        : { orderBy?: SearchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SearchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSearchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Search model
   */
  readonly fields: SearchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Search.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SearchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Search model
   */ 
  interface SearchFieldRefs {
    readonly id: FieldRef<"Search", 'String'>
    readonly common_name: FieldRef<"Search", 'String'>
    readonly scientific_name: FieldRef<"Search", 'String'>
    readonly decription: FieldRef<"Search", 'String'>
    readonly img: FieldRef<"Search", 'String'>
    readonly type: FieldRef<"Search", 'Type'>
  }
    

  // Custom InputTypes

  /**
   * Search findUnique
   */
  export type SearchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Search
     */
    select?: SearchSelect<ExtArgs> | null
    /**
     * Filter, which Search to fetch.
     */
    where: SearchWhereUniqueInput
  }


  /**
   * Search findUniqueOrThrow
   */
  export type SearchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Search
     */
    select?: SearchSelect<ExtArgs> | null
    /**
     * Filter, which Search to fetch.
     */
    where: SearchWhereUniqueInput
  }


  /**
   * Search findFirst
   */
  export type SearchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Search
     */
    select?: SearchSelect<ExtArgs> | null
    /**
     * Filter, which Search to fetch.
     */
    where?: SearchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Searches to fetch.
     */
    orderBy?: SearchOrderByWithRelationAndSearchRelevanceInput | SearchOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Searches.
     */
    cursor?: SearchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Searches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Searches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Searches.
     */
    distinct?: SearchScalarFieldEnum | SearchScalarFieldEnum[]
  }


  /**
   * Search findFirstOrThrow
   */
  export type SearchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Search
     */
    select?: SearchSelect<ExtArgs> | null
    /**
     * Filter, which Search to fetch.
     */
    where?: SearchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Searches to fetch.
     */
    orderBy?: SearchOrderByWithRelationAndSearchRelevanceInput | SearchOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Searches.
     */
    cursor?: SearchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Searches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Searches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Searches.
     */
    distinct?: SearchScalarFieldEnum | SearchScalarFieldEnum[]
  }


  /**
   * Search findMany
   */
  export type SearchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Search
     */
    select?: SearchSelect<ExtArgs> | null
    /**
     * Filter, which Searches to fetch.
     */
    where?: SearchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Searches to fetch.
     */
    orderBy?: SearchOrderByWithRelationAndSearchRelevanceInput | SearchOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Searches.
     */
    cursor?: SearchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Searches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Searches.
     */
    skip?: number
    distinct?: SearchScalarFieldEnum | SearchScalarFieldEnum[]
  }


  /**
   * Search create
   */
  export type SearchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Search
     */
    select?: SearchSelect<ExtArgs> | null
    /**
     * The data needed to create a Search.
     */
    data?: XOR<SearchCreateInput, SearchUncheckedCreateInput>
  }


  /**
   * Search createMany
   */
  export type SearchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Searches.
     */
    data: SearchCreateManyInput | SearchCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Search update
   */
  export type SearchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Search
     */
    select?: SearchSelect<ExtArgs> | null
    /**
     * The data needed to update a Search.
     */
    data: XOR<SearchUpdateInput, SearchUncheckedUpdateInput>
    /**
     * Choose, which Search to update.
     */
    where: SearchWhereUniqueInput
  }


  /**
   * Search updateMany
   */
  export type SearchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Searches.
     */
    data: XOR<SearchUpdateManyMutationInput, SearchUncheckedUpdateManyInput>
    /**
     * Filter which Searches to update
     */
    where?: SearchWhereInput
  }


  /**
   * Search upsert
   */
  export type SearchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Search
     */
    select?: SearchSelect<ExtArgs> | null
    /**
     * The filter to search for the Search to update in case it exists.
     */
    where: SearchWhereUniqueInput
    /**
     * In case the Search found by the `where` argument doesn't exist, create a new Search with this data.
     */
    create: XOR<SearchCreateInput, SearchUncheckedCreateInput>
    /**
     * In case the Search was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SearchUpdateInput, SearchUncheckedUpdateInput>
  }


  /**
   * Search delete
   */
  export type SearchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Search
     */
    select?: SearchSelect<ExtArgs> | null
    /**
     * Filter which Search to delete.
     */
    where: SearchWhereUniqueInput
  }


  /**
   * Search deleteMany
   */
  export type SearchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Searches to delete
     */
    where?: SearchWhereInput
  }


  /**
   * Search without action
   */
  export type SearchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Search
     */
    select?: SearchSelect<ExtArgs> | null
  }



  /**
   * Model PlantOfDay
   */

  export type AggregatePlantOfDay = {
    _count: PlantOfDayCountAggregateOutputType | null
    _min: PlantOfDayMinAggregateOutputType | null
    _max: PlantOfDayMaxAggregateOutputType | null
  }

  export type PlantOfDayMinAggregateOutputType = {
    id: string | null
    plantsId: string | null
  }

  export type PlantOfDayMaxAggregateOutputType = {
    id: string | null
    plantsId: string | null
  }

  export type PlantOfDayCountAggregateOutputType = {
    id: number
    plantsId: number
    _all: number
  }


  export type PlantOfDayMinAggregateInputType = {
    id?: true
    plantsId?: true
  }

  export type PlantOfDayMaxAggregateInputType = {
    id?: true
    plantsId?: true
  }

  export type PlantOfDayCountAggregateInputType = {
    id?: true
    plantsId?: true
    _all?: true
  }

  export type PlantOfDayAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlantOfDay to aggregate.
     */
    where?: PlantOfDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantOfDays to fetch.
     */
    orderBy?: PlantOfDayOrderByWithRelationAndSearchRelevanceInput | PlantOfDayOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlantOfDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantOfDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantOfDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlantOfDays
    **/
    _count?: true | PlantOfDayCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlantOfDayMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlantOfDayMaxAggregateInputType
  }

  export type GetPlantOfDayAggregateType<T extends PlantOfDayAggregateArgs> = {
        [P in keyof T & keyof AggregatePlantOfDay]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlantOfDay[P]>
      : GetScalarType<T[P], AggregatePlantOfDay[P]>
  }




  export type PlantOfDayGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlantOfDayWhereInput
    orderBy?: PlantOfDayOrderByWithAggregationInput | PlantOfDayOrderByWithAggregationInput[]
    by: PlantOfDayScalarFieldEnum[] | PlantOfDayScalarFieldEnum
    having?: PlantOfDayScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlantOfDayCountAggregateInputType | true
    _min?: PlantOfDayMinAggregateInputType
    _max?: PlantOfDayMaxAggregateInputType
  }

  export type PlantOfDayGroupByOutputType = {
    id: string
    plantsId: string
    _count: PlantOfDayCountAggregateOutputType | null
    _min: PlantOfDayMinAggregateOutputType | null
    _max: PlantOfDayMaxAggregateOutputType | null
  }

  type GetPlantOfDayGroupByPayload<T extends PlantOfDayGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlantOfDayGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlantOfDayGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlantOfDayGroupByOutputType[P]>
            : GetScalarType<T[P], PlantOfDayGroupByOutputType[P]>
        }
      >
    >


  export type PlantOfDaySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    plantsId?: boolean
    plant?: boolean | PlantsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plantOfDay"]>

  export type PlantOfDaySelectScalar = {
    id?: boolean
    plantsId?: boolean
  }

  export type PlantOfDayInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plant?: boolean | PlantsDefaultArgs<ExtArgs>
  }


  export type $PlantOfDayPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlantOfDay"
    objects: {
      plant: Prisma.$PlantsPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      plantsId: string
    }, ExtArgs["result"]["plantOfDay"]>
    composites: {}
  }


  type PlantOfDayGetPayload<S extends boolean | null | undefined | PlantOfDayDefaultArgs> = $Result.GetResult<Prisma.$PlantOfDayPayload, S>

  type PlantOfDayCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlantOfDayFindManyArgs, 'select' | 'include'> & {
      select?: PlantOfDayCountAggregateInputType | true
    }

  export interface PlantOfDayDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlantOfDay'], meta: { name: 'PlantOfDay' } }
    /**
     * Find zero or one PlantOfDay that matches the filter.
     * @param {PlantOfDayFindUniqueArgs} args - Arguments to find a PlantOfDay
     * @example
     * // Get one PlantOfDay
     * const plantOfDay = await prisma.plantOfDay.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlantOfDayFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PlantOfDayFindUniqueArgs<ExtArgs>>
    ): Prisma__PlantOfDayClient<$Result.GetResult<Prisma.$PlantOfDayPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PlantOfDay that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PlantOfDayFindUniqueOrThrowArgs} args - Arguments to find a PlantOfDay
     * @example
     * // Get one PlantOfDay
     * const plantOfDay = await prisma.plantOfDay.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlantOfDayFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlantOfDayFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PlantOfDayClient<$Result.GetResult<Prisma.$PlantOfDayPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PlantOfDay that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantOfDayFindFirstArgs} args - Arguments to find a PlantOfDay
     * @example
     * // Get one PlantOfDay
     * const plantOfDay = await prisma.plantOfDay.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlantOfDayFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PlantOfDayFindFirstArgs<ExtArgs>>
    ): Prisma__PlantOfDayClient<$Result.GetResult<Prisma.$PlantOfDayPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PlantOfDay that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantOfDayFindFirstOrThrowArgs} args - Arguments to find a PlantOfDay
     * @example
     * // Get one PlantOfDay
     * const plantOfDay = await prisma.plantOfDay.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlantOfDayFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlantOfDayFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PlantOfDayClient<$Result.GetResult<Prisma.$PlantOfDayPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PlantOfDays that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantOfDayFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlantOfDays
     * const plantOfDays = await prisma.plantOfDay.findMany()
     * 
     * // Get first 10 PlantOfDays
     * const plantOfDays = await prisma.plantOfDay.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const plantOfDayWithIdOnly = await prisma.plantOfDay.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlantOfDayFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlantOfDayFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantOfDayPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PlantOfDay.
     * @param {PlantOfDayCreateArgs} args - Arguments to create a PlantOfDay.
     * @example
     * // Create one PlantOfDay
     * const PlantOfDay = await prisma.plantOfDay.create({
     *   data: {
     *     // ... data to create a PlantOfDay
     *   }
     * })
     * 
    **/
    create<T extends PlantOfDayCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PlantOfDayCreateArgs<ExtArgs>>
    ): Prisma__PlantOfDayClient<$Result.GetResult<Prisma.$PlantOfDayPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PlantOfDays.
     *     @param {PlantOfDayCreateManyArgs} args - Arguments to create many PlantOfDays.
     *     @example
     *     // Create many PlantOfDays
     *     const plantOfDay = await prisma.plantOfDay.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PlantOfDayCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlantOfDayCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PlantOfDay.
     * @param {PlantOfDayDeleteArgs} args - Arguments to delete one PlantOfDay.
     * @example
     * // Delete one PlantOfDay
     * const PlantOfDay = await prisma.plantOfDay.delete({
     *   where: {
     *     // ... filter to delete one PlantOfDay
     *   }
     * })
     * 
    **/
    delete<T extends PlantOfDayDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PlantOfDayDeleteArgs<ExtArgs>>
    ): Prisma__PlantOfDayClient<$Result.GetResult<Prisma.$PlantOfDayPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PlantOfDay.
     * @param {PlantOfDayUpdateArgs} args - Arguments to update one PlantOfDay.
     * @example
     * // Update one PlantOfDay
     * const plantOfDay = await prisma.plantOfDay.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlantOfDayUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PlantOfDayUpdateArgs<ExtArgs>>
    ): Prisma__PlantOfDayClient<$Result.GetResult<Prisma.$PlantOfDayPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PlantOfDays.
     * @param {PlantOfDayDeleteManyArgs} args - Arguments to filter PlantOfDays to delete.
     * @example
     * // Delete a few PlantOfDays
     * const { count } = await prisma.plantOfDay.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlantOfDayDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlantOfDayDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlantOfDays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantOfDayUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlantOfDays
     * const plantOfDay = await prisma.plantOfDay.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlantOfDayUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PlantOfDayUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlantOfDay.
     * @param {PlantOfDayUpsertArgs} args - Arguments to update or create a PlantOfDay.
     * @example
     * // Update or create a PlantOfDay
     * const plantOfDay = await prisma.plantOfDay.upsert({
     *   create: {
     *     // ... data to create a PlantOfDay
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlantOfDay we want to update
     *   }
     * })
    **/
    upsert<T extends PlantOfDayUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PlantOfDayUpsertArgs<ExtArgs>>
    ): Prisma__PlantOfDayClient<$Result.GetResult<Prisma.$PlantOfDayPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PlantOfDays.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantOfDayCountArgs} args - Arguments to filter PlantOfDays to count.
     * @example
     * // Count the number of PlantOfDays
     * const count = await prisma.plantOfDay.count({
     *   where: {
     *     // ... the filter for the PlantOfDays we want to count
     *   }
     * })
    **/
    count<T extends PlantOfDayCountArgs>(
      args?: Subset<T, PlantOfDayCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlantOfDayCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlantOfDay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantOfDayAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlantOfDayAggregateArgs>(args: Subset<T, PlantOfDayAggregateArgs>): Prisma.PrismaPromise<GetPlantOfDayAggregateType<T>>

    /**
     * Group by PlantOfDay.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlantOfDayGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlantOfDayGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlantOfDayGroupByArgs['orderBy'] }
        : { orderBy?: PlantOfDayGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlantOfDayGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlantOfDayGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlantOfDay model
   */
  readonly fields: PlantOfDayFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlantOfDay.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlantOfDayClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    plant<T extends PlantsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlantsDefaultArgs<ExtArgs>>): Prisma__PlantsClient<$Result.GetResult<Prisma.$PlantsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PlantOfDay model
   */ 
  interface PlantOfDayFieldRefs {
    readonly id: FieldRef<"PlantOfDay", 'String'>
    readonly plantsId: FieldRef<"PlantOfDay", 'String'>
  }
    

  // Custom InputTypes

  /**
   * PlantOfDay findUnique
   */
  export type PlantOfDayFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantOfDay
     */
    select?: PlantOfDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantOfDayInclude<ExtArgs> | null
    /**
     * Filter, which PlantOfDay to fetch.
     */
    where: PlantOfDayWhereUniqueInput
  }


  /**
   * PlantOfDay findUniqueOrThrow
   */
  export type PlantOfDayFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantOfDay
     */
    select?: PlantOfDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantOfDayInclude<ExtArgs> | null
    /**
     * Filter, which PlantOfDay to fetch.
     */
    where: PlantOfDayWhereUniqueInput
  }


  /**
   * PlantOfDay findFirst
   */
  export type PlantOfDayFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantOfDay
     */
    select?: PlantOfDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantOfDayInclude<ExtArgs> | null
    /**
     * Filter, which PlantOfDay to fetch.
     */
    where?: PlantOfDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantOfDays to fetch.
     */
    orderBy?: PlantOfDayOrderByWithRelationAndSearchRelevanceInput | PlantOfDayOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlantOfDays.
     */
    cursor?: PlantOfDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantOfDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantOfDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlantOfDays.
     */
    distinct?: PlantOfDayScalarFieldEnum | PlantOfDayScalarFieldEnum[]
  }


  /**
   * PlantOfDay findFirstOrThrow
   */
  export type PlantOfDayFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantOfDay
     */
    select?: PlantOfDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantOfDayInclude<ExtArgs> | null
    /**
     * Filter, which PlantOfDay to fetch.
     */
    where?: PlantOfDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantOfDays to fetch.
     */
    orderBy?: PlantOfDayOrderByWithRelationAndSearchRelevanceInput | PlantOfDayOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlantOfDays.
     */
    cursor?: PlantOfDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantOfDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantOfDays.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlantOfDays.
     */
    distinct?: PlantOfDayScalarFieldEnum | PlantOfDayScalarFieldEnum[]
  }


  /**
   * PlantOfDay findMany
   */
  export type PlantOfDayFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantOfDay
     */
    select?: PlantOfDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantOfDayInclude<ExtArgs> | null
    /**
     * Filter, which PlantOfDays to fetch.
     */
    where?: PlantOfDayWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlantOfDays to fetch.
     */
    orderBy?: PlantOfDayOrderByWithRelationAndSearchRelevanceInput | PlantOfDayOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlantOfDays.
     */
    cursor?: PlantOfDayWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlantOfDays from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlantOfDays.
     */
    skip?: number
    distinct?: PlantOfDayScalarFieldEnum | PlantOfDayScalarFieldEnum[]
  }


  /**
   * PlantOfDay create
   */
  export type PlantOfDayCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantOfDay
     */
    select?: PlantOfDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantOfDayInclude<ExtArgs> | null
    /**
     * The data needed to create a PlantOfDay.
     */
    data: XOR<PlantOfDayCreateInput, PlantOfDayUncheckedCreateInput>
  }


  /**
   * PlantOfDay createMany
   */
  export type PlantOfDayCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PlantOfDays.
     */
    data: PlantOfDayCreateManyInput | PlantOfDayCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * PlantOfDay update
   */
  export type PlantOfDayUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantOfDay
     */
    select?: PlantOfDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantOfDayInclude<ExtArgs> | null
    /**
     * The data needed to update a PlantOfDay.
     */
    data: XOR<PlantOfDayUpdateInput, PlantOfDayUncheckedUpdateInput>
    /**
     * Choose, which PlantOfDay to update.
     */
    where: PlantOfDayWhereUniqueInput
  }


  /**
   * PlantOfDay updateMany
   */
  export type PlantOfDayUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlantOfDays.
     */
    data: XOR<PlantOfDayUpdateManyMutationInput, PlantOfDayUncheckedUpdateManyInput>
    /**
     * Filter which PlantOfDays to update
     */
    where?: PlantOfDayWhereInput
  }


  /**
   * PlantOfDay upsert
   */
  export type PlantOfDayUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantOfDay
     */
    select?: PlantOfDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantOfDayInclude<ExtArgs> | null
    /**
     * The filter to search for the PlantOfDay to update in case it exists.
     */
    where: PlantOfDayWhereUniqueInput
    /**
     * In case the PlantOfDay found by the `where` argument doesn't exist, create a new PlantOfDay with this data.
     */
    create: XOR<PlantOfDayCreateInput, PlantOfDayUncheckedCreateInput>
    /**
     * In case the PlantOfDay was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlantOfDayUpdateInput, PlantOfDayUncheckedUpdateInput>
  }


  /**
   * PlantOfDay delete
   */
  export type PlantOfDayDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantOfDay
     */
    select?: PlantOfDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantOfDayInclude<ExtArgs> | null
    /**
     * Filter which PlantOfDay to delete.
     */
    where: PlantOfDayWhereUniqueInput
  }


  /**
   * PlantOfDay deleteMany
   */
  export type PlantOfDayDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlantOfDays to delete
     */
    where?: PlantOfDayWhereInput
  }


  /**
   * PlantOfDay without action
   */
  export type PlantOfDayDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlantOfDay
     */
    select?: PlantOfDaySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantOfDayInclude<ExtArgs> | null
  }



  /**
   * Model Views
   */

  export type AggregateViews = {
    _count: ViewsCountAggregateOutputType | null
    _avg: ViewsAvgAggregateOutputType | null
    _sum: ViewsSumAggregateOutputType | null
    _min: ViewsMinAggregateOutputType | null
    _max: ViewsMaxAggregateOutputType | null
  }

  export type ViewsAvgAggregateOutputType = {
    id: number | null
  }

  export type ViewsSumAggregateOutputType = {
    id: number | null
  }

  export type ViewsMinAggregateOutputType = {
    id: number | null
    time: Date | null
  }

  export type ViewsMaxAggregateOutputType = {
    id: number | null
    time: Date | null
  }

  export type ViewsCountAggregateOutputType = {
    id: number
    time: number
    _all: number
  }


  export type ViewsAvgAggregateInputType = {
    id?: true
  }

  export type ViewsSumAggregateInputType = {
    id?: true
  }

  export type ViewsMinAggregateInputType = {
    id?: true
    time?: true
  }

  export type ViewsMaxAggregateInputType = {
    id?: true
    time?: true
  }

  export type ViewsCountAggregateInputType = {
    id?: true
    time?: true
    _all?: true
  }

  export type ViewsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Views to aggregate.
     */
    where?: ViewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Views to fetch.
     */
    orderBy?: ViewsOrderByWithRelationAndSearchRelevanceInput | ViewsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ViewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Views from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Views.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Views
    **/
    _count?: true | ViewsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ViewsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ViewsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ViewsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ViewsMaxAggregateInputType
  }

  export type GetViewsAggregateType<T extends ViewsAggregateArgs> = {
        [P in keyof T & keyof AggregateViews]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateViews[P]>
      : GetScalarType<T[P], AggregateViews[P]>
  }




  export type ViewsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ViewsWhereInput
    orderBy?: ViewsOrderByWithAggregationInput | ViewsOrderByWithAggregationInput[]
    by: ViewsScalarFieldEnum[] | ViewsScalarFieldEnum
    having?: ViewsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ViewsCountAggregateInputType | true
    _avg?: ViewsAvgAggregateInputType
    _sum?: ViewsSumAggregateInputType
    _min?: ViewsMinAggregateInputType
    _max?: ViewsMaxAggregateInputType
  }

  export type ViewsGroupByOutputType = {
    id: number
    time: Date | null
    _count: ViewsCountAggregateOutputType | null
    _avg: ViewsAvgAggregateOutputType | null
    _sum: ViewsSumAggregateOutputType | null
    _min: ViewsMinAggregateOutputType | null
    _max: ViewsMaxAggregateOutputType | null
  }

  type GetViewsGroupByPayload<T extends ViewsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ViewsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ViewsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ViewsGroupByOutputType[P]>
            : GetScalarType<T[P], ViewsGroupByOutputType[P]>
        }
      >
    >


  export type ViewsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    time?: boolean
    plant?: boolean | Views$plantArgs<ExtArgs>
    _count?: boolean | ViewsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["views"]>

  export type ViewsSelectScalar = {
    id?: boolean
    time?: boolean
  }

  export type ViewsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plant?: boolean | Views$plantArgs<ExtArgs>
    _count?: boolean | ViewsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ViewsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Views"
    objects: {
      plant: Prisma.$PlantsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      time: Date | null
    }, ExtArgs["result"]["views"]>
    composites: {}
  }


  type ViewsGetPayload<S extends boolean | null | undefined | ViewsDefaultArgs> = $Result.GetResult<Prisma.$ViewsPayload, S>

  type ViewsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ViewsFindManyArgs, 'select' | 'include'> & {
      select?: ViewsCountAggregateInputType | true
    }

  export interface ViewsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Views'], meta: { name: 'Views' } }
    /**
     * Find zero or one Views that matches the filter.
     * @param {ViewsFindUniqueArgs} args - Arguments to find a Views
     * @example
     * // Get one Views
     * const views = await prisma.views.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ViewsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ViewsFindUniqueArgs<ExtArgs>>
    ): Prisma__ViewsClient<$Result.GetResult<Prisma.$ViewsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Views that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ViewsFindUniqueOrThrowArgs} args - Arguments to find a Views
     * @example
     * // Get one Views
     * const views = await prisma.views.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ViewsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ViewsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ViewsClient<$Result.GetResult<Prisma.$ViewsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Views that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViewsFindFirstArgs} args - Arguments to find a Views
     * @example
     * // Get one Views
     * const views = await prisma.views.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ViewsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ViewsFindFirstArgs<ExtArgs>>
    ): Prisma__ViewsClient<$Result.GetResult<Prisma.$ViewsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Views that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViewsFindFirstOrThrowArgs} args - Arguments to find a Views
     * @example
     * // Get one Views
     * const views = await prisma.views.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ViewsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ViewsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ViewsClient<$Result.GetResult<Prisma.$ViewsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Views that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViewsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Views
     * const views = await prisma.views.findMany()
     * 
     * // Get first 10 Views
     * const views = await prisma.views.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const viewsWithIdOnly = await prisma.views.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ViewsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ViewsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ViewsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Views.
     * @param {ViewsCreateArgs} args - Arguments to create a Views.
     * @example
     * // Create one Views
     * const Views = await prisma.views.create({
     *   data: {
     *     // ... data to create a Views
     *   }
     * })
     * 
    **/
    create<T extends ViewsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ViewsCreateArgs<ExtArgs>>
    ): Prisma__ViewsClient<$Result.GetResult<Prisma.$ViewsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Views.
     *     @param {ViewsCreateManyArgs} args - Arguments to create many Views.
     *     @example
     *     // Create many Views
     *     const views = await prisma.views.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ViewsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ViewsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Views.
     * @param {ViewsDeleteArgs} args - Arguments to delete one Views.
     * @example
     * // Delete one Views
     * const Views = await prisma.views.delete({
     *   where: {
     *     // ... filter to delete one Views
     *   }
     * })
     * 
    **/
    delete<T extends ViewsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ViewsDeleteArgs<ExtArgs>>
    ): Prisma__ViewsClient<$Result.GetResult<Prisma.$ViewsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Views.
     * @param {ViewsUpdateArgs} args - Arguments to update one Views.
     * @example
     * // Update one Views
     * const views = await prisma.views.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ViewsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ViewsUpdateArgs<ExtArgs>>
    ): Prisma__ViewsClient<$Result.GetResult<Prisma.$ViewsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Views.
     * @param {ViewsDeleteManyArgs} args - Arguments to filter Views to delete.
     * @example
     * // Delete a few Views
     * const { count } = await prisma.views.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ViewsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ViewsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Views.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViewsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Views
     * const views = await prisma.views.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ViewsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ViewsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Views.
     * @param {ViewsUpsertArgs} args - Arguments to update or create a Views.
     * @example
     * // Update or create a Views
     * const views = await prisma.views.upsert({
     *   create: {
     *     // ... data to create a Views
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Views we want to update
     *   }
     * })
    **/
    upsert<T extends ViewsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ViewsUpsertArgs<ExtArgs>>
    ): Prisma__ViewsClient<$Result.GetResult<Prisma.$ViewsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Views.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViewsCountArgs} args - Arguments to filter Views to count.
     * @example
     * // Count the number of Views
     * const count = await prisma.views.count({
     *   where: {
     *     // ... the filter for the Views we want to count
     *   }
     * })
    **/
    count<T extends ViewsCountArgs>(
      args?: Subset<T, ViewsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ViewsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Views.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViewsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ViewsAggregateArgs>(args: Subset<T, ViewsAggregateArgs>): Prisma.PrismaPromise<GetViewsAggregateType<T>>

    /**
     * Group by Views.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ViewsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ViewsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ViewsGroupByArgs['orderBy'] }
        : { orderBy?: ViewsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ViewsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetViewsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Views model
   */
  readonly fields: ViewsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Views.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ViewsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    plant<T extends Views$plantArgs<ExtArgs> = {}>(args?: Subset<T, Views$plantArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlantsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Views model
   */ 
  interface ViewsFieldRefs {
    readonly id: FieldRef<"Views", 'Int'>
    readonly time: FieldRef<"Views", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Views findUnique
   */
  export type ViewsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Views
     */
    select?: ViewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ViewsInclude<ExtArgs> | null
    /**
     * Filter, which Views to fetch.
     */
    where: ViewsWhereUniqueInput
  }


  /**
   * Views findUniqueOrThrow
   */
  export type ViewsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Views
     */
    select?: ViewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ViewsInclude<ExtArgs> | null
    /**
     * Filter, which Views to fetch.
     */
    where: ViewsWhereUniqueInput
  }


  /**
   * Views findFirst
   */
  export type ViewsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Views
     */
    select?: ViewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ViewsInclude<ExtArgs> | null
    /**
     * Filter, which Views to fetch.
     */
    where?: ViewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Views to fetch.
     */
    orderBy?: ViewsOrderByWithRelationAndSearchRelevanceInput | ViewsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Views.
     */
    cursor?: ViewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Views from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Views.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Views.
     */
    distinct?: ViewsScalarFieldEnum | ViewsScalarFieldEnum[]
  }


  /**
   * Views findFirstOrThrow
   */
  export type ViewsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Views
     */
    select?: ViewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ViewsInclude<ExtArgs> | null
    /**
     * Filter, which Views to fetch.
     */
    where?: ViewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Views to fetch.
     */
    orderBy?: ViewsOrderByWithRelationAndSearchRelevanceInput | ViewsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Views.
     */
    cursor?: ViewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Views from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Views.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Views.
     */
    distinct?: ViewsScalarFieldEnum | ViewsScalarFieldEnum[]
  }


  /**
   * Views findMany
   */
  export type ViewsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Views
     */
    select?: ViewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ViewsInclude<ExtArgs> | null
    /**
     * Filter, which Views to fetch.
     */
    where?: ViewsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Views to fetch.
     */
    orderBy?: ViewsOrderByWithRelationAndSearchRelevanceInput | ViewsOrderByWithRelationAndSearchRelevanceInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Views.
     */
    cursor?: ViewsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Views from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Views.
     */
    skip?: number
    distinct?: ViewsScalarFieldEnum | ViewsScalarFieldEnum[]
  }


  /**
   * Views create
   */
  export type ViewsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Views
     */
    select?: ViewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ViewsInclude<ExtArgs> | null
    /**
     * The data needed to create a Views.
     */
    data: XOR<ViewsCreateInput, ViewsUncheckedCreateInput>
  }


  /**
   * Views createMany
   */
  export type ViewsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Views.
     */
    data: ViewsCreateManyInput | ViewsCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Views update
   */
  export type ViewsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Views
     */
    select?: ViewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ViewsInclude<ExtArgs> | null
    /**
     * The data needed to update a Views.
     */
    data: XOR<ViewsUpdateInput, ViewsUncheckedUpdateInput>
    /**
     * Choose, which Views to update.
     */
    where: ViewsWhereUniqueInput
  }


  /**
   * Views updateMany
   */
  export type ViewsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Views.
     */
    data: XOR<ViewsUpdateManyMutationInput, ViewsUncheckedUpdateManyInput>
    /**
     * Filter which Views to update
     */
    where?: ViewsWhereInput
  }


  /**
   * Views upsert
   */
  export type ViewsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Views
     */
    select?: ViewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ViewsInclude<ExtArgs> | null
    /**
     * The filter to search for the Views to update in case it exists.
     */
    where: ViewsWhereUniqueInput
    /**
     * In case the Views found by the `where` argument doesn't exist, create a new Views with this data.
     */
    create: XOR<ViewsCreateInput, ViewsUncheckedCreateInput>
    /**
     * In case the Views was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ViewsUpdateInput, ViewsUncheckedUpdateInput>
  }


  /**
   * Views delete
   */
  export type ViewsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Views
     */
    select?: ViewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ViewsInclude<ExtArgs> | null
    /**
     * Filter which Views to delete.
     */
    where: ViewsWhereUniqueInput
  }


  /**
   * Views deleteMany
   */
  export type ViewsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Views to delete
     */
    where?: ViewsWhereInput
  }


  /**
   * Views.plant
   */
  export type Views$plantArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plants
     */
    select?: PlantsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlantsInclude<ExtArgs> | null
    where?: PlantsWhereInput
    orderBy?: PlantsOrderByWithRelationAndSearchRelevanceInput | PlantsOrderByWithRelationAndSearchRelevanceInput[]
    cursor?: PlantsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlantsScalarFieldEnum | PlantsScalarFieldEnum[]
  }


  /**
   * Views without action
   */
  export type ViewsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Views
     */
    select?: ViewsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ViewsInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PlantsScalarFieldEnum: {
    id: 'id',
    common_name: 'common_name',
    scientific_name: 'scientific_name',
    synonyms: 'synonyms',
    description: 'description',
    min_h: 'min_h',
    max_h: 'max_h',
    min_ph: 'min_ph',
    max_ph: 'max_ph',
    min_temp: 'min_temp',
    max_temp: 'max_temp',
    water: 'water',
    habit: 'habit',
    wikipedia: 'wikipedia',
    britannica: 'britannica',
    img: 'img',
    imgs: 'imgs',
    taxonomyId: 'taxonomyId',
    viewsId: 'viewsId'
  };

  export type PlantsScalarFieldEnum = (typeof PlantsScalarFieldEnum)[keyof typeof PlantsScalarFieldEnum]


  export const PestsScalarFieldEnum: {
    id: 'id',
    common_name: 'common_name',
    synonyms: 'synonyms',
    scientific_name: 'scientific_name',
    description: 'description',
    wikipedia: 'wikipedia',
    britannica: 'britannica',
    img: 'img',
    imgs: 'imgs',
    taxonomyId: 'taxonomyId'
  };

  export type PestsScalarFieldEnum = (typeof PestsScalarFieldEnum)[keyof typeof PestsScalarFieldEnum]


  export const BlightsScalarFieldEnum: {
    id: 'id',
    common_name: 'common_name',
    synonyms: 'synonyms',
    scientific_name: 'scientific_name',
    description: 'description',
    wikipedia: 'wikipedia',
    britannica: 'britannica',
    img: 'img',
    imgs: 'imgs',
    taxonomyId: 'taxonomyId'
  };

  export type BlightsScalarFieldEnum = (typeof BlightsScalarFieldEnum)[keyof typeof BlightsScalarFieldEnum]


  export const PestisidesScalarFieldEnum: {
    id: 'id',
    common_name: 'common_name',
    synonyms: 'synonyms',
    scientific_name: 'scientific_name',
    description: 'description',
    wikipedia: 'wikipedia',
    britannica: 'britannica',
    img: 'img'
  };

  export type PestisidesScalarFieldEnum = (typeof PestisidesScalarFieldEnum)[keyof typeof PestisidesScalarFieldEnum]


  export const TaxonomyScalarFieldEnum: {
    id: 'id',
    kingdom: 'kingdom',
    phylum: 'phylum',
    class: 'class',
    order: 'order',
    family: 'family',
    genus: 'genus',
    species: 'species'
  };

  export type TaxonomyScalarFieldEnum = (typeof TaxonomyScalarFieldEnum)[keyof typeof TaxonomyScalarFieldEnum]


  export const SearchScalarFieldEnum: {
    id: 'id',
    common_name: 'common_name',
    scientific_name: 'scientific_name',
    decription: 'decription',
    img: 'img',
    type: 'type'
  };

  export type SearchScalarFieldEnum = (typeof SearchScalarFieldEnum)[keyof typeof SearchScalarFieldEnum]


  export const PlantOfDayScalarFieldEnum: {
    id: 'id',
    plantsId: 'plantsId'
  };

  export type PlantOfDayScalarFieldEnum = (typeof PlantOfDayScalarFieldEnum)[keyof typeof PlantOfDayScalarFieldEnum]


  export const ViewsScalarFieldEnum: {
    id: 'id',
    time: 'time'
  };

  export type ViewsScalarFieldEnum = (typeof ViewsScalarFieldEnum)[keyof typeof ViewsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const PlantsOrderByRelevanceFieldEnum: {
    id: 'id',
    common_name: 'common_name',
    scientific_name: 'scientific_name',
    synonyms: 'synonyms',
    description: 'description',
    habit: 'habit',
    wikipedia: 'wikipedia',
    britannica: 'britannica',
    img: 'img',
    imgs: 'imgs',
    taxonomyId: 'taxonomyId'
  };

  export type PlantsOrderByRelevanceFieldEnum = (typeof PlantsOrderByRelevanceFieldEnum)[keyof typeof PlantsOrderByRelevanceFieldEnum]


  export const PestsOrderByRelevanceFieldEnum: {
    id: 'id',
    common_name: 'common_name',
    synonyms: 'synonyms',
    scientific_name: 'scientific_name',
    description: 'description',
    wikipedia: 'wikipedia',
    britannica: 'britannica',
    img: 'img',
    imgs: 'imgs',
    taxonomyId: 'taxonomyId'
  };

  export type PestsOrderByRelevanceFieldEnum = (typeof PestsOrderByRelevanceFieldEnum)[keyof typeof PestsOrderByRelevanceFieldEnum]


  export const BlightsOrderByRelevanceFieldEnum: {
    id: 'id',
    common_name: 'common_name',
    synonyms: 'synonyms',
    scientific_name: 'scientific_name',
    description: 'description',
    wikipedia: 'wikipedia',
    britannica: 'britannica',
    img: 'img',
    imgs: 'imgs',
    taxonomyId: 'taxonomyId'
  };

  export type BlightsOrderByRelevanceFieldEnum = (typeof BlightsOrderByRelevanceFieldEnum)[keyof typeof BlightsOrderByRelevanceFieldEnum]


  export const PestisidesOrderByRelevanceFieldEnum: {
    id: 'id',
    common_name: 'common_name',
    synonyms: 'synonyms',
    scientific_name: 'scientific_name',
    description: 'description',
    wikipedia: 'wikipedia',
    britannica: 'britannica',
    img: 'img'
  };

  export type PestisidesOrderByRelevanceFieldEnum = (typeof PestisidesOrderByRelevanceFieldEnum)[keyof typeof PestisidesOrderByRelevanceFieldEnum]


  export const TaxonomyOrderByRelevanceFieldEnum: {
    id: 'id',
    kingdom: 'kingdom',
    phylum: 'phylum',
    class: 'class',
    order: 'order',
    family: 'family',
    genus: 'genus',
    species: 'species'
  };

  export type TaxonomyOrderByRelevanceFieldEnum = (typeof TaxonomyOrderByRelevanceFieldEnum)[keyof typeof TaxonomyOrderByRelevanceFieldEnum]


  export const SearchOrderByRelevanceFieldEnum: {
    id: 'id',
    common_name: 'common_name',
    scientific_name: 'scientific_name',
    decription: 'decription',
    img: 'img'
  };

  export type SearchOrderByRelevanceFieldEnum = (typeof SearchOrderByRelevanceFieldEnum)[keyof typeof SearchOrderByRelevanceFieldEnum]


  export const PlantOfDayOrderByRelevanceFieldEnum: {
    id: 'id',
    plantsId: 'plantsId'
  };

  export type PlantOfDayOrderByRelevanceFieldEnum = (typeof PlantOfDayOrderByRelevanceFieldEnum)[keyof typeof PlantOfDayOrderByRelevanceFieldEnum]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Level'
   */
  export type EnumLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Level'>
    


  /**
   * Reference to a field of type 'Level[]'
   */
  export type ListEnumLevelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Level[]'>
    


  /**
   * Reference to a field of type 'Type'
   */
  export type EnumTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Type'>
    


  /**
   * Reference to a field of type 'Type[]'
   */
  export type ListEnumTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Type[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    
  /**
   * Deep Input Types
   */


  export type PlantsWhereInput = {
    AND?: PlantsWhereInput | PlantsWhereInput[]
    OR?: PlantsWhereInput[]
    NOT?: PlantsWhereInput | PlantsWhereInput[]
    id?: StringFilter<"Plants"> | string
    common_name?: StringFilter<"Plants"> | string
    scientific_name?: StringFilter<"Plants"> | string
    synonyms?: StringNullableListFilter<"Plants">
    description?: StringNullableFilter<"Plants"> | string | null
    min_h?: IntNullableFilter<"Plants"> | number | null
    max_h?: IntNullableFilter<"Plants"> | number | null
    min_ph?: FloatNullableFilter<"Plants"> | number | null
    max_ph?: FloatNullableFilter<"Plants"> | number | null
    min_temp?: IntNullableFilter<"Plants"> | number | null
    max_temp?: IntNullableFilter<"Plants"> | number | null
    water?: EnumLevelNullableFilter<"Plants"> | $Enums.Level | null
    habit?: StringNullableFilter<"Plants"> | string | null
    wikipedia?: StringNullableFilter<"Plants"> | string | null
    britannica?: StringNullableFilter<"Plants"> | string | null
    img?: StringNullableFilter<"Plants"> | string | null
    imgs?: StringNullableListFilter<"Plants">
    taxonomyId?: StringFilter<"Plants"> | string
    viewsId?: IntNullableFilter<"Plants"> | number | null
    taxonomy?: XOR<TaxonomyRelationFilter, TaxonomyWhereInput>
    pests?: PestsListRelationFilter
    blights?: BlightsListRelationFilter
    PlantOfDay?: XOR<PlantOfDayNullableRelationFilter, PlantOfDayWhereInput> | null
    Views?: XOR<ViewsNullableRelationFilter, ViewsWhereInput> | null
  }

  export type PlantsOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    common_name?: SortOrder
    scientific_name?: SortOrder
    synonyms?: SortOrder
    description?: SortOrderInput | SortOrder
    min_h?: SortOrderInput | SortOrder
    max_h?: SortOrderInput | SortOrder
    min_ph?: SortOrderInput | SortOrder
    max_ph?: SortOrderInput | SortOrder
    min_temp?: SortOrderInput | SortOrder
    max_temp?: SortOrderInput | SortOrder
    water?: SortOrderInput | SortOrder
    habit?: SortOrderInput | SortOrder
    wikipedia?: SortOrderInput | SortOrder
    britannica?: SortOrderInput | SortOrder
    img?: SortOrderInput | SortOrder
    imgs?: SortOrder
    taxonomyId?: SortOrder
    viewsId?: SortOrderInput | SortOrder
    taxonomy?: TaxonomyOrderByWithRelationAndSearchRelevanceInput
    pests?: PestsOrderByRelationAggregateInput
    blights?: BlightsOrderByRelationAggregateInput
    PlantOfDay?: PlantOfDayOrderByWithRelationAndSearchRelevanceInput
    Views?: ViewsOrderByWithRelationAndSearchRelevanceInput
    _relevance?: PlantsOrderByRelevanceInput
  }

  export type PlantsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    scientific_name?: string
    taxonomyId?: string
    AND?: PlantsWhereInput | PlantsWhereInput[]
    OR?: PlantsWhereInput[]
    NOT?: PlantsWhereInput | PlantsWhereInput[]
    common_name?: StringFilter<"Plants"> | string
    synonyms?: StringNullableListFilter<"Plants">
    description?: StringNullableFilter<"Plants"> | string | null
    min_h?: IntNullableFilter<"Plants"> | number | null
    max_h?: IntNullableFilter<"Plants"> | number | null
    min_ph?: FloatNullableFilter<"Plants"> | number | null
    max_ph?: FloatNullableFilter<"Plants"> | number | null
    min_temp?: IntNullableFilter<"Plants"> | number | null
    max_temp?: IntNullableFilter<"Plants"> | number | null
    water?: EnumLevelNullableFilter<"Plants"> | $Enums.Level | null
    habit?: StringNullableFilter<"Plants"> | string | null
    wikipedia?: StringNullableFilter<"Plants"> | string | null
    britannica?: StringNullableFilter<"Plants"> | string | null
    img?: StringNullableFilter<"Plants"> | string | null
    imgs?: StringNullableListFilter<"Plants">
    viewsId?: IntNullableFilter<"Plants"> | number | null
    taxonomy?: XOR<TaxonomyRelationFilter, TaxonomyWhereInput>
    pests?: PestsListRelationFilter
    blights?: BlightsListRelationFilter
    PlantOfDay?: XOR<PlantOfDayNullableRelationFilter, PlantOfDayWhereInput> | null
    Views?: XOR<ViewsNullableRelationFilter, ViewsWhereInput> | null
  }, "id" | "scientific_name" | "taxonomyId">

  export type PlantsOrderByWithAggregationInput = {
    id?: SortOrder
    common_name?: SortOrder
    scientific_name?: SortOrder
    synonyms?: SortOrder
    description?: SortOrderInput | SortOrder
    min_h?: SortOrderInput | SortOrder
    max_h?: SortOrderInput | SortOrder
    min_ph?: SortOrderInput | SortOrder
    max_ph?: SortOrderInput | SortOrder
    min_temp?: SortOrderInput | SortOrder
    max_temp?: SortOrderInput | SortOrder
    water?: SortOrderInput | SortOrder
    habit?: SortOrderInput | SortOrder
    wikipedia?: SortOrderInput | SortOrder
    britannica?: SortOrderInput | SortOrder
    img?: SortOrderInput | SortOrder
    imgs?: SortOrder
    taxonomyId?: SortOrder
    viewsId?: SortOrderInput | SortOrder
    _count?: PlantsCountOrderByAggregateInput
    _avg?: PlantsAvgOrderByAggregateInput
    _max?: PlantsMaxOrderByAggregateInput
    _min?: PlantsMinOrderByAggregateInput
    _sum?: PlantsSumOrderByAggregateInput
  }

  export type PlantsScalarWhereWithAggregatesInput = {
    AND?: PlantsScalarWhereWithAggregatesInput | PlantsScalarWhereWithAggregatesInput[]
    OR?: PlantsScalarWhereWithAggregatesInput[]
    NOT?: PlantsScalarWhereWithAggregatesInput | PlantsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Plants"> | string
    common_name?: StringWithAggregatesFilter<"Plants"> | string
    scientific_name?: StringWithAggregatesFilter<"Plants"> | string
    synonyms?: StringNullableListFilter<"Plants">
    description?: StringNullableWithAggregatesFilter<"Plants"> | string | null
    min_h?: IntNullableWithAggregatesFilter<"Plants"> | number | null
    max_h?: IntNullableWithAggregatesFilter<"Plants"> | number | null
    min_ph?: FloatNullableWithAggregatesFilter<"Plants"> | number | null
    max_ph?: FloatNullableWithAggregatesFilter<"Plants"> | number | null
    min_temp?: IntNullableWithAggregatesFilter<"Plants"> | number | null
    max_temp?: IntNullableWithAggregatesFilter<"Plants"> | number | null
    water?: EnumLevelNullableWithAggregatesFilter<"Plants"> | $Enums.Level | null
    habit?: StringNullableWithAggregatesFilter<"Plants"> | string | null
    wikipedia?: StringNullableWithAggregatesFilter<"Plants"> | string | null
    britannica?: StringNullableWithAggregatesFilter<"Plants"> | string | null
    img?: StringNullableWithAggregatesFilter<"Plants"> | string | null
    imgs?: StringNullableListFilter<"Plants">
    taxonomyId?: StringWithAggregatesFilter<"Plants"> | string
    viewsId?: IntNullableWithAggregatesFilter<"Plants"> | number | null
  }

  export type PestsWhereInput = {
    AND?: PestsWhereInput | PestsWhereInput[]
    OR?: PestsWhereInput[]
    NOT?: PestsWhereInput | PestsWhereInput[]
    id?: StringFilter<"Pests"> | string
    common_name?: StringFilter<"Pests"> | string
    synonyms?: StringNullableListFilter<"Pests">
    scientific_name?: StringFilter<"Pests"> | string
    description?: StringNullableFilter<"Pests"> | string | null
    wikipedia?: StringNullableFilter<"Pests"> | string | null
    britannica?: StringNullableFilter<"Pests"> | string | null
    img?: StringNullableFilter<"Pests"> | string | null
    imgs?: StringNullableListFilter<"Pests">
    taxonomyId?: StringFilter<"Pests"> | string
    taxonomy?: XOR<TaxonomyRelationFilter, TaxonomyWhereInput>
    plants?: PlantsListRelationFilter
    pestisides?: PestisidesListRelationFilter
  }

  export type PestsOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    common_name?: SortOrder
    synonyms?: SortOrder
    scientific_name?: SortOrder
    description?: SortOrderInput | SortOrder
    wikipedia?: SortOrderInput | SortOrder
    britannica?: SortOrderInput | SortOrder
    img?: SortOrderInput | SortOrder
    imgs?: SortOrder
    taxonomyId?: SortOrder
    taxonomy?: TaxonomyOrderByWithRelationAndSearchRelevanceInput
    plants?: PlantsOrderByRelationAggregateInput
    pestisides?: PestisidesOrderByRelationAggregateInput
    _relevance?: PestsOrderByRelevanceInput
  }

  export type PestsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    scientific_name?: string
    taxonomyId?: string
    AND?: PestsWhereInput | PestsWhereInput[]
    OR?: PestsWhereInput[]
    NOT?: PestsWhereInput | PestsWhereInput[]
    common_name?: StringFilter<"Pests"> | string
    synonyms?: StringNullableListFilter<"Pests">
    description?: StringNullableFilter<"Pests"> | string | null
    wikipedia?: StringNullableFilter<"Pests"> | string | null
    britannica?: StringNullableFilter<"Pests"> | string | null
    img?: StringNullableFilter<"Pests"> | string | null
    imgs?: StringNullableListFilter<"Pests">
    taxonomy?: XOR<TaxonomyRelationFilter, TaxonomyWhereInput>
    plants?: PlantsListRelationFilter
    pestisides?: PestisidesListRelationFilter
  }, "id" | "scientific_name" | "taxonomyId">

  export type PestsOrderByWithAggregationInput = {
    id?: SortOrder
    common_name?: SortOrder
    synonyms?: SortOrder
    scientific_name?: SortOrder
    description?: SortOrderInput | SortOrder
    wikipedia?: SortOrderInput | SortOrder
    britannica?: SortOrderInput | SortOrder
    img?: SortOrderInput | SortOrder
    imgs?: SortOrder
    taxonomyId?: SortOrder
    _count?: PestsCountOrderByAggregateInput
    _max?: PestsMaxOrderByAggregateInput
    _min?: PestsMinOrderByAggregateInput
  }

  export type PestsScalarWhereWithAggregatesInput = {
    AND?: PestsScalarWhereWithAggregatesInput | PestsScalarWhereWithAggregatesInput[]
    OR?: PestsScalarWhereWithAggregatesInput[]
    NOT?: PestsScalarWhereWithAggregatesInput | PestsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Pests"> | string
    common_name?: StringWithAggregatesFilter<"Pests"> | string
    synonyms?: StringNullableListFilter<"Pests">
    scientific_name?: StringWithAggregatesFilter<"Pests"> | string
    description?: StringNullableWithAggregatesFilter<"Pests"> | string | null
    wikipedia?: StringNullableWithAggregatesFilter<"Pests"> | string | null
    britannica?: StringNullableWithAggregatesFilter<"Pests"> | string | null
    img?: StringNullableWithAggregatesFilter<"Pests"> | string | null
    imgs?: StringNullableListFilter<"Pests">
    taxonomyId?: StringWithAggregatesFilter<"Pests"> | string
  }

  export type BlightsWhereInput = {
    AND?: BlightsWhereInput | BlightsWhereInput[]
    OR?: BlightsWhereInput[]
    NOT?: BlightsWhereInput | BlightsWhereInput[]
    id?: StringFilter<"Blights"> | string
    common_name?: StringFilter<"Blights"> | string
    synonyms?: StringNullableListFilter<"Blights">
    scientific_name?: StringFilter<"Blights"> | string
    description?: StringNullableFilter<"Blights"> | string | null
    wikipedia?: StringNullableFilter<"Blights"> | string | null
    britannica?: StringNullableFilter<"Blights"> | string | null
    img?: StringNullableFilter<"Blights"> | string | null
    imgs?: StringNullableListFilter<"Blights">
    taxonomyId?: StringFilter<"Blights"> | string
    taxonomy?: XOR<TaxonomyRelationFilter, TaxonomyWhereInput>
    plants?: PlantsListRelationFilter
    pestisides?: PestisidesListRelationFilter
  }

  export type BlightsOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    common_name?: SortOrder
    synonyms?: SortOrder
    scientific_name?: SortOrder
    description?: SortOrderInput | SortOrder
    wikipedia?: SortOrderInput | SortOrder
    britannica?: SortOrderInput | SortOrder
    img?: SortOrderInput | SortOrder
    imgs?: SortOrder
    taxonomyId?: SortOrder
    taxonomy?: TaxonomyOrderByWithRelationAndSearchRelevanceInput
    plants?: PlantsOrderByRelationAggregateInput
    pestisides?: PestisidesOrderByRelationAggregateInput
    _relevance?: BlightsOrderByRelevanceInput
  }

  export type BlightsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    scientific_name?: string
    taxonomyId?: string
    AND?: BlightsWhereInput | BlightsWhereInput[]
    OR?: BlightsWhereInput[]
    NOT?: BlightsWhereInput | BlightsWhereInput[]
    common_name?: StringFilter<"Blights"> | string
    synonyms?: StringNullableListFilter<"Blights">
    description?: StringNullableFilter<"Blights"> | string | null
    wikipedia?: StringNullableFilter<"Blights"> | string | null
    britannica?: StringNullableFilter<"Blights"> | string | null
    img?: StringNullableFilter<"Blights"> | string | null
    imgs?: StringNullableListFilter<"Blights">
    taxonomy?: XOR<TaxonomyRelationFilter, TaxonomyWhereInput>
    plants?: PlantsListRelationFilter
    pestisides?: PestisidesListRelationFilter
  }, "id" | "scientific_name" | "taxonomyId">

  export type BlightsOrderByWithAggregationInput = {
    id?: SortOrder
    common_name?: SortOrder
    synonyms?: SortOrder
    scientific_name?: SortOrder
    description?: SortOrderInput | SortOrder
    wikipedia?: SortOrderInput | SortOrder
    britannica?: SortOrderInput | SortOrder
    img?: SortOrderInput | SortOrder
    imgs?: SortOrder
    taxonomyId?: SortOrder
    _count?: BlightsCountOrderByAggregateInput
    _max?: BlightsMaxOrderByAggregateInput
    _min?: BlightsMinOrderByAggregateInput
  }

  export type BlightsScalarWhereWithAggregatesInput = {
    AND?: BlightsScalarWhereWithAggregatesInput | BlightsScalarWhereWithAggregatesInput[]
    OR?: BlightsScalarWhereWithAggregatesInput[]
    NOT?: BlightsScalarWhereWithAggregatesInput | BlightsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Blights"> | string
    common_name?: StringWithAggregatesFilter<"Blights"> | string
    synonyms?: StringNullableListFilter<"Blights">
    scientific_name?: StringWithAggregatesFilter<"Blights"> | string
    description?: StringNullableWithAggregatesFilter<"Blights"> | string | null
    wikipedia?: StringNullableWithAggregatesFilter<"Blights"> | string | null
    britannica?: StringNullableWithAggregatesFilter<"Blights"> | string | null
    img?: StringNullableWithAggregatesFilter<"Blights"> | string | null
    imgs?: StringNullableListFilter<"Blights">
    taxonomyId?: StringWithAggregatesFilter<"Blights"> | string
  }

  export type PestisidesWhereInput = {
    AND?: PestisidesWhereInput | PestisidesWhereInput[]
    OR?: PestisidesWhereInput[]
    NOT?: PestisidesWhereInput | PestisidesWhereInput[]
    id?: StringFilter<"Pestisides"> | string
    common_name?: StringNullableFilter<"Pestisides"> | string | null
    synonyms?: StringNullableListFilter<"Pestisides">
    scientific_name?: StringNullableFilter<"Pestisides"> | string | null
    description?: StringNullableFilter<"Pestisides"> | string | null
    wikipedia?: StringNullableFilter<"Pestisides"> | string | null
    britannica?: StringNullableFilter<"Pestisides"> | string | null
    img?: StringNullableFilter<"Pestisides"> | string | null
    pests?: PestsListRelationFilter
    blights?: BlightsListRelationFilter
  }

  export type PestisidesOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    common_name?: SortOrderInput | SortOrder
    synonyms?: SortOrder
    scientific_name?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    wikipedia?: SortOrderInput | SortOrder
    britannica?: SortOrderInput | SortOrder
    img?: SortOrderInput | SortOrder
    pests?: PestsOrderByRelationAggregateInput
    blights?: BlightsOrderByRelationAggregateInput
    _relevance?: PestisidesOrderByRelevanceInput
  }

  export type PestisidesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    scientific_name?: string
    AND?: PestisidesWhereInput | PestisidesWhereInput[]
    OR?: PestisidesWhereInput[]
    NOT?: PestisidesWhereInput | PestisidesWhereInput[]
    common_name?: StringNullableFilter<"Pestisides"> | string | null
    synonyms?: StringNullableListFilter<"Pestisides">
    description?: StringNullableFilter<"Pestisides"> | string | null
    wikipedia?: StringNullableFilter<"Pestisides"> | string | null
    britannica?: StringNullableFilter<"Pestisides"> | string | null
    img?: StringNullableFilter<"Pestisides"> | string | null
    pests?: PestsListRelationFilter
    blights?: BlightsListRelationFilter
  }, "id" | "scientific_name">

  export type PestisidesOrderByWithAggregationInput = {
    id?: SortOrder
    common_name?: SortOrderInput | SortOrder
    synonyms?: SortOrder
    scientific_name?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    wikipedia?: SortOrderInput | SortOrder
    britannica?: SortOrderInput | SortOrder
    img?: SortOrderInput | SortOrder
    _count?: PestisidesCountOrderByAggregateInput
    _max?: PestisidesMaxOrderByAggregateInput
    _min?: PestisidesMinOrderByAggregateInput
  }

  export type PestisidesScalarWhereWithAggregatesInput = {
    AND?: PestisidesScalarWhereWithAggregatesInput | PestisidesScalarWhereWithAggregatesInput[]
    OR?: PestisidesScalarWhereWithAggregatesInput[]
    NOT?: PestisidesScalarWhereWithAggregatesInput | PestisidesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Pestisides"> | string
    common_name?: StringNullableWithAggregatesFilter<"Pestisides"> | string | null
    synonyms?: StringNullableListFilter<"Pestisides">
    scientific_name?: StringNullableWithAggregatesFilter<"Pestisides"> | string | null
    description?: StringNullableWithAggregatesFilter<"Pestisides"> | string | null
    wikipedia?: StringNullableWithAggregatesFilter<"Pestisides"> | string | null
    britannica?: StringNullableWithAggregatesFilter<"Pestisides"> | string | null
    img?: StringNullableWithAggregatesFilter<"Pestisides"> | string | null
  }

  export type TaxonomyWhereInput = {
    AND?: TaxonomyWhereInput | TaxonomyWhereInput[]
    OR?: TaxonomyWhereInput[]
    NOT?: TaxonomyWhereInput | TaxonomyWhereInput[]
    id?: StringFilter<"Taxonomy"> | string
    kingdom?: StringNullableFilter<"Taxonomy"> | string | null
    phylum?: StringNullableFilter<"Taxonomy"> | string | null
    class?: StringNullableFilter<"Taxonomy"> | string | null
    order?: StringNullableFilter<"Taxonomy"> | string | null
    family?: StringNullableFilter<"Taxonomy"> | string | null
    genus?: StringNullableFilter<"Taxonomy"> | string | null
    species?: StringNullableFilter<"Taxonomy"> | string | null
    plant?: XOR<PlantsNullableRelationFilter, PlantsWhereInput> | null
    pest?: XOR<PestsNullableRelationFilter, PestsWhereInput> | null
    blight?: XOR<BlightsNullableRelationFilter, BlightsWhereInput> | null
  }

  export type TaxonomyOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    kingdom?: SortOrderInput | SortOrder
    phylum?: SortOrderInput | SortOrder
    class?: SortOrderInput | SortOrder
    order?: SortOrderInput | SortOrder
    family?: SortOrderInput | SortOrder
    genus?: SortOrderInput | SortOrder
    species?: SortOrderInput | SortOrder
    plant?: PlantsOrderByWithRelationAndSearchRelevanceInput
    pest?: PestsOrderByWithRelationAndSearchRelevanceInput
    blight?: BlightsOrderByWithRelationAndSearchRelevanceInput
    _relevance?: TaxonomyOrderByRelevanceInput
  }

  export type TaxonomyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TaxonomyWhereInput | TaxonomyWhereInput[]
    OR?: TaxonomyWhereInput[]
    NOT?: TaxonomyWhereInput | TaxonomyWhereInput[]
    kingdom?: StringNullableFilter<"Taxonomy"> | string | null
    phylum?: StringNullableFilter<"Taxonomy"> | string | null
    class?: StringNullableFilter<"Taxonomy"> | string | null
    order?: StringNullableFilter<"Taxonomy"> | string | null
    family?: StringNullableFilter<"Taxonomy"> | string | null
    genus?: StringNullableFilter<"Taxonomy"> | string | null
    species?: StringNullableFilter<"Taxonomy"> | string | null
    plant?: XOR<PlantsNullableRelationFilter, PlantsWhereInput> | null
    pest?: XOR<PestsNullableRelationFilter, PestsWhereInput> | null
    blight?: XOR<BlightsNullableRelationFilter, BlightsWhereInput> | null
  }, "id">

  export type TaxonomyOrderByWithAggregationInput = {
    id?: SortOrder
    kingdom?: SortOrderInput | SortOrder
    phylum?: SortOrderInput | SortOrder
    class?: SortOrderInput | SortOrder
    order?: SortOrderInput | SortOrder
    family?: SortOrderInput | SortOrder
    genus?: SortOrderInput | SortOrder
    species?: SortOrderInput | SortOrder
    _count?: TaxonomyCountOrderByAggregateInput
    _max?: TaxonomyMaxOrderByAggregateInput
    _min?: TaxonomyMinOrderByAggregateInput
  }

  export type TaxonomyScalarWhereWithAggregatesInput = {
    AND?: TaxonomyScalarWhereWithAggregatesInput | TaxonomyScalarWhereWithAggregatesInput[]
    OR?: TaxonomyScalarWhereWithAggregatesInput[]
    NOT?: TaxonomyScalarWhereWithAggregatesInput | TaxonomyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Taxonomy"> | string
    kingdom?: StringNullableWithAggregatesFilter<"Taxonomy"> | string | null
    phylum?: StringNullableWithAggregatesFilter<"Taxonomy"> | string | null
    class?: StringNullableWithAggregatesFilter<"Taxonomy"> | string | null
    order?: StringNullableWithAggregatesFilter<"Taxonomy"> | string | null
    family?: StringNullableWithAggregatesFilter<"Taxonomy"> | string | null
    genus?: StringNullableWithAggregatesFilter<"Taxonomy"> | string | null
    species?: StringNullableWithAggregatesFilter<"Taxonomy"> | string | null
  }

  export type SearchWhereInput = {
    AND?: SearchWhereInput | SearchWhereInput[]
    OR?: SearchWhereInput[]
    NOT?: SearchWhereInput | SearchWhereInput[]
    id?: StringFilter<"Search"> | string
    common_name?: StringNullableFilter<"Search"> | string | null
    scientific_name?: StringNullableFilter<"Search"> | string | null
    decription?: StringNullableFilter<"Search"> | string | null
    img?: StringNullableFilter<"Search"> | string | null
    type?: EnumTypeNullableFilter<"Search"> | $Enums.Type | null
  }

  export type SearchOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    common_name?: SortOrderInput | SortOrder
    scientific_name?: SortOrderInput | SortOrder
    decription?: SortOrderInput | SortOrder
    img?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    _relevance?: SearchOrderByRelevanceInput
  }

  export type SearchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    scientific_name?: string
    AND?: SearchWhereInput | SearchWhereInput[]
    OR?: SearchWhereInput[]
    NOT?: SearchWhereInput | SearchWhereInput[]
    common_name?: StringNullableFilter<"Search"> | string | null
    decription?: StringNullableFilter<"Search"> | string | null
    img?: StringNullableFilter<"Search"> | string | null
    type?: EnumTypeNullableFilter<"Search"> | $Enums.Type | null
  }, "id" | "scientific_name">

  export type SearchOrderByWithAggregationInput = {
    id?: SortOrder
    common_name?: SortOrderInput | SortOrder
    scientific_name?: SortOrderInput | SortOrder
    decription?: SortOrderInput | SortOrder
    img?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    _count?: SearchCountOrderByAggregateInput
    _max?: SearchMaxOrderByAggregateInput
    _min?: SearchMinOrderByAggregateInput
  }

  export type SearchScalarWhereWithAggregatesInput = {
    AND?: SearchScalarWhereWithAggregatesInput | SearchScalarWhereWithAggregatesInput[]
    OR?: SearchScalarWhereWithAggregatesInput[]
    NOT?: SearchScalarWhereWithAggregatesInput | SearchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Search"> | string
    common_name?: StringNullableWithAggregatesFilter<"Search"> | string | null
    scientific_name?: StringNullableWithAggregatesFilter<"Search"> | string | null
    decription?: StringNullableWithAggregatesFilter<"Search"> | string | null
    img?: StringNullableWithAggregatesFilter<"Search"> | string | null
    type?: EnumTypeNullableWithAggregatesFilter<"Search"> | $Enums.Type | null
  }

  export type PlantOfDayWhereInput = {
    AND?: PlantOfDayWhereInput | PlantOfDayWhereInput[]
    OR?: PlantOfDayWhereInput[]
    NOT?: PlantOfDayWhereInput | PlantOfDayWhereInput[]
    id?: StringFilter<"PlantOfDay"> | string
    plantsId?: StringFilter<"PlantOfDay"> | string
    plant?: XOR<PlantsRelationFilter, PlantsWhereInput>
  }

  export type PlantOfDayOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    plantsId?: SortOrder
    plant?: PlantsOrderByWithRelationAndSearchRelevanceInput
    _relevance?: PlantOfDayOrderByRelevanceInput
  }

  export type PlantOfDayWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    plantsId?: string
    AND?: PlantOfDayWhereInput | PlantOfDayWhereInput[]
    OR?: PlantOfDayWhereInput[]
    NOT?: PlantOfDayWhereInput | PlantOfDayWhereInput[]
    plant?: XOR<PlantsRelationFilter, PlantsWhereInput>
  }, "id" | "plantsId">

  export type PlantOfDayOrderByWithAggregationInput = {
    id?: SortOrder
    plantsId?: SortOrder
    _count?: PlantOfDayCountOrderByAggregateInput
    _max?: PlantOfDayMaxOrderByAggregateInput
    _min?: PlantOfDayMinOrderByAggregateInput
  }

  export type PlantOfDayScalarWhereWithAggregatesInput = {
    AND?: PlantOfDayScalarWhereWithAggregatesInput | PlantOfDayScalarWhereWithAggregatesInput[]
    OR?: PlantOfDayScalarWhereWithAggregatesInput[]
    NOT?: PlantOfDayScalarWhereWithAggregatesInput | PlantOfDayScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PlantOfDay"> | string
    plantsId?: StringWithAggregatesFilter<"PlantOfDay"> | string
  }

  export type ViewsWhereInput = {
    AND?: ViewsWhereInput | ViewsWhereInput[]
    OR?: ViewsWhereInput[]
    NOT?: ViewsWhereInput | ViewsWhereInput[]
    id?: IntFilter<"Views"> | number
    time?: DateTimeNullableFilter<"Views"> | Date | string | null
    plant?: PlantsListRelationFilter
  }

  export type ViewsOrderByWithRelationAndSearchRelevanceInput = {
    id?: SortOrder
    time?: SortOrderInput | SortOrder
    plant?: PlantsOrderByRelationAggregateInput
  }

  export type ViewsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ViewsWhereInput | ViewsWhereInput[]
    OR?: ViewsWhereInput[]
    NOT?: ViewsWhereInput | ViewsWhereInput[]
    time?: DateTimeNullableFilter<"Views"> | Date | string | null
    plant?: PlantsListRelationFilter
  }, "id">

  export type ViewsOrderByWithAggregationInput = {
    id?: SortOrder
    time?: SortOrderInput | SortOrder
    _count?: ViewsCountOrderByAggregateInput
    _avg?: ViewsAvgOrderByAggregateInput
    _max?: ViewsMaxOrderByAggregateInput
    _min?: ViewsMinOrderByAggregateInput
    _sum?: ViewsSumOrderByAggregateInput
  }

  export type ViewsScalarWhereWithAggregatesInput = {
    AND?: ViewsScalarWhereWithAggregatesInput | ViewsScalarWhereWithAggregatesInput[]
    OR?: ViewsScalarWhereWithAggregatesInput[]
    NOT?: ViewsScalarWhereWithAggregatesInput | ViewsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Views"> | number
    time?: DateTimeNullableWithAggregatesFilter<"Views"> | Date | string | null
  }

  export type PlantsCreateInput = {
    id?: string
    common_name: string
    scientific_name: string
    synonyms?: PlantsCreatesynonymsInput | string[]
    description?: string | null
    min_h?: number | null
    max_h?: number | null
    min_ph?: number | null
    max_ph?: number | null
    min_temp?: number | null
    max_temp?: number | null
    water?: $Enums.Level | null
    habit?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PlantsCreateimgsInput | string[]
    taxonomy: TaxonomyCreateNestedOneWithoutPlantInput
    pests?: PestsCreateNestedManyWithoutPlantsInput
    blights?: BlightsCreateNestedManyWithoutPlantsInput
    PlantOfDay?: PlantOfDayCreateNestedOneWithoutPlantInput
    Views?: ViewsCreateNestedOneWithoutPlantInput
  }

  export type PlantsUncheckedCreateInput = {
    id?: string
    common_name: string
    scientific_name: string
    synonyms?: PlantsCreatesynonymsInput | string[]
    description?: string | null
    min_h?: number | null
    max_h?: number | null
    min_ph?: number | null
    max_ph?: number | null
    min_temp?: number | null
    max_temp?: number | null
    water?: $Enums.Level | null
    habit?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PlantsCreateimgsInput | string[]
    taxonomyId: string
    viewsId?: number | null
    pests?: PestsUncheckedCreateNestedManyWithoutPlantsInput
    blights?: BlightsUncheckedCreateNestedManyWithoutPlantsInput
    PlantOfDay?: PlantOfDayUncheckedCreateNestedOneWithoutPlantInput
  }

  export type PlantsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    scientific_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PlantsUpdatesynonymsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    min_h?: NullableIntFieldUpdateOperationsInput | number | null
    max_h?: NullableIntFieldUpdateOperationsInput | number | null
    min_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    max_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    min_temp?: NullableIntFieldUpdateOperationsInput | number | null
    max_temp?: NullableIntFieldUpdateOperationsInput | number | null
    water?: NullableEnumLevelFieldUpdateOperationsInput | $Enums.Level | null
    habit?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PlantsUpdateimgsInput | string[]
    taxonomy?: TaxonomyUpdateOneRequiredWithoutPlantNestedInput
    pests?: PestsUpdateManyWithoutPlantsNestedInput
    blights?: BlightsUpdateManyWithoutPlantsNestedInput
    PlantOfDay?: PlantOfDayUpdateOneWithoutPlantNestedInput
    Views?: ViewsUpdateOneWithoutPlantNestedInput
  }

  export type PlantsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    scientific_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PlantsUpdatesynonymsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    min_h?: NullableIntFieldUpdateOperationsInput | number | null
    max_h?: NullableIntFieldUpdateOperationsInput | number | null
    min_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    max_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    min_temp?: NullableIntFieldUpdateOperationsInput | number | null
    max_temp?: NullableIntFieldUpdateOperationsInput | number | null
    water?: NullableEnumLevelFieldUpdateOperationsInput | $Enums.Level | null
    habit?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PlantsUpdateimgsInput | string[]
    taxonomyId?: StringFieldUpdateOperationsInput | string
    viewsId?: NullableIntFieldUpdateOperationsInput | number | null
    pests?: PestsUncheckedUpdateManyWithoutPlantsNestedInput
    blights?: BlightsUncheckedUpdateManyWithoutPlantsNestedInput
    PlantOfDay?: PlantOfDayUncheckedUpdateOneWithoutPlantNestedInput
  }

  export type PlantsCreateManyInput = {
    id?: string
    common_name: string
    scientific_name: string
    synonyms?: PlantsCreatesynonymsInput | string[]
    description?: string | null
    min_h?: number | null
    max_h?: number | null
    min_ph?: number | null
    max_ph?: number | null
    min_temp?: number | null
    max_temp?: number | null
    water?: $Enums.Level | null
    habit?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PlantsCreateimgsInput | string[]
    taxonomyId: string
    viewsId?: number | null
  }

  export type PlantsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    scientific_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PlantsUpdatesynonymsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    min_h?: NullableIntFieldUpdateOperationsInput | number | null
    max_h?: NullableIntFieldUpdateOperationsInput | number | null
    min_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    max_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    min_temp?: NullableIntFieldUpdateOperationsInput | number | null
    max_temp?: NullableIntFieldUpdateOperationsInput | number | null
    water?: NullableEnumLevelFieldUpdateOperationsInput | $Enums.Level | null
    habit?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PlantsUpdateimgsInput | string[]
  }

  export type PlantsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    scientific_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PlantsUpdatesynonymsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    min_h?: NullableIntFieldUpdateOperationsInput | number | null
    max_h?: NullableIntFieldUpdateOperationsInput | number | null
    min_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    max_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    min_temp?: NullableIntFieldUpdateOperationsInput | number | null
    max_temp?: NullableIntFieldUpdateOperationsInput | number | null
    water?: NullableEnumLevelFieldUpdateOperationsInput | $Enums.Level | null
    habit?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PlantsUpdateimgsInput | string[]
    taxonomyId?: StringFieldUpdateOperationsInput | string
    viewsId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PestsCreateInput = {
    id?: string
    common_name: string
    synonyms?: PestsCreatesynonymsInput | string[]
    scientific_name: string
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PestsCreateimgsInput | string[]
    taxonomy: TaxonomyCreateNestedOneWithoutPestInput
    plants?: PlantsCreateNestedManyWithoutPestsInput
    pestisides?: PestisidesCreateNestedManyWithoutPestsInput
  }

  export type PestsUncheckedCreateInput = {
    id?: string
    common_name: string
    synonyms?: PestsCreatesynonymsInput | string[]
    scientific_name: string
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PestsCreateimgsInput | string[]
    taxonomyId: string
    plants?: PlantsUncheckedCreateNestedManyWithoutPestsInput
    pestisides?: PestisidesUncheckedCreateNestedManyWithoutPestsInput
  }

  export type PestsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PestsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PestsUpdateimgsInput | string[]
    taxonomy?: TaxonomyUpdateOneRequiredWithoutPestNestedInput
    plants?: PlantsUpdateManyWithoutPestsNestedInput
    pestisides?: PestisidesUpdateManyWithoutPestsNestedInput
  }

  export type PestsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PestsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PestsUpdateimgsInput | string[]
    taxonomyId?: StringFieldUpdateOperationsInput | string
    plants?: PlantsUncheckedUpdateManyWithoutPestsNestedInput
    pestisides?: PestisidesUncheckedUpdateManyWithoutPestsNestedInput
  }

  export type PestsCreateManyInput = {
    id?: string
    common_name: string
    synonyms?: PestsCreatesynonymsInput | string[]
    scientific_name: string
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PestsCreateimgsInput | string[]
    taxonomyId: string
  }

  export type PestsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PestsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PestsUpdateimgsInput | string[]
  }

  export type PestsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PestsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PestsUpdateimgsInput | string[]
    taxonomyId?: StringFieldUpdateOperationsInput | string
  }

  export type BlightsCreateInput = {
    id?: string
    common_name: string
    synonyms?: BlightsCreatesynonymsInput | string[]
    scientific_name: string
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: BlightsCreateimgsInput | string[]
    taxonomy: TaxonomyCreateNestedOneWithoutBlightInput
    plants?: PlantsCreateNestedManyWithoutBlightsInput
    pestisides?: PestisidesCreateNestedManyWithoutBlightsInput
  }

  export type BlightsUncheckedCreateInput = {
    id?: string
    common_name: string
    synonyms?: BlightsCreatesynonymsInput | string[]
    scientific_name: string
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: BlightsCreateimgsInput | string[]
    taxonomyId: string
    plants?: PlantsUncheckedCreateNestedManyWithoutBlightsInput
    pestisides?: PestisidesUncheckedCreateNestedManyWithoutBlightsInput
  }

  export type BlightsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: BlightsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: BlightsUpdateimgsInput | string[]
    taxonomy?: TaxonomyUpdateOneRequiredWithoutBlightNestedInput
    plants?: PlantsUpdateManyWithoutBlightsNestedInput
    pestisides?: PestisidesUpdateManyWithoutBlightsNestedInput
  }

  export type BlightsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: BlightsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: BlightsUpdateimgsInput | string[]
    taxonomyId?: StringFieldUpdateOperationsInput | string
    plants?: PlantsUncheckedUpdateManyWithoutBlightsNestedInput
    pestisides?: PestisidesUncheckedUpdateManyWithoutBlightsNestedInput
  }

  export type BlightsCreateManyInput = {
    id?: string
    common_name: string
    synonyms?: BlightsCreatesynonymsInput | string[]
    scientific_name: string
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: BlightsCreateimgsInput | string[]
    taxonomyId: string
  }

  export type BlightsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: BlightsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: BlightsUpdateimgsInput | string[]
  }

  export type BlightsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: BlightsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: BlightsUpdateimgsInput | string[]
    taxonomyId?: StringFieldUpdateOperationsInput | string
  }

  export type PestisidesCreateInput = {
    id?: string
    common_name?: string | null
    synonyms?: PestisidesCreatesynonymsInput | string[]
    scientific_name?: string | null
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    pests?: PestsCreateNestedManyWithoutPestisidesInput
    blights?: BlightsCreateNestedManyWithoutPestisidesInput
  }

  export type PestisidesUncheckedCreateInput = {
    id?: string
    common_name?: string | null
    synonyms?: PestisidesCreatesynonymsInput | string[]
    scientific_name?: string | null
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    pests?: PestsUncheckedCreateNestedManyWithoutPestisidesInput
    blights?: BlightsUncheckedCreateNestedManyWithoutPestisidesInput
  }

  export type PestisidesUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: PestisidesUpdatesynonymsInput | string[]
    scientific_name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    pests?: PestsUpdateManyWithoutPestisidesNestedInput
    blights?: BlightsUpdateManyWithoutPestisidesNestedInput
  }

  export type PestisidesUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: PestisidesUpdatesynonymsInput | string[]
    scientific_name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    pests?: PestsUncheckedUpdateManyWithoutPestisidesNestedInput
    blights?: BlightsUncheckedUpdateManyWithoutPestisidesNestedInput
  }

  export type PestisidesCreateManyInput = {
    id?: string
    common_name?: string | null
    synonyms?: PestisidesCreatesynonymsInput | string[]
    scientific_name?: string | null
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
  }

  export type PestisidesUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: PestisidesUpdatesynonymsInput | string[]
    scientific_name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PestisidesUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: PestisidesUpdatesynonymsInput | string[]
    scientific_name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaxonomyCreateInput = {
    id?: string
    kingdom?: string | null
    phylum?: string | null
    class?: string | null
    order?: string | null
    family?: string | null
    genus?: string | null
    species?: string | null
    plant?: PlantsCreateNestedOneWithoutTaxonomyInput
    pest?: PestsCreateNestedOneWithoutTaxonomyInput
    blight?: BlightsCreateNestedOneWithoutTaxonomyInput
  }

  export type TaxonomyUncheckedCreateInput = {
    id?: string
    kingdom?: string | null
    phylum?: string | null
    class?: string | null
    order?: string | null
    family?: string | null
    genus?: string | null
    species?: string | null
    plant?: PlantsUncheckedCreateNestedOneWithoutTaxonomyInput
    pest?: PestsUncheckedCreateNestedOneWithoutTaxonomyInput
    blight?: BlightsUncheckedCreateNestedOneWithoutTaxonomyInput
  }

  export type TaxonomyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    kingdom?: NullableStringFieldUpdateOperationsInput | string | null
    phylum?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    genus?: NullableStringFieldUpdateOperationsInput | string | null
    species?: NullableStringFieldUpdateOperationsInput | string | null
    plant?: PlantsUpdateOneWithoutTaxonomyNestedInput
    pest?: PestsUpdateOneWithoutTaxonomyNestedInput
    blight?: BlightsUpdateOneWithoutTaxonomyNestedInput
  }

  export type TaxonomyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    kingdom?: NullableStringFieldUpdateOperationsInput | string | null
    phylum?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    genus?: NullableStringFieldUpdateOperationsInput | string | null
    species?: NullableStringFieldUpdateOperationsInput | string | null
    plant?: PlantsUncheckedUpdateOneWithoutTaxonomyNestedInput
    pest?: PestsUncheckedUpdateOneWithoutTaxonomyNestedInput
    blight?: BlightsUncheckedUpdateOneWithoutTaxonomyNestedInput
  }

  export type TaxonomyCreateManyInput = {
    id?: string
    kingdom?: string | null
    phylum?: string | null
    class?: string | null
    order?: string | null
    family?: string | null
    genus?: string | null
    species?: string | null
  }

  export type TaxonomyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    kingdom?: NullableStringFieldUpdateOperationsInput | string | null
    phylum?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    genus?: NullableStringFieldUpdateOperationsInput | string | null
    species?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaxonomyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    kingdom?: NullableStringFieldUpdateOperationsInput | string | null
    phylum?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    genus?: NullableStringFieldUpdateOperationsInput | string | null
    species?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SearchCreateInput = {
    id?: string
    common_name?: string | null
    scientific_name?: string | null
    decription?: string | null
    img?: string | null
    type?: $Enums.Type | null
  }

  export type SearchUncheckedCreateInput = {
    id?: string
    common_name?: string | null
    scientific_name?: string | null
    decription?: string | null
    img?: string | null
    type?: $Enums.Type | null
  }

  export type SearchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: NullableStringFieldUpdateOperationsInput | string | null
    scientific_name?: NullableStringFieldUpdateOperationsInput | string | null
    decription?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumTypeFieldUpdateOperationsInput | $Enums.Type | null
  }

  export type SearchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: NullableStringFieldUpdateOperationsInput | string | null
    scientific_name?: NullableStringFieldUpdateOperationsInput | string | null
    decription?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumTypeFieldUpdateOperationsInput | $Enums.Type | null
  }

  export type SearchCreateManyInput = {
    id?: string
    common_name?: string | null
    scientific_name?: string | null
    decription?: string | null
    img?: string | null
    type?: $Enums.Type | null
  }

  export type SearchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: NullableStringFieldUpdateOperationsInput | string | null
    scientific_name?: NullableStringFieldUpdateOperationsInput | string | null
    decription?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumTypeFieldUpdateOperationsInput | $Enums.Type | null
  }

  export type SearchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: NullableStringFieldUpdateOperationsInput | string | null
    scientific_name?: NullableStringFieldUpdateOperationsInput | string | null
    decription?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    type?: NullableEnumTypeFieldUpdateOperationsInput | $Enums.Type | null
  }

  export type PlantOfDayCreateInput = {
    id?: string
    plant: PlantsCreateNestedOneWithoutPlantOfDayInput
  }

  export type PlantOfDayUncheckedCreateInput = {
    id?: string
    plantsId: string
  }

  export type PlantOfDayUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    plant?: PlantsUpdateOneRequiredWithoutPlantOfDayNestedInput
  }

  export type PlantOfDayUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    plantsId?: StringFieldUpdateOperationsInput | string
  }

  export type PlantOfDayCreateManyInput = {
    id?: string
    plantsId: string
  }

  export type PlantOfDayUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type PlantOfDayUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    plantsId?: StringFieldUpdateOperationsInput | string
  }

  export type ViewsCreateInput = {
    id: number
    time?: Date | string | null
    plant?: PlantsCreateNestedManyWithoutViewsInput
  }

  export type ViewsUncheckedCreateInput = {
    id: number
    time?: Date | string | null
    plant?: PlantsUncheckedCreateNestedManyWithoutViewsInput
  }

  export type ViewsUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plant?: PlantsUpdateManyWithoutViewsNestedInput
  }

  export type ViewsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    plant?: PlantsUncheckedUpdateManyWithoutViewsNestedInput
  }

  export type ViewsCreateManyInput = {
    id: number
    time?: Date | string | null
  }

  export type ViewsUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ViewsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type EnumLevelNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Level | EnumLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.Level[] | ListEnumLevelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Level[] | ListEnumLevelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLevelNullableFilter<$PrismaModel> | $Enums.Level | null
  }

  export type TaxonomyRelationFilter = {
    is?: TaxonomyWhereInput
    isNot?: TaxonomyWhereInput
  }

  export type PestsListRelationFilter = {
    every?: PestsWhereInput
    some?: PestsWhereInput
    none?: PestsWhereInput
  }

  export type BlightsListRelationFilter = {
    every?: BlightsWhereInput
    some?: BlightsWhereInput
    none?: BlightsWhereInput
  }

  export type PlantOfDayNullableRelationFilter = {
    is?: PlantOfDayWhereInput | null
    isNot?: PlantOfDayWhereInput | null
  }

  export type ViewsNullableRelationFilter = {
    is?: ViewsWhereInput | null
    isNot?: ViewsWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type PestsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BlightsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlantsOrderByRelevanceInput = {
    fields: PlantsOrderByRelevanceFieldEnum | PlantsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PlantsCountOrderByAggregateInput = {
    id?: SortOrder
    common_name?: SortOrder
    scientific_name?: SortOrder
    synonyms?: SortOrder
    description?: SortOrder
    min_h?: SortOrder
    max_h?: SortOrder
    min_ph?: SortOrder
    max_ph?: SortOrder
    min_temp?: SortOrder
    max_temp?: SortOrder
    water?: SortOrder
    habit?: SortOrder
    wikipedia?: SortOrder
    britannica?: SortOrder
    img?: SortOrder
    imgs?: SortOrder
    taxonomyId?: SortOrder
    viewsId?: SortOrder
  }

  export type PlantsAvgOrderByAggregateInput = {
    min_h?: SortOrder
    max_h?: SortOrder
    min_ph?: SortOrder
    max_ph?: SortOrder
    min_temp?: SortOrder
    max_temp?: SortOrder
    viewsId?: SortOrder
  }

  export type PlantsMaxOrderByAggregateInput = {
    id?: SortOrder
    common_name?: SortOrder
    scientific_name?: SortOrder
    description?: SortOrder
    min_h?: SortOrder
    max_h?: SortOrder
    min_ph?: SortOrder
    max_ph?: SortOrder
    min_temp?: SortOrder
    max_temp?: SortOrder
    water?: SortOrder
    habit?: SortOrder
    wikipedia?: SortOrder
    britannica?: SortOrder
    img?: SortOrder
    taxonomyId?: SortOrder
    viewsId?: SortOrder
  }

  export type PlantsMinOrderByAggregateInput = {
    id?: SortOrder
    common_name?: SortOrder
    scientific_name?: SortOrder
    description?: SortOrder
    min_h?: SortOrder
    max_h?: SortOrder
    min_ph?: SortOrder
    max_ph?: SortOrder
    min_temp?: SortOrder
    max_temp?: SortOrder
    water?: SortOrder
    habit?: SortOrder
    wikipedia?: SortOrder
    britannica?: SortOrder
    img?: SortOrder
    taxonomyId?: SortOrder
    viewsId?: SortOrder
  }

  export type PlantsSumOrderByAggregateInput = {
    min_h?: SortOrder
    max_h?: SortOrder
    min_ph?: SortOrder
    max_ph?: SortOrder
    min_temp?: SortOrder
    max_temp?: SortOrder
    viewsId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumLevelNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Level | EnumLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.Level[] | ListEnumLevelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Level[] | ListEnumLevelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLevelNullableWithAggregatesFilter<$PrismaModel> | $Enums.Level | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumLevelNullableFilter<$PrismaModel>
    _max?: NestedEnumLevelNullableFilter<$PrismaModel>
  }

  export type PlantsListRelationFilter = {
    every?: PlantsWhereInput
    some?: PlantsWhereInput
    none?: PlantsWhereInput
  }

  export type PestisidesListRelationFilter = {
    every?: PestisidesWhereInput
    some?: PestisidesWhereInput
    none?: PestisidesWhereInput
  }

  export type PlantsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PestisidesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PestsOrderByRelevanceInput = {
    fields: PestsOrderByRelevanceFieldEnum | PestsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PestsCountOrderByAggregateInput = {
    id?: SortOrder
    common_name?: SortOrder
    synonyms?: SortOrder
    scientific_name?: SortOrder
    description?: SortOrder
    wikipedia?: SortOrder
    britannica?: SortOrder
    img?: SortOrder
    imgs?: SortOrder
    taxonomyId?: SortOrder
  }

  export type PestsMaxOrderByAggregateInput = {
    id?: SortOrder
    common_name?: SortOrder
    scientific_name?: SortOrder
    description?: SortOrder
    wikipedia?: SortOrder
    britannica?: SortOrder
    img?: SortOrder
    taxonomyId?: SortOrder
  }

  export type PestsMinOrderByAggregateInput = {
    id?: SortOrder
    common_name?: SortOrder
    scientific_name?: SortOrder
    description?: SortOrder
    wikipedia?: SortOrder
    britannica?: SortOrder
    img?: SortOrder
    taxonomyId?: SortOrder
  }

  export type BlightsOrderByRelevanceInput = {
    fields: BlightsOrderByRelevanceFieldEnum | BlightsOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type BlightsCountOrderByAggregateInput = {
    id?: SortOrder
    common_name?: SortOrder
    synonyms?: SortOrder
    scientific_name?: SortOrder
    description?: SortOrder
    wikipedia?: SortOrder
    britannica?: SortOrder
    img?: SortOrder
    imgs?: SortOrder
    taxonomyId?: SortOrder
  }

  export type BlightsMaxOrderByAggregateInput = {
    id?: SortOrder
    common_name?: SortOrder
    scientific_name?: SortOrder
    description?: SortOrder
    wikipedia?: SortOrder
    britannica?: SortOrder
    img?: SortOrder
    taxonomyId?: SortOrder
  }

  export type BlightsMinOrderByAggregateInput = {
    id?: SortOrder
    common_name?: SortOrder
    scientific_name?: SortOrder
    description?: SortOrder
    wikipedia?: SortOrder
    britannica?: SortOrder
    img?: SortOrder
    taxonomyId?: SortOrder
  }

  export type PestisidesOrderByRelevanceInput = {
    fields: PestisidesOrderByRelevanceFieldEnum | PestisidesOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PestisidesCountOrderByAggregateInput = {
    id?: SortOrder
    common_name?: SortOrder
    synonyms?: SortOrder
    scientific_name?: SortOrder
    description?: SortOrder
    wikipedia?: SortOrder
    britannica?: SortOrder
    img?: SortOrder
  }

  export type PestisidesMaxOrderByAggregateInput = {
    id?: SortOrder
    common_name?: SortOrder
    scientific_name?: SortOrder
    description?: SortOrder
    wikipedia?: SortOrder
    britannica?: SortOrder
    img?: SortOrder
  }

  export type PestisidesMinOrderByAggregateInput = {
    id?: SortOrder
    common_name?: SortOrder
    scientific_name?: SortOrder
    description?: SortOrder
    wikipedia?: SortOrder
    britannica?: SortOrder
    img?: SortOrder
  }

  export type PlantsNullableRelationFilter = {
    is?: PlantsWhereInput | null
    isNot?: PlantsWhereInput | null
  }

  export type PestsNullableRelationFilter = {
    is?: PestsWhereInput | null
    isNot?: PestsWhereInput | null
  }

  export type BlightsNullableRelationFilter = {
    is?: BlightsWhereInput | null
    isNot?: BlightsWhereInput | null
  }

  export type TaxonomyOrderByRelevanceInput = {
    fields: TaxonomyOrderByRelevanceFieldEnum | TaxonomyOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type TaxonomyCountOrderByAggregateInput = {
    id?: SortOrder
    kingdom?: SortOrder
    phylum?: SortOrder
    class?: SortOrder
    order?: SortOrder
    family?: SortOrder
    genus?: SortOrder
    species?: SortOrder
  }

  export type TaxonomyMaxOrderByAggregateInput = {
    id?: SortOrder
    kingdom?: SortOrder
    phylum?: SortOrder
    class?: SortOrder
    order?: SortOrder
    family?: SortOrder
    genus?: SortOrder
    species?: SortOrder
  }

  export type TaxonomyMinOrderByAggregateInput = {
    id?: SortOrder
    kingdom?: SortOrder
    phylum?: SortOrder
    class?: SortOrder
    order?: SortOrder
    family?: SortOrder
    genus?: SortOrder
    species?: SortOrder
  }

  export type EnumTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTypeNullableFilter<$PrismaModel> | $Enums.Type | null
  }

  export type SearchOrderByRelevanceInput = {
    fields: SearchOrderByRelevanceFieldEnum | SearchOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type SearchCountOrderByAggregateInput = {
    id?: SortOrder
    common_name?: SortOrder
    scientific_name?: SortOrder
    decription?: SortOrder
    img?: SortOrder
    type?: SortOrder
  }

  export type SearchMaxOrderByAggregateInput = {
    id?: SortOrder
    common_name?: SortOrder
    scientific_name?: SortOrder
    decription?: SortOrder
    img?: SortOrder
    type?: SortOrder
  }

  export type SearchMinOrderByAggregateInput = {
    id?: SortOrder
    common_name?: SortOrder
    scientific_name?: SortOrder
    decription?: SortOrder
    img?: SortOrder
    type?: SortOrder
  }

  export type EnumTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.Type | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumTypeNullableFilter<$PrismaModel>
  }

  export type PlantsRelationFilter = {
    is?: PlantsWhereInput
    isNot?: PlantsWhereInput
  }

  export type PlantOfDayOrderByRelevanceInput = {
    fields: PlantOfDayOrderByRelevanceFieldEnum | PlantOfDayOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type PlantOfDayCountOrderByAggregateInput = {
    id?: SortOrder
    plantsId?: SortOrder
  }

  export type PlantOfDayMaxOrderByAggregateInput = {
    id?: SortOrder
    plantsId?: SortOrder
  }

  export type PlantOfDayMinOrderByAggregateInput = {
    id?: SortOrder
    plantsId?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ViewsCountOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
  }

  export type ViewsAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ViewsMaxOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
  }

  export type ViewsMinOrderByAggregateInput = {
    id?: SortOrder
    time?: SortOrder
  }

  export type ViewsSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type PlantsCreatesynonymsInput = {
    set: string[]
  }

  export type PlantsCreateimgsInput = {
    set: string[]
  }

  export type TaxonomyCreateNestedOneWithoutPlantInput = {
    create?: XOR<TaxonomyCreateWithoutPlantInput, TaxonomyUncheckedCreateWithoutPlantInput>
    connectOrCreate?: TaxonomyCreateOrConnectWithoutPlantInput
    connect?: TaxonomyWhereUniqueInput
  }

  export type PestsCreateNestedManyWithoutPlantsInput = {
    create?: XOR<PestsCreateWithoutPlantsInput, PestsUncheckedCreateWithoutPlantsInput> | PestsCreateWithoutPlantsInput[] | PestsUncheckedCreateWithoutPlantsInput[]
    connectOrCreate?: PestsCreateOrConnectWithoutPlantsInput | PestsCreateOrConnectWithoutPlantsInput[]
    connect?: PestsWhereUniqueInput | PestsWhereUniqueInput[]
  }

  export type BlightsCreateNestedManyWithoutPlantsInput = {
    create?: XOR<BlightsCreateWithoutPlantsInput, BlightsUncheckedCreateWithoutPlantsInput> | BlightsCreateWithoutPlantsInput[] | BlightsUncheckedCreateWithoutPlantsInput[]
    connectOrCreate?: BlightsCreateOrConnectWithoutPlantsInput | BlightsCreateOrConnectWithoutPlantsInput[]
    connect?: BlightsWhereUniqueInput | BlightsWhereUniqueInput[]
  }

  export type PlantOfDayCreateNestedOneWithoutPlantInput = {
    create?: XOR<PlantOfDayCreateWithoutPlantInput, PlantOfDayUncheckedCreateWithoutPlantInput>
    connectOrCreate?: PlantOfDayCreateOrConnectWithoutPlantInput
    connect?: PlantOfDayWhereUniqueInput
  }

  export type ViewsCreateNestedOneWithoutPlantInput = {
    create?: XOR<ViewsCreateWithoutPlantInput, ViewsUncheckedCreateWithoutPlantInput>
    connectOrCreate?: ViewsCreateOrConnectWithoutPlantInput
    connect?: ViewsWhereUniqueInput
  }

  export type PestsUncheckedCreateNestedManyWithoutPlantsInput = {
    create?: XOR<PestsCreateWithoutPlantsInput, PestsUncheckedCreateWithoutPlantsInput> | PestsCreateWithoutPlantsInput[] | PestsUncheckedCreateWithoutPlantsInput[]
    connectOrCreate?: PestsCreateOrConnectWithoutPlantsInput | PestsCreateOrConnectWithoutPlantsInput[]
    connect?: PestsWhereUniqueInput | PestsWhereUniqueInput[]
  }

  export type BlightsUncheckedCreateNestedManyWithoutPlantsInput = {
    create?: XOR<BlightsCreateWithoutPlantsInput, BlightsUncheckedCreateWithoutPlantsInput> | BlightsCreateWithoutPlantsInput[] | BlightsUncheckedCreateWithoutPlantsInput[]
    connectOrCreate?: BlightsCreateOrConnectWithoutPlantsInput | BlightsCreateOrConnectWithoutPlantsInput[]
    connect?: BlightsWhereUniqueInput | BlightsWhereUniqueInput[]
  }

  export type PlantOfDayUncheckedCreateNestedOneWithoutPlantInput = {
    create?: XOR<PlantOfDayCreateWithoutPlantInput, PlantOfDayUncheckedCreateWithoutPlantInput>
    connectOrCreate?: PlantOfDayCreateOrConnectWithoutPlantInput
    connect?: PlantOfDayWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type PlantsUpdatesynonymsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableEnumLevelFieldUpdateOperationsInput = {
    set?: $Enums.Level | null
  }

  export type PlantsUpdateimgsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type TaxonomyUpdateOneRequiredWithoutPlantNestedInput = {
    create?: XOR<TaxonomyCreateWithoutPlantInput, TaxonomyUncheckedCreateWithoutPlantInput>
    connectOrCreate?: TaxonomyCreateOrConnectWithoutPlantInput
    upsert?: TaxonomyUpsertWithoutPlantInput
    connect?: TaxonomyWhereUniqueInput
    update?: XOR<XOR<TaxonomyUpdateToOneWithWhereWithoutPlantInput, TaxonomyUpdateWithoutPlantInput>, TaxonomyUncheckedUpdateWithoutPlantInput>
  }

  export type PestsUpdateManyWithoutPlantsNestedInput = {
    create?: XOR<PestsCreateWithoutPlantsInput, PestsUncheckedCreateWithoutPlantsInput> | PestsCreateWithoutPlantsInput[] | PestsUncheckedCreateWithoutPlantsInput[]
    connectOrCreate?: PestsCreateOrConnectWithoutPlantsInput | PestsCreateOrConnectWithoutPlantsInput[]
    upsert?: PestsUpsertWithWhereUniqueWithoutPlantsInput | PestsUpsertWithWhereUniqueWithoutPlantsInput[]
    set?: PestsWhereUniqueInput | PestsWhereUniqueInput[]
    disconnect?: PestsWhereUniqueInput | PestsWhereUniqueInput[]
    delete?: PestsWhereUniqueInput | PestsWhereUniqueInput[]
    connect?: PestsWhereUniqueInput | PestsWhereUniqueInput[]
    update?: PestsUpdateWithWhereUniqueWithoutPlantsInput | PestsUpdateWithWhereUniqueWithoutPlantsInput[]
    updateMany?: PestsUpdateManyWithWhereWithoutPlantsInput | PestsUpdateManyWithWhereWithoutPlantsInput[]
    deleteMany?: PestsScalarWhereInput | PestsScalarWhereInput[]
  }

  export type BlightsUpdateManyWithoutPlantsNestedInput = {
    create?: XOR<BlightsCreateWithoutPlantsInput, BlightsUncheckedCreateWithoutPlantsInput> | BlightsCreateWithoutPlantsInput[] | BlightsUncheckedCreateWithoutPlantsInput[]
    connectOrCreate?: BlightsCreateOrConnectWithoutPlantsInput | BlightsCreateOrConnectWithoutPlantsInput[]
    upsert?: BlightsUpsertWithWhereUniqueWithoutPlantsInput | BlightsUpsertWithWhereUniqueWithoutPlantsInput[]
    set?: BlightsWhereUniqueInput | BlightsWhereUniqueInput[]
    disconnect?: BlightsWhereUniqueInput | BlightsWhereUniqueInput[]
    delete?: BlightsWhereUniqueInput | BlightsWhereUniqueInput[]
    connect?: BlightsWhereUniqueInput | BlightsWhereUniqueInput[]
    update?: BlightsUpdateWithWhereUniqueWithoutPlantsInput | BlightsUpdateWithWhereUniqueWithoutPlantsInput[]
    updateMany?: BlightsUpdateManyWithWhereWithoutPlantsInput | BlightsUpdateManyWithWhereWithoutPlantsInput[]
    deleteMany?: BlightsScalarWhereInput | BlightsScalarWhereInput[]
  }

  export type PlantOfDayUpdateOneWithoutPlantNestedInput = {
    create?: XOR<PlantOfDayCreateWithoutPlantInput, PlantOfDayUncheckedCreateWithoutPlantInput>
    connectOrCreate?: PlantOfDayCreateOrConnectWithoutPlantInput
    upsert?: PlantOfDayUpsertWithoutPlantInput
    disconnect?: PlantOfDayWhereInput | boolean
    delete?: PlantOfDayWhereInput | boolean
    connect?: PlantOfDayWhereUniqueInput
    update?: XOR<XOR<PlantOfDayUpdateToOneWithWhereWithoutPlantInput, PlantOfDayUpdateWithoutPlantInput>, PlantOfDayUncheckedUpdateWithoutPlantInput>
  }

  export type ViewsUpdateOneWithoutPlantNestedInput = {
    create?: XOR<ViewsCreateWithoutPlantInput, ViewsUncheckedCreateWithoutPlantInput>
    connectOrCreate?: ViewsCreateOrConnectWithoutPlantInput
    upsert?: ViewsUpsertWithoutPlantInput
    disconnect?: ViewsWhereInput | boolean
    delete?: ViewsWhereInput | boolean
    connect?: ViewsWhereUniqueInput
    update?: XOR<XOR<ViewsUpdateToOneWithWhereWithoutPlantInput, ViewsUpdateWithoutPlantInput>, ViewsUncheckedUpdateWithoutPlantInput>
  }

  export type PestsUncheckedUpdateManyWithoutPlantsNestedInput = {
    create?: XOR<PestsCreateWithoutPlantsInput, PestsUncheckedCreateWithoutPlantsInput> | PestsCreateWithoutPlantsInput[] | PestsUncheckedCreateWithoutPlantsInput[]
    connectOrCreate?: PestsCreateOrConnectWithoutPlantsInput | PestsCreateOrConnectWithoutPlantsInput[]
    upsert?: PestsUpsertWithWhereUniqueWithoutPlantsInput | PestsUpsertWithWhereUniqueWithoutPlantsInput[]
    set?: PestsWhereUniqueInput | PestsWhereUniqueInput[]
    disconnect?: PestsWhereUniqueInput | PestsWhereUniqueInput[]
    delete?: PestsWhereUniqueInput | PestsWhereUniqueInput[]
    connect?: PestsWhereUniqueInput | PestsWhereUniqueInput[]
    update?: PestsUpdateWithWhereUniqueWithoutPlantsInput | PestsUpdateWithWhereUniqueWithoutPlantsInput[]
    updateMany?: PestsUpdateManyWithWhereWithoutPlantsInput | PestsUpdateManyWithWhereWithoutPlantsInput[]
    deleteMany?: PestsScalarWhereInput | PestsScalarWhereInput[]
  }

  export type BlightsUncheckedUpdateManyWithoutPlantsNestedInput = {
    create?: XOR<BlightsCreateWithoutPlantsInput, BlightsUncheckedCreateWithoutPlantsInput> | BlightsCreateWithoutPlantsInput[] | BlightsUncheckedCreateWithoutPlantsInput[]
    connectOrCreate?: BlightsCreateOrConnectWithoutPlantsInput | BlightsCreateOrConnectWithoutPlantsInput[]
    upsert?: BlightsUpsertWithWhereUniqueWithoutPlantsInput | BlightsUpsertWithWhereUniqueWithoutPlantsInput[]
    set?: BlightsWhereUniqueInput | BlightsWhereUniqueInput[]
    disconnect?: BlightsWhereUniqueInput | BlightsWhereUniqueInput[]
    delete?: BlightsWhereUniqueInput | BlightsWhereUniqueInput[]
    connect?: BlightsWhereUniqueInput | BlightsWhereUniqueInput[]
    update?: BlightsUpdateWithWhereUniqueWithoutPlantsInput | BlightsUpdateWithWhereUniqueWithoutPlantsInput[]
    updateMany?: BlightsUpdateManyWithWhereWithoutPlantsInput | BlightsUpdateManyWithWhereWithoutPlantsInput[]
    deleteMany?: BlightsScalarWhereInput | BlightsScalarWhereInput[]
  }

  export type PlantOfDayUncheckedUpdateOneWithoutPlantNestedInput = {
    create?: XOR<PlantOfDayCreateWithoutPlantInput, PlantOfDayUncheckedCreateWithoutPlantInput>
    connectOrCreate?: PlantOfDayCreateOrConnectWithoutPlantInput
    upsert?: PlantOfDayUpsertWithoutPlantInput
    disconnect?: PlantOfDayWhereInput | boolean
    delete?: PlantOfDayWhereInput | boolean
    connect?: PlantOfDayWhereUniqueInput
    update?: XOR<XOR<PlantOfDayUpdateToOneWithWhereWithoutPlantInput, PlantOfDayUpdateWithoutPlantInput>, PlantOfDayUncheckedUpdateWithoutPlantInput>
  }

  export type PestsCreatesynonymsInput = {
    set: string[]
  }

  export type PestsCreateimgsInput = {
    set: string[]
  }

  export type TaxonomyCreateNestedOneWithoutPestInput = {
    create?: XOR<TaxonomyCreateWithoutPestInput, TaxonomyUncheckedCreateWithoutPestInput>
    connectOrCreate?: TaxonomyCreateOrConnectWithoutPestInput
    connect?: TaxonomyWhereUniqueInput
  }

  export type PlantsCreateNestedManyWithoutPestsInput = {
    create?: XOR<PlantsCreateWithoutPestsInput, PlantsUncheckedCreateWithoutPestsInput> | PlantsCreateWithoutPestsInput[] | PlantsUncheckedCreateWithoutPestsInput[]
    connectOrCreate?: PlantsCreateOrConnectWithoutPestsInput | PlantsCreateOrConnectWithoutPestsInput[]
    connect?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
  }

  export type PestisidesCreateNestedManyWithoutPestsInput = {
    create?: XOR<PestisidesCreateWithoutPestsInput, PestisidesUncheckedCreateWithoutPestsInput> | PestisidesCreateWithoutPestsInput[] | PestisidesUncheckedCreateWithoutPestsInput[]
    connectOrCreate?: PestisidesCreateOrConnectWithoutPestsInput | PestisidesCreateOrConnectWithoutPestsInput[]
    connect?: PestisidesWhereUniqueInput | PestisidesWhereUniqueInput[]
  }

  export type PlantsUncheckedCreateNestedManyWithoutPestsInput = {
    create?: XOR<PlantsCreateWithoutPestsInput, PlantsUncheckedCreateWithoutPestsInput> | PlantsCreateWithoutPestsInput[] | PlantsUncheckedCreateWithoutPestsInput[]
    connectOrCreate?: PlantsCreateOrConnectWithoutPestsInput | PlantsCreateOrConnectWithoutPestsInput[]
    connect?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
  }

  export type PestisidesUncheckedCreateNestedManyWithoutPestsInput = {
    create?: XOR<PestisidesCreateWithoutPestsInput, PestisidesUncheckedCreateWithoutPestsInput> | PestisidesCreateWithoutPestsInput[] | PestisidesUncheckedCreateWithoutPestsInput[]
    connectOrCreate?: PestisidesCreateOrConnectWithoutPestsInput | PestisidesCreateOrConnectWithoutPestsInput[]
    connect?: PestisidesWhereUniqueInput | PestisidesWhereUniqueInput[]
  }

  export type PestsUpdatesynonymsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type PestsUpdateimgsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type TaxonomyUpdateOneRequiredWithoutPestNestedInput = {
    create?: XOR<TaxonomyCreateWithoutPestInput, TaxonomyUncheckedCreateWithoutPestInput>
    connectOrCreate?: TaxonomyCreateOrConnectWithoutPestInput
    upsert?: TaxonomyUpsertWithoutPestInput
    connect?: TaxonomyWhereUniqueInput
    update?: XOR<XOR<TaxonomyUpdateToOneWithWhereWithoutPestInput, TaxonomyUpdateWithoutPestInput>, TaxonomyUncheckedUpdateWithoutPestInput>
  }

  export type PlantsUpdateManyWithoutPestsNestedInput = {
    create?: XOR<PlantsCreateWithoutPestsInput, PlantsUncheckedCreateWithoutPestsInput> | PlantsCreateWithoutPestsInput[] | PlantsUncheckedCreateWithoutPestsInput[]
    connectOrCreate?: PlantsCreateOrConnectWithoutPestsInput | PlantsCreateOrConnectWithoutPestsInput[]
    upsert?: PlantsUpsertWithWhereUniqueWithoutPestsInput | PlantsUpsertWithWhereUniqueWithoutPestsInput[]
    set?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    disconnect?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    delete?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    connect?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    update?: PlantsUpdateWithWhereUniqueWithoutPestsInput | PlantsUpdateWithWhereUniqueWithoutPestsInput[]
    updateMany?: PlantsUpdateManyWithWhereWithoutPestsInput | PlantsUpdateManyWithWhereWithoutPestsInput[]
    deleteMany?: PlantsScalarWhereInput | PlantsScalarWhereInput[]
  }

  export type PestisidesUpdateManyWithoutPestsNestedInput = {
    create?: XOR<PestisidesCreateWithoutPestsInput, PestisidesUncheckedCreateWithoutPestsInput> | PestisidesCreateWithoutPestsInput[] | PestisidesUncheckedCreateWithoutPestsInput[]
    connectOrCreate?: PestisidesCreateOrConnectWithoutPestsInput | PestisidesCreateOrConnectWithoutPestsInput[]
    upsert?: PestisidesUpsertWithWhereUniqueWithoutPestsInput | PestisidesUpsertWithWhereUniqueWithoutPestsInput[]
    set?: PestisidesWhereUniqueInput | PestisidesWhereUniqueInput[]
    disconnect?: PestisidesWhereUniqueInput | PestisidesWhereUniqueInput[]
    delete?: PestisidesWhereUniqueInput | PestisidesWhereUniqueInput[]
    connect?: PestisidesWhereUniqueInput | PestisidesWhereUniqueInput[]
    update?: PestisidesUpdateWithWhereUniqueWithoutPestsInput | PestisidesUpdateWithWhereUniqueWithoutPestsInput[]
    updateMany?: PestisidesUpdateManyWithWhereWithoutPestsInput | PestisidesUpdateManyWithWhereWithoutPestsInput[]
    deleteMany?: PestisidesScalarWhereInput | PestisidesScalarWhereInput[]
  }

  export type PlantsUncheckedUpdateManyWithoutPestsNestedInput = {
    create?: XOR<PlantsCreateWithoutPestsInput, PlantsUncheckedCreateWithoutPestsInput> | PlantsCreateWithoutPestsInput[] | PlantsUncheckedCreateWithoutPestsInput[]
    connectOrCreate?: PlantsCreateOrConnectWithoutPestsInput | PlantsCreateOrConnectWithoutPestsInput[]
    upsert?: PlantsUpsertWithWhereUniqueWithoutPestsInput | PlantsUpsertWithWhereUniqueWithoutPestsInput[]
    set?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    disconnect?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    delete?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    connect?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    update?: PlantsUpdateWithWhereUniqueWithoutPestsInput | PlantsUpdateWithWhereUniqueWithoutPestsInput[]
    updateMany?: PlantsUpdateManyWithWhereWithoutPestsInput | PlantsUpdateManyWithWhereWithoutPestsInput[]
    deleteMany?: PlantsScalarWhereInput | PlantsScalarWhereInput[]
  }

  export type PestisidesUncheckedUpdateManyWithoutPestsNestedInput = {
    create?: XOR<PestisidesCreateWithoutPestsInput, PestisidesUncheckedCreateWithoutPestsInput> | PestisidesCreateWithoutPestsInput[] | PestisidesUncheckedCreateWithoutPestsInput[]
    connectOrCreate?: PestisidesCreateOrConnectWithoutPestsInput | PestisidesCreateOrConnectWithoutPestsInput[]
    upsert?: PestisidesUpsertWithWhereUniqueWithoutPestsInput | PestisidesUpsertWithWhereUniqueWithoutPestsInput[]
    set?: PestisidesWhereUniqueInput | PestisidesWhereUniqueInput[]
    disconnect?: PestisidesWhereUniqueInput | PestisidesWhereUniqueInput[]
    delete?: PestisidesWhereUniqueInput | PestisidesWhereUniqueInput[]
    connect?: PestisidesWhereUniqueInput | PestisidesWhereUniqueInput[]
    update?: PestisidesUpdateWithWhereUniqueWithoutPestsInput | PestisidesUpdateWithWhereUniqueWithoutPestsInput[]
    updateMany?: PestisidesUpdateManyWithWhereWithoutPestsInput | PestisidesUpdateManyWithWhereWithoutPestsInput[]
    deleteMany?: PestisidesScalarWhereInput | PestisidesScalarWhereInput[]
  }

  export type BlightsCreatesynonymsInput = {
    set: string[]
  }

  export type BlightsCreateimgsInput = {
    set: string[]
  }

  export type TaxonomyCreateNestedOneWithoutBlightInput = {
    create?: XOR<TaxonomyCreateWithoutBlightInput, TaxonomyUncheckedCreateWithoutBlightInput>
    connectOrCreate?: TaxonomyCreateOrConnectWithoutBlightInput
    connect?: TaxonomyWhereUniqueInput
  }

  export type PlantsCreateNestedManyWithoutBlightsInput = {
    create?: XOR<PlantsCreateWithoutBlightsInput, PlantsUncheckedCreateWithoutBlightsInput> | PlantsCreateWithoutBlightsInput[] | PlantsUncheckedCreateWithoutBlightsInput[]
    connectOrCreate?: PlantsCreateOrConnectWithoutBlightsInput | PlantsCreateOrConnectWithoutBlightsInput[]
    connect?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
  }

  export type PestisidesCreateNestedManyWithoutBlightsInput = {
    create?: XOR<PestisidesCreateWithoutBlightsInput, PestisidesUncheckedCreateWithoutBlightsInput> | PestisidesCreateWithoutBlightsInput[] | PestisidesUncheckedCreateWithoutBlightsInput[]
    connectOrCreate?: PestisidesCreateOrConnectWithoutBlightsInput | PestisidesCreateOrConnectWithoutBlightsInput[]
    connect?: PestisidesWhereUniqueInput | PestisidesWhereUniqueInput[]
  }

  export type PlantsUncheckedCreateNestedManyWithoutBlightsInput = {
    create?: XOR<PlantsCreateWithoutBlightsInput, PlantsUncheckedCreateWithoutBlightsInput> | PlantsCreateWithoutBlightsInput[] | PlantsUncheckedCreateWithoutBlightsInput[]
    connectOrCreate?: PlantsCreateOrConnectWithoutBlightsInput | PlantsCreateOrConnectWithoutBlightsInput[]
    connect?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
  }

  export type PestisidesUncheckedCreateNestedManyWithoutBlightsInput = {
    create?: XOR<PestisidesCreateWithoutBlightsInput, PestisidesUncheckedCreateWithoutBlightsInput> | PestisidesCreateWithoutBlightsInput[] | PestisidesUncheckedCreateWithoutBlightsInput[]
    connectOrCreate?: PestisidesCreateOrConnectWithoutBlightsInput | PestisidesCreateOrConnectWithoutBlightsInput[]
    connect?: PestisidesWhereUniqueInput | PestisidesWhereUniqueInput[]
  }

  export type BlightsUpdatesynonymsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type BlightsUpdateimgsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type TaxonomyUpdateOneRequiredWithoutBlightNestedInput = {
    create?: XOR<TaxonomyCreateWithoutBlightInput, TaxonomyUncheckedCreateWithoutBlightInput>
    connectOrCreate?: TaxonomyCreateOrConnectWithoutBlightInput
    upsert?: TaxonomyUpsertWithoutBlightInput
    connect?: TaxonomyWhereUniqueInput
    update?: XOR<XOR<TaxonomyUpdateToOneWithWhereWithoutBlightInput, TaxonomyUpdateWithoutBlightInput>, TaxonomyUncheckedUpdateWithoutBlightInput>
  }

  export type PlantsUpdateManyWithoutBlightsNestedInput = {
    create?: XOR<PlantsCreateWithoutBlightsInput, PlantsUncheckedCreateWithoutBlightsInput> | PlantsCreateWithoutBlightsInput[] | PlantsUncheckedCreateWithoutBlightsInput[]
    connectOrCreate?: PlantsCreateOrConnectWithoutBlightsInput | PlantsCreateOrConnectWithoutBlightsInput[]
    upsert?: PlantsUpsertWithWhereUniqueWithoutBlightsInput | PlantsUpsertWithWhereUniqueWithoutBlightsInput[]
    set?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    disconnect?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    delete?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    connect?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    update?: PlantsUpdateWithWhereUniqueWithoutBlightsInput | PlantsUpdateWithWhereUniqueWithoutBlightsInput[]
    updateMany?: PlantsUpdateManyWithWhereWithoutBlightsInput | PlantsUpdateManyWithWhereWithoutBlightsInput[]
    deleteMany?: PlantsScalarWhereInput | PlantsScalarWhereInput[]
  }

  export type PestisidesUpdateManyWithoutBlightsNestedInput = {
    create?: XOR<PestisidesCreateWithoutBlightsInput, PestisidesUncheckedCreateWithoutBlightsInput> | PestisidesCreateWithoutBlightsInput[] | PestisidesUncheckedCreateWithoutBlightsInput[]
    connectOrCreate?: PestisidesCreateOrConnectWithoutBlightsInput | PestisidesCreateOrConnectWithoutBlightsInput[]
    upsert?: PestisidesUpsertWithWhereUniqueWithoutBlightsInput | PestisidesUpsertWithWhereUniqueWithoutBlightsInput[]
    set?: PestisidesWhereUniqueInput | PestisidesWhereUniqueInput[]
    disconnect?: PestisidesWhereUniqueInput | PestisidesWhereUniqueInput[]
    delete?: PestisidesWhereUniqueInput | PestisidesWhereUniqueInput[]
    connect?: PestisidesWhereUniqueInput | PestisidesWhereUniqueInput[]
    update?: PestisidesUpdateWithWhereUniqueWithoutBlightsInput | PestisidesUpdateWithWhereUniqueWithoutBlightsInput[]
    updateMany?: PestisidesUpdateManyWithWhereWithoutBlightsInput | PestisidesUpdateManyWithWhereWithoutBlightsInput[]
    deleteMany?: PestisidesScalarWhereInput | PestisidesScalarWhereInput[]
  }

  export type PlantsUncheckedUpdateManyWithoutBlightsNestedInput = {
    create?: XOR<PlantsCreateWithoutBlightsInput, PlantsUncheckedCreateWithoutBlightsInput> | PlantsCreateWithoutBlightsInput[] | PlantsUncheckedCreateWithoutBlightsInput[]
    connectOrCreate?: PlantsCreateOrConnectWithoutBlightsInput | PlantsCreateOrConnectWithoutBlightsInput[]
    upsert?: PlantsUpsertWithWhereUniqueWithoutBlightsInput | PlantsUpsertWithWhereUniqueWithoutBlightsInput[]
    set?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    disconnect?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    delete?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    connect?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    update?: PlantsUpdateWithWhereUniqueWithoutBlightsInput | PlantsUpdateWithWhereUniqueWithoutBlightsInput[]
    updateMany?: PlantsUpdateManyWithWhereWithoutBlightsInput | PlantsUpdateManyWithWhereWithoutBlightsInput[]
    deleteMany?: PlantsScalarWhereInput | PlantsScalarWhereInput[]
  }

  export type PestisidesUncheckedUpdateManyWithoutBlightsNestedInput = {
    create?: XOR<PestisidesCreateWithoutBlightsInput, PestisidesUncheckedCreateWithoutBlightsInput> | PestisidesCreateWithoutBlightsInput[] | PestisidesUncheckedCreateWithoutBlightsInput[]
    connectOrCreate?: PestisidesCreateOrConnectWithoutBlightsInput | PestisidesCreateOrConnectWithoutBlightsInput[]
    upsert?: PestisidesUpsertWithWhereUniqueWithoutBlightsInput | PestisidesUpsertWithWhereUniqueWithoutBlightsInput[]
    set?: PestisidesWhereUniqueInput | PestisidesWhereUniqueInput[]
    disconnect?: PestisidesWhereUniqueInput | PestisidesWhereUniqueInput[]
    delete?: PestisidesWhereUniqueInput | PestisidesWhereUniqueInput[]
    connect?: PestisidesWhereUniqueInput | PestisidesWhereUniqueInput[]
    update?: PestisidesUpdateWithWhereUniqueWithoutBlightsInput | PestisidesUpdateWithWhereUniqueWithoutBlightsInput[]
    updateMany?: PestisidesUpdateManyWithWhereWithoutBlightsInput | PestisidesUpdateManyWithWhereWithoutBlightsInput[]
    deleteMany?: PestisidesScalarWhereInput | PestisidesScalarWhereInput[]
  }

  export type PestisidesCreatesynonymsInput = {
    set: string[]
  }

  export type PestsCreateNestedManyWithoutPestisidesInput = {
    create?: XOR<PestsCreateWithoutPestisidesInput, PestsUncheckedCreateWithoutPestisidesInput> | PestsCreateWithoutPestisidesInput[] | PestsUncheckedCreateWithoutPestisidesInput[]
    connectOrCreate?: PestsCreateOrConnectWithoutPestisidesInput | PestsCreateOrConnectWithoutPestisidesInput[]
    connect?: PestsWhereUniqueInput | PestsWhereUniqueInput[]
  }

  export type BlightsCreateNestedManyWithoutPestisidesInput = {
    create?: XOR<BlightsCreateWithoutPestisidesInput, BlightsUncheckedCreateWithoutPestisidesInput> | BlightsCreateWithoutPestisidesInput[] | BlightsUncheckedCreateWithoutPestisidesInput[]
    connectOrCreate?: BlightsCreateOrConnectWithoutPestisidesInput | BlightsCreateOrConnectWithoutPestisidesInput[]
    connect?: BlightsWhereUniqueInput | BlightsWhereUniqueInput[]
  }

  export type PestsUncheckedCreateNestedManyWithoutPestisidesInput = {
    create?: XOR<PestsCreateWithoutPestisidesInput, PestsUncheckedCreateWithoutPestisidesInput> | PestsCreateWithoutPestisidesInput[] | PestsUncheckedCreateWithoutPestisidesInput[]
    connectOrCreate?: PestsCreateOrConnectWithoutPestisidesInput | PestsCreateOrConnectWithoutPestisidesInput[]
    connect?: PestsWhereUniqueInput | PestsWhereUniqueInput[]
  }

  export type BlightsUncheckedCreateNestedManyWithoutPestisidesInput = {
    create?: XOR<BlightsCreateWithoutPestisidesInput, BlightsUncheckedCreateWithoutPestisidesInput> | BlightsCreateWithoutPestisidesInput[] | BlightsUncheckedCreateWithoutPestisidesInput[]
    connectOrCreate?: BlightsCreateOrConnectWithoutPestisidesInput | BlightsCreateOrConnectWithoutPestisidesInput[]
    connect?: BlightsWhereUniqueInput | BlightsWhereUniqueInput[]
  }

  export type PestisidesUpdatesynonymsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type PestsUpdateManyWithoutPestisidesNestedInput = {
    create?: XOR<PestsCreateWithoutPestisidesInput, PestsUncheckedCreateWithoutPestisidesInput> | PestsCreateWithoutPestisidesInput[] | PestsUncheckedCreateWithoutPestisidesInput[]
    connectOrCreate?: PestsCreateOrConnectWithoutPestisidesInput | PestsCreateOrConnectWithoutPestisidesInput[]
    upsert?: PestsUpsertWithWhereUniqueWithoutPestisidesInput | PestsUpsertWithWhereUniqueWithoutPestisidesInput[]
    set?: PestsWhereUniqueInput | PestsWhereUniqueInput[]
    disconnect?: PestsWhereUniqueInput | PestsWhereUniqueInput[]
    delete?: PestsWhereUniqueInput | PestsWhereUniqueInput[]
    connect?: PestsWhereUniqueInput | PestsWhereUniqueInput[]
    update?: PestsUpdateWithWhereUniqueWithoutPestisidesInput | PestsUpdateWithWhereUniqueWithoutPestisidesInput[]
    updateMany?: PestsUpdateManyWithWhereWithoutPestisidesInput | PestsUpdateManyWithWhereWithoutPestisidesInput[]
    deleteMany?: PestsScalarWhereInput | PestsScalarWhereInput[]
  }

  export type BlightsUpdateManyWithoutPestisidesNestedInput = {
    create?: XOR<BlightsCreateWithoutPestisidesInput, BlightsUncheckedCreateWithoutPestisidesInput> | BlightsCreateWithoutPestisidesInput[] | BlightsUncheckedCreateWithoutPestisidesInput[]
    connectOrCreate?: BlightsCreateOrConnectWithoutPestisidesInput | BlightsCreateOrConnectWithoutPestisidesInput[]
    upsert?: BlightsUpsertWithWhereUniqueWithoutPestisidesInput | BlightsUpsertWithWhereUniqueWithoutPestisidesInput[]
    set?: BlightsWhereUniqueInput | BlightsWhereUniqueInput[]
    disconnect?: BlightsWhereUniqueInput | BlightsWhereUniqueInput[]
    delete?: BlightsWhereUniqueInput | BlightsWhereUniqueInput[]
    connect?: BlightsWhereUniqueInput | BlightsWhereUniqueInput[]
    update?: BlightsUpdateWithWhereUniqueWithoutPestisidesInput | BlightsUpdateWithWhereUniqueWithoutPestisidesInput[]
    updateMany?: BlightsUpdateManyWithWhereWithoutPestisidesInput | BlightsUpdateManyWithWhereWithoutPestisidesInput[]
    deleteMany?: BlightsScalarWhereInput | BlightsScalarWhereInput[]
  }

  export type PestsUncheckedUpdateManyWithoutPestisidesNestedInput = {
    create?: XOR<PestsCreateWithoutPestisidesInput, PestsUncheckedCreateWithoutPestisidesInput> | PestsCreateWithoutPestisidesInput[] | PestsUncheckedCreateWithoutPestisidesInput[]
    connectOrCreate?: PestsCreateOrConnectWithoutPestisidesInput | PestsCreateOrConnectWithoutPestisidesInput[]
    upsert?: PestsUpsertWithWhereUniqueWithoutPestisidesInput | PestsUpsertWithWhereUniqueWithoutPestisidesInput[]
    set?: PestsWhereUniqueInput | PestsWhereUniqueInput[]
    disconnect?: PestsWhereUniqueInput | PestsWhereUniqueInput[]
    delete?: PestsWhereUniqueInput | PestsWhereUniqueInput[]
    connect?: PestsWhereUniqueInput | PestsWhereUniqueInput[]
    update?: PestsUpdateWithWhereUniqueWithoutPestisidesInput | PestsUpdateWithWhereUniqueWithoutPestisidesInput[]
    updateMany?: PestsUpdateManyWithWhereWithoutPestisidesInput | PestsUpdateManyWithWhereWithoutPestisidesInput[]
    deleteMany?: PestsScalarWhereInput | PestsScalarWhereInput[]
  }

  export type BlightsUncheckedUpdateManyWithoutPestisidesNestedInput = {
    create?: XOR<BlightsCreateWithoutPestisidesInput, BlightsUncheckedCreateWithoutPestisidesInput> | BlightsCreateWithoutPestisidesInput[] | BlightsUncheckedCreateWithoutPestisidesInput[]
    connectOrCreate?: BlightsCreateOrConnectWithoutPestisidesInput | BlightsCreateOrConnectWithoutPestisidesInput[]
    upsert?: BlightsUpsertWithWhereUniqueWithoutPestisidesInput | BlightsUpsertWithWhereUniqueWithoutPestisidesInput[]
    set?: BlightsWhereUniqueInput | BlightsWhereUniqueInput[]
    disconnect?: BlightsWhereUniqueInput | BlightsWhereUniqueInput[]
    delete?: BlightsWhereUniqueInput | BlightsWhereUniqueInput[]
    connect?: BlightsWhereUniqueInput | BlightsWhereUniqueInput[]
    update?: BlightsUpdateWithWhereUniqueWithoutPestisidesInput | BlightsUpdateWithWhereUniqueWithoutPestisidesInput[]
    updateMany?: BlightsUpdateManyWithWhereWithoutPestisidesInput | BlightsUpdateManyWithWhereWithoutPestisidesInput[]
    deleteMany?: BlightsScalarWhereInput | BlightsScalarWhereInput[]
  }

  export type PlantsCreateNestedOneWithoutTaxonomyInput = {
    create?: XOR<PlantsCreateWithoutTaxonomyInput, PlantsUncheckedCreateWithoutTaxonomyInput>
    connectOrCreate?: PlantsCreateOrConnectWithoutTaxonomyInput
    connect?: PlantsWhereUniqueInput
  }

  export type PestsCreateNestedOneWithoutTaxonomyInput = {
    create?: XOR<PestsCreateWithoutTaxonomyInput, PestsUncheckedCreateWithoutTaxonomyInput>
    connectOrCreate?: PestsCreateOrConnectWithoutTaxonomyInput
    connect?: PestsWhereUniqueInput
  }

  export type BlightsCreateNestedOneWithoutTaxonomyInput = {
    create?: XOR<BlightsCreateWithoutTaxonomyInput, BlightsUncheckedCreateWithoutTaxonomyInput>
    connectOrCreate?: BlightsCreateOrConnectWithoutTaxonomyInput
    connect?: BlightsWhereUniqueInput
  }

  export type PlantsUncheckedCreateNestedOneWithoutTaxonomyInput = {
    create?: XOR<PlantsCreateWithoutTaxonomyInput, PlantsUncheckedCreateWithoutTaxonomyInput>
    connectOrCreate?: PlantsCreateOrConnectWithoutTaxonomyInput
    connect?: PlantsWhereUniqueInput
  }

  export type PestsUncheckedCreateNestedOneWithoutTaxonomyInput = {
    create?: XOR<PestsCreateWithoutTaxonomyInput, PestsUncheckedCreateWithoutTaxonomyInput>
    connectOrCreate?: PestsCreateOrConnectWithoutTaxonomyInput
    connect?: PestsWhereUniqueInput
  }

  export type BlightsUncheckedCreateNestedOneWithoutTaxonomyInput = {
    create?: XOR<BlightsCreateWithoutTaxonomyInput, BlightsUncheckedCreateWithoutTaxonomyInput>
    connectOrCreate?: BlightsCreateOrConnectWithoutTaxonomyInput
    connect?: BlightsWhereUniqueInput
  }

  export type PlantsUpdateOneWithoutTaxonomyNestedInput = {
    create?: XOR<PlantsCreateWithoutTaxonomyInput, PlantsUncheckedCreateWithoutTaxonomyInput>
    connectOrCreate?: PlantsCreateOrConnectWithoutTaxonomyInput
    upsert?: PlantsUpsertWithoutTaxonomyInput
    disconnect?: PlantsWhereInput | boolean
    delete?: PlantsWhereInput | boolean
    connect?: PlantsWhereUniqueInput
    update?: XOR<XOR<PlantsUpdateToOneWithWhereWithoutTaxonomyInput, PlantsUpdateWithoutTaxonomyInput>, PlantsUncheckedUpdateWithoutTaxonomyInput>
  }

  export type PestsUpdateOneWithoutTaxonomyNestedInput = {
    create?: XOR<PestsCreateWithoutTaxonomyInput, PestsUncheckedCreateWithoutTaxonomyInput>
    connectOrCreate?: PestsCreateOrConnectWithoutTaxonomyInput
    upsert?: PestsUpsertWithoutTaxonomyInput
    disconnect?: PestsWhereInput | boolean
    delete?: PestsWhereInput | boolean
    connect?: PestsWhereUniqueInput
    update?: XOR<XOR<PestsUpdateToOneWithWhereWithoutTaxonomyInput, PestsUpdateWithoutTaxonomyInput>, PestsUncheckedUpdateWithoutTaxonomyInput>
  }

  export type BlightsUpdateOneWithoutTaxonomyNestedInput = {
    create?: XOR<BlightsCreateWithoutTaxonomyInput, BlightsUncheckedCreateWithoutTaxonomyInput>
    connectOrCreate?: BlightsCreateOrConnectWithoutTaxonomyInput
    upsert?: BlightsUpsertWithoutTaxonomyInput
    disconnect?: BlightsWhereInput | boolean
    delete?: BlightsWhereInput | boolean
    connect?: BlightsWhereUniqueInput
    update?: XOR<XOR<BlightsUpdateToOneWithWhereWithoutTaxonomyInput, BlightsUpdateWithoutTaxonomyInput>, BlightsUncheckedUpdateWithoutTaxonomyInput>
  }

  export type PlantsUncheckedUpdateOneWithoutTaxonomyNestedInput = {
    create?: XOR<PlantsCreateWithoutTaxonomyInput, PlantsUncheckedCreateWithoutTaxonomyInput>
    connectOrCreate?: PlantsCreateOrConnectWithoutTaxonomyInput
    upsert?: PlantsUpsertWithoutTaxonomyInput
    disconnect?: PlantsWhereInput | boolean
    delete?: PlantsWhereInput | boolean
    connect?: PlantsWhereUniqueInput
    update?: XOR<XOR<PlantsUpdateToOneWithWhereWithoutTaxonomyInput, PlantsUpdateWithoutTaxonomyInput>, PlantsUncheckedUpdateWithoutTaxonomyInput>
  }

  export type PestsUncheckedUpdateOneWithoutTaxonomyNestedInput = {
    create?: XOR<PestsCreateWithoutTaxonomyInput, PestsUncheckedCreateWithoutTaxonomyInput>
    connectOrCreate?: PestsCreateOrConnectWithoutTaxonomyInput
    upsert?: PestsUpsertWithoutTaxonomyInput
    disconnect?: PestsWhereInput | boolean
    delete?: PestsWhereInput | boolean
    connect?: PestsWhereUniqueInput
    update?: XOR<XOR<PestsUpdateToOneWithWhereWithoutTaxonomyInput, PestsUpdateWithoutTaxonomyInput>, PestsUncheckedUpdateWithoutTaxonomyInput>
  }

  export type BlightsUncheckedUpdateOneWithoutTaxonomyNestedInput = {
    create?: XOR<BlightsCreateWithoutTaxonomyInput, BlightsUncheckedCreateWithoutTaxonomyInput>
    connectOrCreate?: BlightsCreateOrConnectWithoutTaxonomyInput
    upsert?: BlightsUpsertWithoutTaxonomyInput
    disconnect?: BlightsWhereInput | boolean
    delete?: BlightsWhereInput | boolean
    connect?: BlightsWhereUniqueInput
    update?: XOR<XOR<BlightsUpdateToOneWithWhereWithoutTaxonomyInput, BlightsUpdateWithoutTaxonomyInput>, BlightsUncheckedUpdateWithoutTaxonomyInput>
  }

  export type NullableEnumTypeFieldUpdateOperationsInput = {
    set?: $Enums.Type | null
  }

  export type PlantsCreateNestedOneWithoutPlantOfDayInput = {
    create?: XOR<PlantsCreateWithoutPlantOfDayInput, PlantsUncheckedCreateWithoutPlantOfDayInput>
    connectOrCreate?: PlantsCreateOrConnectWithoutPlantOfDayInput
    connect?: PlantsWhereUniqueInput
  }

  export type PlantsUpdateOneRequiredWithoutPlantOfDayNestedInput = {
    create?: XOR<PlantsCreateWithoutPlantOfDayInput, PlantsUncheckedCreateWithoutPlantOfDayInput>
    connectOrCreate?: PlantsCreateOrConnectWithoutPlantOfDayInput
    upsert?: PlantsUpsertWithoutPlantOfDayInput
    connect?: PlantsWhereUniqueInput
    update?: XOR<XOR<PlantsUpdateToOneWithWhereWithoutPlantOfDayInput, PlantsUpdateWithoutPlantOfDayInput>, PlantsUncheckedUpdateWithoutPlantOfDayInput>
  }

  export type PlantsCreateNestedManyWithoutViewsInput = {
    create?: XOR<PlantsCreateWithoutViewsInput, PlantsUncheckedCreateWithoutViewsInput> | PlantsCreateWithoutViewsInput[] | PlantsUncheckedCreateWithoutViewsInput[]
    connectOrCreate?: PlantsCreateOrConnectWithoutViewsInput | PlantsCreateOrConnectWithoutViewsInput[]
    createMany?: PlantsCreateManyViewsInputEnvelope
    connect?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
  }

  export type PlantsUncheckedCreateNestedManyWithoutViewsInput = {
    create?: XOR<PlantsCreateWithoutViewsInput, PlantsUncheckedCreateWithoutViewsInput> | PlantsCreateWithoutViewsInput[] | PlantsUncheckedCreateWithoutViewsInput[]
    connectOrCreate?: PlantsCreateOrConnectWithoutViewsInput | PlantsCreateOrConnectWithoutViewsInput[]
    createMany?: PlantsCreateManyViewsInputEnvelope
    connect?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type PlantsUpdateManyWithoutViewsNestedInput = {
    create?: XOR<PlantsCreateWithoutViewsInput, PlantsUncheckedCreateWithoutViewsInput> | PlantsCreateWithoutViewsInput[] | PlantsUncheckedCreateWithoutViewsInput[]
    connectOrCreate?: PlantsCreateOrConnectWithoutViewsInput | PlantsCreateOrConnectWithoutViewsInput[]
    upsert?: PlantsUpsertWithWhereUniqueWithoutViewsInput | PlantsUpsertWithWhereUniqueWithoutViewsInput[]
    createMany?: PlantsCreateManyViewsInputEnvelope
    set?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    disconnect?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    delete?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    connect?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    update?: PlantsUpdateWithWhereUniqueWithoutViewsInput | PlantsUpdateWithWhereUniqueWithoutViewsInput[]
    updateMany?: PlantsUpdateManyWithWhereWithoutViewsInput | PlantsUpdateManyWithWhereWithoutViewsInput[]
    deleteMany?: PlantsScalarWhereInput | PlantsScalarWhereInput[]
  }

  export type PlantsUncheckedUpdateManyWithoutViewsNestedInput = {
    create?: XOR<PlantsCreateWithoutViewsInput, PlantsUncheckedCreateWithoutViewsInput> | PlantsCreateWithoutViewsInput[] | PlantsUncheckedCreateWithoutViewsInput[]
    connectOrCreate?: PlantsCreateOrConnectWithoutViewsInput | PlantsCreateOrConnectWithoutViewsInput[]
    upsert?: PlantsUpsertWithWhereUniqueWithoutViewsInput | PlantsUpsertWithWhereUniqueWithoutViewsInput[]
    createMany?: PlantsCreateManyViewsInputEnvelope
    set?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    disconnect?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    delete?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    connect?: PlantsWhereUniqueInput | PlantsWhereUniqueInput[]
    update?: PlantsUpdateWithWhereUniqueWithoutViewsInput | PlantsUpdateWithWhereUniqueWithoutViewsInput[]
    updateMany?: PlantsUpdateManyWithWhereWithoutViewsInput | PlantsUpdateManyWithWhereWithoutViewsInput[]
    deleteMany?: PlantsScalarWhereInput | PlantsScalarWhereInput[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumLevelNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Level | EnumLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.Level[] | ListEnumLevelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Level[] | ListEnumLevelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLevelNullableFilter<$PrismaModel> | $Enums.Level | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumLevelNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Level | EnumLevelFieldRefInput<$PrismaModel> | null
    in?: $Enums.Level[] | ListEnumLevelFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Level[] | ListEnumLevelFieldRefInput<$PrismaModel> | null
    not?: NestedEnumLevelNullableWithAggregatesFilter<$PrismaModel> | $Enums.Level | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumLevelNullableFilter<$PrismaModel>
    _max?: NestedEnumLevelNullableFilter<$PrismaModel>
  }

  export type NestedEnumTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTypeNullableFilter<$PrismaModel> | $Enums.Type | null
  }

  export type NestedEnumTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Type[] | ListEnumTypeFieldRefInput<$PrismaModel> | null
    not?: NestedEnumTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.Type | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumTypeNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type TaxonomyCreateWithoutPlantInput = {
    id?: string
    kingdom?: string | null
    phylum?: string | null
    class?: string | null
    order?: string | null
    family?: string | null
    genus?: string | null
    species?: string | null
    pest?: PestsCreateNestedOneWithoutTaxonomyInput
    blight?: BlightsCreateNestedOneWithoutTaxonomyInput
  }

  export type TaxonomyUncheckedCreateWithoutPlantInput = {
    id?: string
    kingdom?: string | null
    phylum?: string | null
    class?: string | null
    order?: string | null
    family?: string | null
    genus?: string | null
    species?: string | null
    pest?: PestsUncheckedCreateNestedOneWithoutTaxonomyInput
    blight?: BlightsUncheckedCreateNestedOneWithoutTaxonomyInput
  }

  export type TaxonomyCreateOrConnectWithoutPlantInput = {
    where: TaxonomyWhereUniqueInput
    create: XOR<TaxonomyCreateWithoutPlantInput, TaxonomyUncheckedCreateWithoutPlantInput>
  }

  export type PestsCreateWithoutPlantsInput = {
    id?: string
    common_name: string
    synonyms?: PestsCreatesynonymsInput | string[]
    scientific_name: string
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PestsCreateimgsInput | string[]
    taxonomy: TaxonomyCreateNestedOneWithoutPestInput
    pestisides?: PestisidesCreateNestedManyWithoutPestsInput
  }

  export type PestsUncheckedCreateWithoutPlantsInput = {
    id?: string
    common_name: string
    synonyms?: PestsCreatesynonymsInput | string[]
    scientific_name: string
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PestsCreateimgsInput | string[]
    taxonomyId: string
    pestisides?: PestisidesUncheckedCreateNestedManyWithoutPestsInput
  }

  export type PestsCreateOrConnectWithoutPlantsInput = {
    where: PestsWhereUniqueInput
    create: XOR<PestsCreateWithoutPlantsInput, PestsUncheckedCreateWithoutPlantsInput>
  }

  export type BlightsCreateWithoutPlantsInput = {
    id?: string
    common_name: string
    synonyms?: BlightsCreatesynonymsInput | string[]
    scientific_name: string
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: BlightsCreateimgsInput | string[]
    taxonomy: TaxonomyCreateNestedOneWithoutBlightInput
    pestisides?: PestisidesCreateNestedManyWithoutBlightsInput
  }

  export type BlightsUncheckedCreateWithoutPlantsInput = {
    id?: string
    common_name: string
    synonyms?: BlightsCreatesynonymsInput | string[]
    scientific_name: string
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: BlightsCreateimgsInput | string[]
    taxonomyId: string
    pestisides?: PestisidesUncheckedCreateNestedManyWithoutBlightsInput
  }

  export type BlightsCreateOrConnectWithoutPlantsInput = {
    where: BlightsWhereUniqueInput
    create: XOR<BlightsCreateWithoutPlantsInput, BlightsUncheckedCreateWithoutPlantsInput>
  }

  export type PlantOfDayCreateWithoutPlantInput = {
    id?: string
  }

  export type PlantOfDayUncheckedCreateWithoutPlantInput = {
    id?: string
  }

  export type PlantOfDayCreateOrConnectWithoutPlantInput = {
    where: PlantOfDayWhereUniqueInput
    create: XOR<PlantOfDayCreateWithoutPlantInput, PlantOfDayUncheckedCreateWithoutPlantInput>
  }

  export type ViewsCreateWithoutPlantInput = {
    id: number
    time?: Date | string | null
  }

  export type ViewsUncheckedCreateWithoutPlantInput = {
    id: number
    time?: Date | string | null
  }

  export type ViewsCreateOrConnectWithoutPlantInput = {
    where: ViewsWhereUniqueInput
    create: XOR<ViewsCreateWithoutPlantInput, ViewsUncheckedCreateWithoutPlantInput>
  }

  export type TaxonomyUpsertWithoutPlantInput = {
    update: XOR<TaxonomyUpdateWithoutPlantInput, TaxonomyUncheckedUpdateWithoutPlantInput>
    create: XOR<TaxonomyCreateWithoutPlantInput, TaxonomyUncheckedCreateWithoutPlantInput>
    where?: TaxonomyWhereInput
  }

  export type TaxonomyUpdateToOneWithWhereWithoutPlantInput = {
    where?: TaxonomyWhereInput
    data: XOR<TaxonomyUpdateWithoutPlantInput, TaxonomyUncheckedUpdateWithoutPlantInput>
  }

  export type TaxonomyUpdateWithoutPlantInput = {
    id?: StringFieldUpdateOperationsInput | string
    kingdom?: NullableStringFieldUpdateOperationsInput | string | null
    phylum?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    genus?: NullableStringFieldUpdateOperationsInput | string | null
    species?: NullableStringFieldUpdateOperationsInput | string | null
    pest?: PestsUpdateOneWithoutTaxonomyNestedInput
    blight?: BlightsUpdateOneWithoutTaxonomyNestedInput
  }

  export type TaxonomyUncheckedUpdateWithoutPlantInput = {
    id?: StringFieldUpdateOperationsInput | string
    kingdom?: NullableStringFieldUpdateOperationsInput | string | null
    phylum?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    genus?: NullableStringFieldUpdateOperationsInput | string | null
    species?: NullableStringFieldUpdateOperationsInput | string | null
    pest?: PestsUncheckedUpdateOneWithoutTaxonomyNestedInput
    blight?: BlightsUncheckedUpdateOneWithoutTaxonomyNestedInput
  }

  export type PestsUpsertWithWhereUniqueWithoutPlantsInput = {
    where: PestsWhereUniqueInput
    update: XOR<PestsUpdateWithoutPlantsInput, PestsUncheckedUpdateWithoutPlantsInput>
    create: XOR<PestsCreateWithoutPlantsInput, PestsUncheckedCreateWithoutPlantsInput>
  }

  export type PestsUpdateWithWhereUniqueWithoutPlantsInput = {
    where: PestsWhereUniqueInput
    data: XOR<PestsUpdateWithoutPlantsInput, PestsUncheckedUpdateWithoutPlantsInput>
  }

  export type PestsUpdateManyWithWhereWithoutPlantsInput = {
    where: PestsScalarWhereInput
    data: XOR<PestsUpdateManyMutationInput, PestsUncheckedUpdateManyWithoutPlantsInput>
  }

  export type PestsScalarWhereInput = {
    AND?: PestsScalarWhereInput | PestsScalarWhereInput[]
    OR?: PestsScalarWhereInput[]
    NOT?: PestsScalarWhereInput | PestsScalarWhereInput[]
    id?: StringFilter<"Pests"> | string
    common_name?: StringFilter<"Pests"> | string
    synonyms?: StringNullableListFilter<"Pests">
    scientific_name?: StringFilter<"Pests"> | string
    description?: StringNullableFilter<"Pests"> | string | null
    wikipedia?: StringNullableFilter<"Pests"> | string | null
    britannica?: StringNullableFilter<"Pests"> | string | null
    img?: StringNullableFilter<"Pests"> | string | null
    imgs?: StringNullableListFilter<"Pests">
    taxonomyId?: StringFilter<"Pests"> | string
  }

  export type BlightsUpsertWithWhereUniqueWithoutPlantsInput = {
    where: BlightsWhereUniqueInput
    update: XOR<BlightsUpdateWithoutPlantsInput, BlightsUncheckedUpdateWithoutPlantsInput>
    create: XOR<BlightsCreateWithoutPlantsInput, BlightsUncheckedCreateWithoutPlantsInput>
  }

  export type BlightsUpdateWithWhereUniqueWithoutPlantsInput = {
    where: BlightsWhereUniqueInput
    data: XOR<BlightsUpdateWithoutPlantsInput, BlightsUncheckedUpdateWithoutPlantsInput>
  }

  export type BlightsUpdateManyWithWhereWithoutPlantsInput = {
    where: BlightsScalarWhereInput
    data: XOR<BlightsUpdateManyMutationInput, BlightsUncheckedUpdateManyWithoutPlantsInput>
  }

  export type BlightsScalarWhereInput = {
    AND?: BlightsScalarWhereInput | BlightsScalarWhereInput[]
    OR?: BlightsScalarWhereInput[]
    NOT?: BlightsScalarWhereInput | BlightsScalarWhereInput[]
    id?: StringFilter<"Blights"> | string
    common_name?: StringFilter<"Blights"> | string
    synonyms?: StringNullableListFilter<"Blights">
    scientific_name?: StringFilter<"Blights"> | string
    description?: StringNullableFilter<"Blights"> | string | null
    wikipedia?: StringNullableFilter<"Blights"> | string | null
    britannica?: StringNullableFilter<"Blights"> | string | null
    img?: StringNullableFilter<"Blights"> | string | null
    imgs?: StringNullableListFilter<"Blights">
    taxonomyId?: StringFilter<"Blights"> | string
  }

  export type PlantOfDayUpsertWithoutPlantInput = {
    update: XOR<PlantOfDayUpdateWithoutPlantInput, PlantOfDayUncheckedUpdateWithoutPlantInput>
    create: XOR<PlantOfDayCreateWithoutPlantInput, PlantOfDayUncheckedCreateWithoutPlantInput>
    where?: PlantOfDayWhereInput
  }

  export type PlantOfDayUpdateToOneWithWhereWithoutPlantInput = {
    where?: PlantOfDayWhereInput
    data: XOR<PlantOfDayUpdateWithoutPlantInput, PlantOfDayUncheckedUpdateWithoutPlantInput>
  }

  export type PlantOfDayUpdateWithoutPlantInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type PlantOfDayUncheckedUpdateWithoutPlantInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ViewsUpsertWithoutPlantInput = {
    update: XOR<ViewsUpdateWithoutPlantInput, ViewsUncheckedUpdateWithoutPlantInput>
    create: XOR<ViewsCreateWithoutPlantInput, ViewsUncheckedCreateWithoutPlantInput>
    where?: ViewsWhereInput
  }

  export type ViewsUpdateToOneWithWhereWithoutPlantInput = {
    where?: ViewsWhereInput
    data: XOR<ViewsUpdateWithoutPlantInput, ViewsUncheckedUpdateWithoutPlantInput>
  }

  export type ViewsUpdateWithoutPlantInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ViewsUncheckedUpdateWithoutPlantInput = {
    id?: IntFieldUpdateOperationsInput | number
    time?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TaxonomyCreateWithoutPestInput = {
    id?: string
    kingdom?: string | null
    phylum?: string | null
    class?: string | null
    order?: string | null
    family?: string | null
    genus?: string | null
    species?: string | null
    plant?: PlantsCreateNestedOneWithoutTaxonomyInput
    blight?: BlightsCreateNestedOneWithoutTaxonomyInput
  }

  export type TaxonomyUncheckedCreateWithoutPestInput = {
    id?: string
    kingdom?: string | null
    phylum?: string | null
    class?: string | null
    order?: string | null
    family?: string | null
    genus?: string | null
    species?: string | null
    plant?: PlantsUncheckedCreateNestedOneWithoutTaxonomyInput
    blight?: BlightsUncheckedCreateNestedOneWithoutTaxonomyInput
  }

  export type TaxonomyCreateOrConnectWithoutPestInput = {
    where: TaxonomyWhereUniqueInput
    create: XOR<TaxonomyCreateWithoutPestInput, TaxonomyUncheckedCreateWithoutPestInput>
  }

  export type PlantsCreateWithoutPestsInput = {
    id?: string
    common_name: string
    scientific_name: string
    synonyms?: PlantsCreatesynonymsInput | string[]
    description?: string | null
    min_h?: number | null
    max_h?: number | null
    min_ph?: number | null
    max_ph?: number | null
    min_temp?: number | null
    max_temp?: number | null
    water?: $Enums.Level | null
    habit?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PlantsCreateimgsInput | string[]
    taxonomy: TaxonomyCreateNestedOneWithoutPlantInput
    blights?: BlightsCreateNestedManyWithoutPlantsInput
    PlantOfDay?: PlantOfDayCreateNestedOneWithoutPlantInput
    Views?: ViewsCreateNestedOneWithoutPlantInput
  }

  export type PlantsUncheckedCreateWithoutPestsInput = {
    id?: string
    common_name: string
    scientific_name: string
    synonyms?: PlantsCreatesynonymsInput | string[]
    description?: string | null
    min_h?: number | null
    max_h?: number | null
    min_ph?: number | null
    max_ph?: number | null
    min_temp?: number | null
    max_temp?: number | null
    water?: $Enums.Level | null
    habit?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PlantsCreateimgsInput | string[]
    taxonomyId: string
    viewsId?: number | null
    blights?: BlightsUncheckedCreateNestedManyWithoutPlantsInput
    PlantOfDay?: PlantOfDayUncheckedCreateNestedOneWithoutPlantInput
  }

  export type PlantsCreateOrConnectWithoutPestsInput = {
    where: PlantsWhereUniqueInput
    create: XOR<PlantsCreateWithoutPestsInput, PlantsUncheckedCreateWithoutPestsInput>
  }

  export type PestisidesCreateWithoutPestsInput = {
    id?: string
    common_name?: string | null
    synonyms?: PestisidesCreatesynonymsInput | string[]
    scientific_name?: string | null
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    blights?: BlightsCreateNestedManyWithoutPestisidesInput
  }

  export type PestisidesUncheckedCreateWithoutPestsInput = {
    id?: string
    common_name?: string | null
    synonyms?: PestisidesCreatesynonymsInput | string[]
    scientific_name?: string | null
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    blights?: BlightsUncheckedCreateNestedManyWithoutPestisidesInput
  }

  export type PestisidesCreateOrConnectWithoutPestsInput = {
    where: PestisidesWhereUniqueInput
    create: XOR<PestisidesCreateWithoutPestsInput, PestisidesUncheckedCreateWithoutPestsInput>
  }

  export type TaxonomyUpsertWithoutPestInput = {
    update: XOR<TaxonomyUpdateWithoutPestInput, TaxonomyUncheckedUpdateWithoutPestInput>
    create: XOR<TaxonomyCreateWithoutPestInput, TaxonomyUncheckedCreateWithoutPestInput>
    where?: TaxonomyWhereInput
  }

  export type TaxonomyUpdateToOneWithWhereWithoutPestInput = {
    where?: TaxonomyWhereInput
    data: XOR<TaxonomyUpdateWithoutPestInput, TaxonomyUncheckedUpdateWithoutPestInput>
  }

  export type TaxonomyUpdateWithoutPestInput = {
    id?: StringFieldUpdateOperationsInput | string
    kingdom?: NullableStringFieldUpdateOperationsInput | string | null
    phylum?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    genus?: NullableStringFieldUpdateOperationsInput | string | null
    species?: NullableStringFieldUpdateOperationsInput | string | null
    plant?: PlantsUpdateOneWithoutTaxonomyNestedInput
    blight?: BlightsUpdateOneWithoutTaxonomyNestedInput
  }

  export type TaxonomyUncheckedUpdateWithoutPestInput = {
    id?: StringFieldUpdateOperationsInput | string
    kingdom?: NullableStringFieldUpdateOperationsInput | string | null
    phylum?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    genus?: NullableStringFieldUpdateOperationsInput | string | null
    species?: NullableStringFieldUpdateOperationsInput | string | null
    plant?: PlantsUncheckedUpdateOneWithoutTaxonomyNestedInput
    blight?: BlightsUncheckedUpdateOneWithoutTaxonomyNestedInput
  }

  export type PlantsUpsertWithWhereUniqueWithoutPestsInput = {
    where: PlantsWhereUniqueInput
    update: XOR<PlantsUpdateWithoutPestsInput, PlantsUncheckedUpdateWithoutPestsInput>
    create: XOR<PlantsCreateWithoutPestsInput, PlantsUncheckedCreateWithoutPestsInput>
  }

  export type PlantsUpdateWithWhereUniqueWithoutPestsInput = {
    where: PlantsWhereUniqueInput
    data: XOR<PlantsUpdateWithoutPestsInput, PlantsUncheckedUpdateWithoutPestsInput>
  }

  export type PlantsUpdateManyWithWhereWithoutPestsInput = {
    where: PlantsScalarWhereInput
    data: XOR<PlantsUpdateManyMutationInput, PlantsUncheckedUpdateManyWithoutPestsInput>
  }

  export type PlantsScalarWhereInput = {
    AND?: PlantsScalarWhereInput | PlantsScalarWhereInput[]
    OR?: PlantsScalarWhereInput[]
    NOT?: PlantsScalarWhereInput | PlantsScalarWhereInput[]
    id?: StringFilter<"Plants"> | string
    common_name?: StringFilter<"Plants"> | string
    scientific_name?: StringFilter<"Plants"> | string
    synonyms?: StringNullableListFilter<"Plants">
    description?: StringNullableFilter<"Plants"> | string | null
    min_h?: IntNullableFilter<"Plants"> | number | null
    max_h?: IntNullableFilter<"Plants"> | number | null
    min_ph?: FloatNullableFilter<"Plants"> | number | null
    max_ph?: FloatNullableFilter<"Plants"> | number | null
    min_temp?: IntNullableFilter<"Plants"> | number | null
    max_temp?: IntNullableFilter<"Plants"> | number | null
    water?: EnumLevelNullableFilter<"Plants"> | $Enums.Level | null
    habit?: StringNullableFilter<"Plants"> | string | null
    wikipedia?: StringNullableFilter<"Plants"> | string | null
    britannica?: StringNullableFilter<"Plants"> | string | null
    img?: StringNullableFilter<"Plants"> | string | null
    imgs?: StringNullableListFilter<"Plants">
    taxonomyId?: StringFilter<"Plants"> | string
    viewsId?: IntNullableFilter<"Plants"> | number | null
  }

  export type PestisidesUpsertWithWhereUniqueWithoutPestsInput = {
    where: PestisidesWhereUniqueInput
    update: XOR<PestisidesUpdateWithoutPestsInput, PestisidesUncheckedUpdateWithoutPestsInput>
    create: XOR<PestisidesCreateWithoutPestsInput, PestisidesUncheckedCreateWithoutPestsInput>
  }

  export type PestisidesUpdateWithWhereUniqueWithoutPestsInput = {
    where: PestisidesWhereUniqueInput
    data: XOR<PestisidesUpdateWithoutPestsInput, PestisidesUncheckedUpdateWithoutPestsInput>
  }

  export type PestisidesUpdateManyWithWhereWithoutPestsInput = {
    where: PestisidesScalarWhereInput
    data: XOR<PestisidesUpdateManyMutationInput, PestisidesUncheckedUpdateManyWithoutPestsInput>
  }

  export type PestisidesScalarWhereInput = {
    AND?: PestisidesScalarWhereInput | PestisidesScalarWhereInput[]
    OR?: PestisidesScalarWhereInput[]
    NOT?: PestisidesScalarWhereInput | PestisidesScalarWhereInput[]
    id?: StringFilter<"Pestisides"> | string
    common_name?: StringNullableFilter<"Pestisides"> | string | null
    synonyms?: StringNullableListFilter<"Pestisides">
    scientific_name?: StringNullableFilter<"Pestisides"> | string | null
    description?: StringNullableFilter<"Pestisides"> | string | null
    wikipedia?: StringNullableFilter<"Pestisides"> | string | null
    britannica?: StringNullableFilter<"Pestisides"> | string | null
    img?: StringNullableFilter<"Pestisides"> | string | null
  }

  export type TaxonomyCreateWithoutBlightInput = {
    id?: string
    kingdom?: string | null
    phylum?: string | null
    class?: string | null
    order?: string | null
    family?: string | null
    genus?: string | null
    species?: string | null
    plant?: PlantsCreateNestedOneWithoutTaxonomyInput
    pest?: PestsCreateNestedOneWithoutTaxonomyInput
  }

  export type TaxonomyUncheckedCreateWithoutBlightInput = {
    id?: string
    kingdom?: string | null
    phylum?: string | null
    class?: string | null
    order?: string | null
    family?: string | null
    genus?: string | null
    species?: string | null
    plant?: PlantsUncheckedCreateNestedOneWithoutTaxonomyInput
    pest?: PestsUncheckedCreateNestedOneWithoutTaxonomyInput
  }

  export type TaxonomyCreateOrConnectWithoutBlightInput = {
    where: TaxonomyWhereUniqueInput
    create: XOR<TaxonomyCreateWithoutBlightInput, TaxonomyUncheckedCreateWithoutBlightInput>
  }

  export type PlantsCreateWithoutBlightsInput = {
    id?: string
    common_name: string
    scientific_name: string
    synonyms?: PlantsCreatesynonymsInput | string[]
    description?: string | null
    min_h?: number | null
    max_h?: number | null
    min_ph?: number | null
    max_ph?: number | null
    min_temp?: number | null
    max_temp?: number | null
    water?: $Enums.Level | null
    habit?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PlantsCreateimgsInput | string[]
    taxonomy: TaxonomyCreateNestedOneWithoutPlantInput
    pests?: PestsCreateNestedManyWithoutPlantsInput
    PlantOfDay?: PlantOfDayCreateNestedOneWithoutPlantInput
    Views?: ViewsCreateNestedOneWithoutPlantInput
  }

  export type PlantsUncheckedCreateWithoutBlightsInput = {
    id?: string
    common_name: string
    scientific_name: string
    synonyms?: PlantsCreatesynonymsInput | string[]
    description?: string | null
    min_h?: number | null
    max_h?: number | null
    min_ph?: number | null
    max_ph?: number | null
    min_temp?: number | null
    max_temp?: number | null
    water?: $Enums.Level | null
    habit?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PlantsCreateimgsInput | string[]
    taxonomyId: string
    viewsId?: number | null
    pests?: PestsUncheckedCreateNestedManyWithoutPlantsInput
    PlantOfDay?: PlantOfDayUncheckedCreateNestedOneWithoutPlantInput
  }

  export type PlantsCreateOrConnectWithoutBlightsInput = {
    where: PlantsWhereUniqueInput
    create: XOR<PlantsCreateWithoutBlightsInput, PlantsUncheckedCreateWithoutBlightsInput>
  }

  export type PestisidesCreateWithoutBlightsInput = {
    id?: string
    common_name?: string | null
    synonyms?: PestisidesCreatesynonymsInput | string[]
    scientific_name?: string | null
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    pests?: PestsCreateNestedManyWithoutPestisidesInput
  }

  export type PestisidesUncheckedCreateWithoutBlightsInput = {
    id?: string
    common_name?: string | null
    synonyms?: PestisidesCreatesynonymsInput | string[]
    scientific_name?: string | null
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    pests?: PestsUncheckedCreateNestedManyWithoutPestisidesInput
  }

  export type PestisidesCreateOrConnectWithoutBlightsInput = {
    where: PestisidesWhereUniqueInput
    create: XOR<PestisidesCreateWithoutBlightsInput, PestisidesUncheckedCreateWithoutBlightsInput>
  }

  export type TaxonomyUpsertWithoutBlightInput = {
    update: XOR<TaxonomyUpdateWithoutBlightInput, TaxonomyUncheckedUpdateWithoutBlightInput>
    create: XOR<TaxonomyCreateWithoutBlightInput, TaxonomyUncheckedCreateWithoutBlightInput>
    where?: TaxonomyWhereInput
  }

  export type TaxonomyUpdateToOneWithWhereWithoutBlightInput = {
    where?: TaxonomyWhereInput
    data: XOR<TaxonomyUpdateWithoutBlightInput, TaxonomyUncheckedUpdateWithoutBlightInput>
  }

  export type TaxonomyUpdateWithoutBlightInput = {
    id?: StringFieldUpdateOperationsInput | string
    kingdom?: NullableStringFieldUpdateOperationsInput | string | null
    phylum?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    genus?: NullableStringFieldUpdateOperationsInput | string | null
    species?: NullableStringFieldUpdateOperationsInput | string | null
    plant?: PlantsUpdateOneWithoutTaxonomyNestedInput
    pest?: PestsUpdateOneWithoutTaxonomyNestedInput
  }

  export type TaxonomyUncheckedUpdateWithoutBlightInput = {
    id?: StringFieldUpdateOperationsInput | string
    kingdom?: NullableStringFieldUpdateOperationsInput | string | null
    phylum?: NullableStringFieldUpdateOperationsInput | string | null
    class?: NullableStringFieldUpdateOperationsInput | string | null
    order?: NullableStringFieldUpdateOperationsInput | string | null
    family?: NullableStringFieldUpdateOperationsInput | string | null
    genus?: NullableStringFieldUpdateOperationsInput | string | null
    species?: NullableStringFieldUpdateOperationsInput | string | null
    plant?: PlantsUncheckedUpdateOneWithoutTaxonomyNestedInput
    pest?: PestsUncheckedUpdateOneWithoutTaxonomyNestedInput
  }

  export type PlantsUpsertWithWhereUniqueWithoutBlightsInput = {
    where: PlantsWhereUniqueInput
    update: XOR<PlantsUpdateWithoutBlightsInput, PlantsUncheckedUpdateWithoutBlightsInput>
    create: XOR<PlantsCreateWithoutBlightsInput, PlantsUncheckedCreateWithoutBlightsInput>
  }

  export type PlantsUpdateWithWhereUniqueWithoutBlightsInput = {
    where: PlantsWhereUniqueInput
    data: XOR<PlantsUpdateWithoutBlightsInput, PlantsUncheckedUpdateWithoutBlightsInput>
  }

  export type PlantsUpdateManyWithWhereWithoutBlightsInput = {
    where: PlantsScalarWhereInput
    data: XOR<PlantsUpdateManyMutationInput, PlantsUncheckedUpdateManyWithoutBlightsInput>
  }

  export type PestisidesUpsertWithWhereUniqueWithoutBlightsInput = {
    where: PestisidesWhereUniqueInput
    update: XOR<PestisidesUpdateWithoutBlightsInput, PestisidesUncheckedUpdateWithoutBlightsInput>
    create: XOR<PestisidesCreateWithoutBlightsInput, PestisidesUncheckedCreateWithoutBlightsInput>
  }

  export type PestisidesUpdateWithWhereUniqueWithoutBlightsInput = {
    where: PestisidesWhereUniqueInput
    data: XOR<PestisidesUpdateWithoutBlightsInput, PestisidesUncheckedUpdateWithoutBlightsInput>
  }

  export type PestisidesUpdateManyWithWhereWithoutBlightsInput = {
    where: PestisidesScalarWhereInput
    data: XOR<PestisidesUpdateManyMutationInput, PestisidesUncheckedUpdateManyWithoutBlightsInput>
  }

  export type PestsCreateWithoutPestisidesInput = {
    id?: string
    common_name: string
    synonyms?: PestsCreatesynonymsInput | string[]
    scientific_name: string
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PestsCreateimgsInput | string[]
    taxonomy: TaxonomyCreateNestedOneWithoutPestInput
    plants?: PlantsCreateNestedManyWithoutPestsInput
  }

  export type PestsUncheckedCreateWithoutPestisidesInput = {
    id?: string
    common_name: string
    synonyms?: PestsCreatesynonymsInput | string[]
    scientific_name: string
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PestsCreateimgsInput | string[]
    taxonomyId: string
    plants?: PlantsUncheckedCreateNestedManyWithoutPestsInput
  }

  export type PestsCreateOrConnectWithoutPestisidesInput = {
    where: PestsWhereUniqueInput
    create: XOR<PestsCreateWithoutPestisidesInput, PestsUncheckedCreateWithoutPestisidesInput>
  }

  export type BlightsCreateWithoutPestisidesInput = {
    id?: string
    common_name: string
    synonyms?: BlightsCreatesynonymsInput | string[]
    scientific_name: string
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: BlightsCreateimgsInput | string[]
    taxonomy: TaxonomyCreateNestedOneWithoutBlightInput
    plants?: PlantsCreateNestedManyWithoutBlightsInput
  }

  export type BlightsUncheckedCreateWithoutPestisidesInput = {
    id?: string
    common_name: string
    synonyms?: BlightsCreatesynonymsInput | string[]
    scientific_name: string
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: BlightsCreateimgsInput | string[]
    taxonomyId: string
    plants?: PlantsUncheckedCreateNestedManyWithoutBlightsInput
  }

  export type BlightsCreateOrConnectWithoutPestisidesInput = {
    where: BlightsWhereUniqueInput
    create: XOR<BlightsCreateWithoutPestisidesInput, BlightsUncheckedCreateWithoutPestisidesInput>
  }

  export type PestsUpsertWithWhereUniqueWithoutPestisidesInput = {
    where: PestsWhereUniqueInput
    update: XOR<PestsUpdateWithoutPestisidesInput, PestsUncheckedUpdateWithoutPestisidesInput>
    create: XOR<PestsCreateWithoutPestisidesInput, PestsUncheckedCreateWithoutPestisidesInput>
  }

  export type PestsUpdateWithWhereUniqueWithoutPestisidesInput = {
    where: PestsWhereUniqueInput
    data: XOR<PestsUpdateWithoutPestisidesInput, PestsUncheckedUpdateWithoutPestisidesInput>
  }

  export type PestsUpdateManyWithWhereWithoutPestisidesInput = {
    where: PestsScalarWhereInput
    data: XOR<PestsUpdateManyMutationInput, PestsUncheckedUpdateManyWithoutPestisidesInput>
  }

  export type BlightsUpsertWithWhereUniqueWithoutPestisidesInput = {
    where: BlightsWhereUniqueInput
    update: XOR<BlightsUpdateWithoutPestisidesInput, BlightsUncheckedUpdateWithoutPestisidesInput>
    create: XOR<BlightsCreateWithoutPestisidesInput, BlightsUncheckedCreateWithoutPestisidesInput>
  }

  export type BlightsUpdateWithWhereUniqueWithoutPestisidesInput = {
    where: BlightsWhereUniqueInput
    data: XOR<BlightsUpdateWithoutPestisidesInput, BlightsUncheckedUpdateWithoutPestisidesInput>
  }

  export type BlightsUpdateManyWithWhereWithoutPestisidesInput = {
    where: BlightsScalarWhereInput
    data: XOR<BlightsUpdateManyMutationInput, BlightsUncheckedUpdateManyWithoutPestisidesInput>
  }

  export type PlantsCreateWithoutTaxonomyInput = {
    id?: string
    common_name: string
    scientific_name: string
    synonyms?: PlantsCreatesynonymsInput | string[]
    description?: string | null
    min_h?: number | null
    max_h?: number | null
    min_ph?: number | null
    max_ph?: number | null
    min_temp?: number | null
    max_temp?: number | null
    water?: $Enums.Level | null
    habit?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PlantsCreateimgsInput | string[]
    pests?: PestsCreateNestedManyWithoutPlantsInput
    blights?: BlightsCreateNestedManyWithoutPlantsInput
    PlantOfDay?: PlantOfDayCreateNestedOneWithoutPlantInput
    Views?: ViewsCreateNestedOneWithoutPlantInput
  }

  export type PlantsUncheckedCreateWithoutTaxonomyInput = {
    id?: string
    common_name: string
    scientific_name: string
    synonyms?: PlantsCreatesynonymsInput | string[]
    description?: string | null
    min_h?: number | null
    max_h?: number | null
    min_ph?: number | null
    max_ph?: number | null
    min_temp?: number | null
    max_temp?: number | null
    water?: $Enums.Level | null
    habit?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PlantsCreateimgsInput | string[]
    viewsId?: number | null
    pests?: PestsUncheckedCreateNestedManyWithoutPlantsInput
    blights?: BlightsUncheckedCreateNestedManyWithoutPlantsInput
    PlantOfDay?: PlantOfDayUncheckedCreateNestedOneWithoutPlantInput
  }

  export type PlantsCreateOrConnectWithoutTaxonomyInput = {
    where: PlantsWhereUniqueInput
    create: XOR<PlantsCreateWithoutTaxonomyInput, PlantsUncheckedCreateWithoutTaxonomyInput>
  }

  export type PestsCreateWithoutTaxonomyInput = {
    id?: string
    common_name: string
    synonyms?: PestsCreatesynonymsInput | string[]
    scientific_name: string
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PestsCreateimgsInput | string[]
    plants?: PlantsCreateNestedManyWithoutPestsInput
    pestisides?: PestisidesCreateNestedManyWithoutPestsInput
  }

  export type PestsUncheckedCreateWithoutTaxonomyInput = {
    id?: string
    common_name: string
    synonyms?: PestsCreatesynonymsInput | string[]
    scientific_name: string
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PestsCreateimgsInput | string[]
    plants?: PlantsUncheckedCreateNestedManyWithoutPestsInput
    pestisides?: PestisidesUncheckedCreateNestedManyWithoutPestsInput
  }

  export type PestsCreateOrConnectWithoutTaxonomyInput = {
    where: PestsWhereUniqueInput
    create: XOR<PestsCreateWithoutTaxonomyInput, PestsUncheckedCreateWithoutTaxonomyInput>
  }

  export type BlightsCreateWithoutTaxonomyInput = {
    id?: string
    common_name: string
    synonyms?: BlightsCreatesynonymsInput | string[]
    scientific_name: string
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: BlightsCreateimgsInput | string[]
    plants?: PlantsCreateNestedManyWithoutBlightsInput
    pestisides?: PestisidesCreateNestedManyWithoutBlightsInput
  }

  export type BlightsUncheckedCreateWithoutTaxonomyInput = {
    id?: string
    common_name: string
    synonyms?: BlightsCreatesynonymsInput | string[]
    scientific_name: string
    description?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: BlightsCreateimgsInput | string[]
    plants?: PlantsUncheckedCreateNestedManyWithoutBlightsInput
    pestisides?: PestisidesUncheckedCreateNestedManyWithoutBlightsInput
  }

  export type BlightsCreateOrConnectWithoutTaxonomyInput = {
    where: BlightsWhereUniqueInput
    create: XOR<BlightsCreateWithoutTaxonomyInput, BlightsUncheckedCreateWithoutTaxonomyInput>
  }

  export type PlantsUpsertWithoutTaxonomyInput = {
    update: XOR<PlantsUpdateWithoutTaxonomyInput, PlantsUncheckedUpdateWithoutTaxonomyInput>
    create: XOR<PlantsCreateWithoutTaxonomyInput, PlantsUncheckedCreateWithoutTaxonomyInput>
    where?: PlantsWhereInput
  }

  export type PlantsUpdateToOneWithWhereWithoutTaxonomyInput = {
    where?: PlantsWhereInput
    data: XOR<PlantsUpdateWithoutTaxonomyInput, PlantsUncheckedUpdateWithoutTaxonomyInput>
  }

  export type PlantsUpdateWithoutTaxonomyInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    scientific_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PlantsUpdatesynonymsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    min_h?: NullableIntFieldUpdateOperationsInput | number | null
    max_h?: NullableIntFieldUpdateOperationsInput | number | null
    min_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    max_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    min_temp?: NullableIntFieldUpdateOperationsInput | number | null
    max_temp?: NullableIntFieldUpdateOperationsInput | number | null
    water?: NullableEnumLevelFieldUpdateOperationsInput | $Enums.Level | null
    habit?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PlantsUpdateimgsInput | string[]
    pests?: PestsUpdateManyWithoutPlantsNestedInput
    blights?: BlightsUpdateManyWithoutPlantsNestedInput
    PlantOfDay?: PlantOfDayUpdateOneWithoutPlantNestedInput
    Views?: ViewsUpdateOneWithoutPlantNestedInput
  }

  export type PlantsUncheckedUpdateWithoutTaxonomyInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    scientific_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PlantsUpdatesynonymsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    min_h?: NullableIntFieldUpdateOperationsInput | number | null
    max_h?: NullableIntFieldUpdateOperationsInput | number | null
    min_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    max_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    min_temp?: NullableIntFieldUpdateOperationsInput | number | null
    max_temp?: NullableIntFieldUpdateOperationsInput | number | null
    water?: NullableEnumLevelFieldUpdateOperationsInput | $Enums.Level | null
    habit?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PlantsUpdateimgsInput | string[]
    viewsId?: NullableIntFieldUpdateOperationsInput | number | null
    pests?: PestsUncheckedUpdateManyWithoutPlantsNestedInput
    blights?: BlightsUncheckedUpdateManyWithoutPlantsNestedInput
    PlantOfDay?: PlantOfDayUncheckedUpdateOneWithoutPlantNestedInput
  }

  export type PestsUpsertWithoutTaxonomyInput = {
    update: XOR<PestsUpdateWithoutTaxonomyInput, PestsUncheckedUpdateWithoutTaxonomyInput>
    create: XOR<PestsCreateWithoutTaxonomyInput, PestsUncheckedCreateWithoutTaxonomyInput>
    where?: PestsWhereInput
  }

  export type PestsUpdateToOneWithWhereWithoutTaxonomyInput = {
    where?: PestsWhereInput
    data: XOR<PestsUpdateWithoutTaxonomyInput, PestsUncheckedUpdateWithoutTaxonomyInput>
  }

  export type PestsUpdateWithoutTaxonomyInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PestsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PestsUpdateimgsInput | string[]
    plants?: PlantsUpdateManyWithoutPestsNestedInput
    pestisides?: PestisidesUpdateManyWithoutPestsNestedInput
  }

  export type PestsUncheckedUpdateWithoutTaxonomyInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PestsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PestsUpdateimgsInput | string[]
    plants?: PlantsUncheckedUpdateManyWithoutPestsNestedInput
    pestisides?: PestisidesUncheckedUpdateManyWithoutPestsNestedInput
  }

  export type BlightsUpsertWithoutTaxonomyInput = {
    update: XOR<BlightsUpdateWithoutTaxonomyInput, BlightsUncheckedUpdateWithoutTaxonomyInput>
    create: XOR<BlightsCreateWithoutTaxonomyInput, BlightsUncheckedCreateWithoutTaxonomyInput>
    where?: BlightsWhereInput
  }

  export type BlightsUpdateToOneWithWhereWithoutTaxonomyInput = {
    where?: BlightsWhereInput
    data: XOR<BlightsUpdateWithoutTaxonomyInput, BlightsUncheckedUpdateWithoutTaxonomyInput>
  }

  export type BlightsUpdateWithoutTaxonomyInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: BlightsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: BlightsUpdateimgsInput | string[]
    plants?: PlantsUpdateManyWithoutBlightsNestedInput
    pestisides?: PestisidesUpdateManyWithoutBlightsNestedInput
  }

  export type BlightsUncheckedUpdateWithoutTaxonomyInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: BlightsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: BlightsUpdateimgsInput | string[]
    plants?: PlantsUncheckedUpdateManyWithoutBlightsNestedInput
    pestisides?: PestisidesUncheckedUpdateManyWithoutBlightsNestedInput
  }

  export type PlantsCreateWithoutPlantOfDayInput = {
    id?: string
    common_name: string
    scientific_name: string
    synonyms?: PlantsCreatesynonymsInput | string[]
    description?: string | null
    min_h?: number | null
    max_h?: number | null
    min_ph?: number | null
    max_ph?: number | null
    min_temp?: number | null
    max_temp?: number | null
    water?: $Enums.Level | null
    habit?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PlantsCreateimgsInput | string[]
    taxonomy: TaxonomyCreateNestedOneWithoutPlantInput
    pests?: PestsCreateNestedManyWithoutPlantsInput
    blights?: BlightsCreateNestedManyWithoutPlantsInput
    Views?: ViewsCreateNestedOneWithoutPlantInput
  }

  export type PlantsUncheckedCreateWithoutPlantOfDayInput = {
    id?: string
    common_name: string
    scientific_name: string
    synonyms?: PlantsCreatesynonymsInput | string[]
    description?: string | null
    min_h?: number | null
    max_h?: number | null
    min_ph?: number | null
    max_ph?: number | null
    min_temp?: number | null
    max_temp?: number | null
    water?: $Enums.Level | null
    habit?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PlantsCreateimgsInput | string[]
    taxonomyId: string
    viewsId?: number | null
    pests?: PestsUncheckedCreateNestedManyWithoutPlantsInput
    blights?: BlightsUncheckedCreateNestedManyWithoutPlantsInput
  }

  export type PlantsCreateOrConnectWithoutPlantOfDayInput = {
    where: PlantsWhereUniqueInput
    create: XOR<PlantsCreateWithoutPlantOfDayInput, PlantsUncheckedCreateWithoutPlantOfDayInput>
  }

  export type PlantsUpsertWithoutPlantOfDayInput = {
    update: XOR<PlantsUpdateWithoutPlantOfDayInput, PlantsUncheckedUpdateWithoutPlantOfDayInput>
    create: XOR<PlantsCreateWithoutPlantOfDayInput, PlantsUncheckedCreateWithoutPlantOfDayInput>
    where?: PlantsWhereInput
  }

  export type PlantsUpdateToOneWithWhereWithoutPlantOfDayInput = {
    where?: PlantsWhereInput
    data: XOR<PlantsUpdateWithoutPlantOfDayInput, PlantsUncheckedUpdateWithoutPlantOfDayInput>
  }

  export type PlantsUpdateWithoutPlantOfDayInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    scientific_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PlantsUpdatesynonymsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    min_h?: NullableIntFieldUpdateOperationsInput | number | null
    max_h?: NullableIntFieldUpdateOperationsInput | number | null
    min_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    max_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    min_temp?: NullableIntFieldUpdateOperationsInput | number | null
    max_temp?: NullableIntFieldUpdateOperationsInput | number | null
    water?: NullableEnumLevelFieldUpdateOperationsInput | $Enums.Level | null
    habit?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PlantsUpdateimgsInput | string[]
    taxonomy?: TaxonomyUpdateOneRequiredWithoutPlantNestedInput
    pests?: PestsUpdateManyWithoutPlantsNestedInput
    blights?: BlightsUpdateManyWithoutPlantsNestedInput
    Views?: ViewsUpdateOneWithoutPlantNestedInput
  }

  export type PlantsUncheckedUpdateWithoutPlantOfDayInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    scientific_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PlantsUpdatesynonymsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    min_h?: NullableIntFieldUpdateOperationsInput | number | null
    max_h?: NullableIntFieldUpdateOperationsInput | number | null
    min_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    max_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    min_temp?: NullableIntFieldUpdateOperationsInput | number | null
    max_temp?: NullableIntFieldUpdateOperationsInput | number | null
    water?: NullableEnumLevelFieldUpdateOperationsInput | $Enums.Level | null
    habit?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PlantsUpdateimgsInput | string[]
    taxonomyId?: StringFieldUpdateOperationsInput | string
    viewsId?: NullableIntFieldUpdateOperationsInput | number | null
    pests?: PestsUncheckedUpdateManyWithoutPlantsNestedInput
    blights?: BlightsUncheckedUpdateManyWithoutPlantsNestedInput
  }

  export type PlantsCreateWithoutViewsInput = {
    id?: string
    common_name: string
    scientific_name: string
    synonyms?: PlantsCreatesynonymsInput | string[]
    description?: string | null
    min_h?: number | null
    max_h?: number | null
    min_ph?: number | null
    max_ph?: number | null
    min_temp?: number | null
    max_temp?: number | null
    water?: $Enums.Level | null
    habit?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PlantsCreateimgsInput | string[]
    taxonomy: TaxonomyCreateNestedOneWithoutPlantInput
    pests?: PestsCreateNestedManyWithoutPlantsInput
    blights?: BlightsCreateNestedManyWithoutPlantsInput
    PlantOfDay?: PlantOfDayCreateNestedOneWithoutPlantInput
  }

  export type PlantsUncheckedCreateWithoutViewsInput = {
    id?: string
    common_name: string
    scientific_name: string
    synonyms?: PlantsCreatesynonymsInput | string[]
    description?: string | null
    min_h?: number | null
    max_h?: number | null
    min_ph?: number | null
    max_ph?: number | null
    min_temp?: number | null
    max_temp?: number | null
    water?: $Enums.Level | null
    habit?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PlantsCreateimgsInput | string[]
    taxonomyId: string
    pests?: PestsUncheckedCreateNestedManyWithoutPlantsInput
    blights?: BlightsUncheckedCreateNestedManyWithoutPlantsInput
    PlantOfDay?: PlantOfDayUncheckedCreateNestedOneWithoutPlantInput
  }

  export type PlantsCreateOrConnectWithoutViewsInput = {
    where: PlantsWhereUniqueInput
    create: XOR<PlantsCreateWithoutViewsInput, PlantsUncheckedCreateWithoutViewsInput>
  }

  export type PlantsCreateManyViewsInputEnvelope = {
    data: PlantsCreateManyViewsInput | PlantsCreateManyViewsInput[]
    skipDuplicates?: boolean
  }

  export type PlantsUpsertWithWhereUniqueWithoutViewsInput = {
    where: PlantsWhereUniqueInput
    update: XOR<PlantsUpdateWithoutViewsInput, PlantsUncheckedUpdateWithoutViewsInput>
    create: XOR<PlantsCreateWithoutViewsInput, PlantsUncheckedCreateWithoutViewsInput>
  }

  export type PlantsUpdateWithWhereUniqueWithoutViewsInput = {
    where: PlantsWhereUniqueInput
    data: XOR<PlantsUpdateWithoutViewsInput, PlantsUncheckedUpdateWithoutViewsInput>
  }

  export type PlantsUpdateManyWithWhereWithoutViewsInput = {
    where: PlantsScalarWhereInput
    data: XOR<PlantsUpdateManyMutationInput, PlantsUncheckedUpdateManyWithoutViewsInput>
  }

  export type PestsUpdateWithoutPlantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PestsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PestsUpdateimgsInput | string[]
    taxonomy?: TaxonomyUpdateOneRequiredWithoutPestNestedInput
    pestisides?: PestisidesUpdateManyWithoutPestsNestedInput
  }

  export type PestsUncheckedUpdateWithoutPlantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PestsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PestsUpdateimgsInput | string[]
    taxonomyId?: StringFieldUpdateOperationsInput | string
    pestisides?: PestisidesUncheckedUpdateManyWithoutPestsNestedInput
  }

  export type PestsUncheckedUpdateManyWithoutPlantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PestsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PestsUpdateimgsInput | string[]
    taxonomyId?: StringFieldUpdateOperationsInput | string
  }

  export type BlightsUpdateWithoutPlantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: BlightsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: BlightsUpdateimgsInput | string[]
    taxonomy?: TaxonomyUpdateOneRequiredWithoutBlightNestedInput
    pestisides?: PestisidesUpdateManyWithoutBlightsNestedInput
  }

  export type BlightsUncheckedUpdateWithoutPlantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: BlightsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: BlightsUpdateimgsInput | string[]
    taxonomyId?: StringFieldUpdateOperationsInput | string
    pestisides?: PestisidesUncheckedUpdateManyWithoutBlightsNestedInput
  }

  export type BlightsUncheckedUpdateManyWithoutPlantsInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: BlightsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: BlightsUpdateimgsInput | string[]
    taxonomyId?: StringFieldUpdateOperationsInput | string
  }

  export type PlantsUpdateWithoutPestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    scientific_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PlantsUpdatesynonymsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    min_h?: NullableIntFieldUpdateOperationsInput | number | null
    max_h?: NullableIntFieldUpdateOperationsInput | number | null
    min_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    max_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    min_temp?: NullableIntFieldUpdateOperationsInput | number | null
    max_temp?: NullableIntFieldUpdateOperationsInput | number | null
    water?: NullableEnumLevelFieldUpdateOperationsInput | $Enums.Level | null
    habit?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PlantsUpdateimgsInput | string[]
    taxonomy?: TaxonomyUpdateOneRequiredWithoutPlantNestedInput
    blights?: BlightsUpdateManyWithoutPlantsNestedInput
    PlantOfDay?: PlantOfDayUpdateOneWithoutPlantNestedInput
    Views?: ViewsUpdateOneWithoutPlantNestedInput
  }

  export type PlantsUncheckedUpdateWithoutPestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    scientific_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PlantsUpdatesynonymsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    min_h?: NullableIntFieldUpdateOperationsInput | number | null
    max_h?: NullableIntFieldUpdateOperationsInput | number | null
    min_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    max_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    min_temp?: NullableIntFieldUpdateOperationsInput | number | null
    max_temp?: NullableIntFieldUpdateOperationsInput | number | null
    water?: NullableEnumLevelFieldUpdateOperationsInput | $Enums.Level | null
    habit?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PlantsUpdateimgsInput | string[]
    taxonomyId?: StringFieldUpdateOperationsInput | string
    viewsId?: NullableIntFieldUpdateOperationsInput | number | null
    blights?: BlightsUncheckedUpdateManyWithoutPlantsNestedInput
    PlantOfDay?: PlantOfDayUncheckedUpdateOneWithoutPlantNestedInput
  }

  export type PlantsUncheckedUpdateManyWithoutPestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    scientific_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PlantsUpdatesynonymsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    min_h?: NullableIntFieldUpdateOperationsInput | number | null
    max_h?: NullableIntFieldUpdateOperationsInput | number | null
    min_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    max_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    min_temp?: NullableIntFieldUpdateOperationsInput | number | null
    max_temp?: NullableIntFieldUpdateOperationsInput | number | null
    water?: NullableEnumLevelFieldUpdateOperationsInput | $Enums.Level | null
    habit?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PlantsUpdateimgsInput | string[]
    taxonomyId?: StringFieldUpdateOperationsInput | string
    viewsId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PestisidesUpdateWithoutPestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: PestisidesUpdatesynonymsInput | string[]
    scientific_name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    blights?: BlightsUpdateManyWithoutPestisidesNestedInput
  }

  export type PestisidesUncheckedUpdateWithoutPestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: PestisidesUpdatesynonymsInput | string[]
    scientific_name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    blights?: BlightsUncheckedUpdateManyWithoutPestisidesNestedInput
  }

  export type PestisidesUncheckedUpdateManyWithoutPestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: PestisidesUpdatesynonymsInput | string[]
    scientific_name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PlantsUpdateWithoutBlightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    scientific_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PlantsUpdatesynonymsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    min_h?: NullableIntFieldUpdateOperationsInput | number | null
    max_h?: NullableIntFieldUpdateOperationsInput | number | null
    min_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    max_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    min_temp?: NullableIntFieldUpdateOperationsInput | number | null
    max_temp?: NullableIntFieldUpdateOperationsInput | number | null
    water?: NullableEnumLevelFieldUpdateOperationsInput | $Enums.Level | null
    habit?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PlantsUpdateimgsInput | string[]
    taxonomy?: TaxonomyUpdateOneRequiredWithoutPlantNestedInput
    pests?: PestsUpdateManyWithoutPlantsNestedInput
    PlantOfDay?: PlantOfDayUpdateOneWithoutPlantNestedInput
    Views?: ViewsUpdateOneWithoutPlantNestedInput
  }

  export type PlantsUncheckedUpdateWithoutBlightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    scientific_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PlantsUpdatesynonymsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    min_h?: NullableIntFieldUpdateOperationsInput | number | null
    max_h?: NullableIntFieldUpdateOperationsInput | number | null
    min_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    max_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    min_temp?: NullableIntFieldUpdateOperationsInput | number | null
    max_temp?: NullableIntFieldUpdateOperationsInput | number | null
    water?: NullableEnumLevelFieldUpdateOperationsInput | $Enums.Level | null
    habit?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PlantsUpdateimgsInput | string[]
    taxonomyId?: StringFieldUpdateOperationsInput | string
    viewsId?: NullableIntFieldUpdateOperationsInput | number | null
    pests?: PestsUncheckedUpdateManyWithoutPlantsNestedInput
    PlantOfDay?: PlantOfDayUncheckedUpdateOneWithoutPlantNestedInput
  }

  export type PlantsUncheckedUpdateManyWithoutBlightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    scientific_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PlantsUpdatesynonymsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    min_h?: NullableIntFieldUpdateOperationsInput | number | null
    max_h?: NullableIntFieldUpdateOperationsInput | number | null
    min_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    max_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    min_temp?: NullableIntFieldUpdateOperationsInput | number | null
    max_temp?: NullableIntFieldUpdateOperationsInput | number | null
    water?: NullableEnumLevelFieldUpdateOperationsInput | $Enums.Level | null
    habit?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PlantsUpdateimgsInput | string[]
    taxonomyId?: StringFieldUpdateOperationsInput | string
    viewsId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PestisidesUpdateWithoutBlightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: PestisidesUpdatesynonymsInput | string[]
    scientific_name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    pests?: PestsUpdateManyWithoutPestisidesNestedInput
  }

  export type PestisidesUncheckedUpdateWithoutBlightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: PestisidesUpdatesynonymsInput | string[]
    scientific_name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    pests?: PestsUncheckedUpdateManyWithoutPestisidesNestedInput
  }

  export type PestisidesUncheckedUpdateManyWithoutBlightsInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: NullableStringFieldUpdateOperationsInput | string | null
    synonyms?: PestisidesUpdatesynonymsInput | string[]
    scientific_name?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PestsUpdateWithoutPestisidesInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PestsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PestsUpdateimgsInput | string[]
    taxonomy?: TaxonomyUpdateOneRequiredWithoutPestNestedInput
    plants?: PlantsUpdateManyWithoutPestsNestedInput
  }

  export type PestsUncheckedUpdateWithoutPestisidesInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PestsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PestsUpdateimgsInput | string[]
    taxonomyId?: StringFieldUpdateOperationsInput | string
    plants?: PlantsUncheckedUpdateManyWithoutPestsNestedInput
  }

  export type PestsUncheckedUpdateManyWithoutPestisidesInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PestsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PestsUpdateimgsInput | string[]
    taxonomyId?: StringFieldUpdateOperationsInput | string
  }

  export type BlightsUpdateWithoutPestisidesInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: BlightsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: BlightsUpdateimgsInput | string[]
    taxonomy?: TaxonomyUpdateOneRequiredWithoutBlightNestedInput
    plants?: PlantsUpdateManyWithoutBlightsNestedInput
  }

  export type BlightsUncheckedUpdateWithoutPestisidesInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: BlightsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: BlightsUpdateimgsInput | string[]
    taxonomyId?: StringFieldUpdateOperationsInput | string
    plants?: PlantsUncheckedUpdateManyWithoutBlightsNestedInput
  }

  export type BlightsUncheckedUpdateManyWithoutPestisidesInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    synonyms?: BlightsUpdatesynonymsInput | string[]
    scientific_name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: BlightsUpdateimgsInput | string[]
    taxonomyId?: StringFieldUpdateOperationsInput | string
  }

  export type PlantsCreateManyViewsInput = {
    id?: string
    common_name: string
    scientific_name: string
    synonyms?: PlantsCreatesynonymsInput | string[]
    description?: string | null
    min_h?: number | null
    max_h?: number | null
    min_ph?: number | null
    max_ph?: number | null
    min_temp?: number | null
    max_temp?: number | null
    water?: $Enums.Level | null
    habit?: string | null
    wikipedia?: string | null
    britannica?: string | null
    img?: string | null
    imgs?: PlantsCreateimgsInput | string[]
    taxonomyId: string
  }

  export type PlantsUpdateWithoutViewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    scientific_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PlantsUpdatesynonymsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    min_h?: NullableIntFieldUpdateOperationsInput | number | null
    max_h?: NullableIntFieldUpdateOperationsInput | number | null
    min_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    max_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    min_temp?: NullableIntFieldUpdateOperationsInput | number | null
    max_temp?: NullableIntFieldUpdateOperationsInput | number | null
    water?: NullableEnumLevelFieldUpdateOperationsInput | $Enums.Level | null
    habit?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PlantsUpdateimgsInput | string[]
    taxonomy?: TaxonomyUpdateOneRequiredWithoutPlantNestedInput
    pests?: PestsUpdateManyWithoutPlantsNestedInput
    blights?: BlightsUpdateManyWithoutPlantsNestedInput
    PlantOfDay?: PlantOfDayUpdateOneWithoutPlantNestedInput
  }

  export type PlantsUncheckedUpdateWithoutViewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    scientific_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PlantsUpdatesynonymsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    min_h?: NullableIntFieldUpdateOperationsInput | number | null
    max_h?: NullableIntFieldUpdateOperationsInput | number | null
    min_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    max_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    min_temp?: NullableIntFieldUpdateOperationsInput | number | null
    max_temp?: NullableIntFieldUpdateOperationsInput | number | null
    water?: NullableEnumLevelFieldUpdateOperationsInput | $Enums.Level | null
    habit?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PlantsUpdateimgsInput | string[]
    taxonomyId?: StringFieldUpdateOperationsInput | string
    pests?: PestsUncheckedUpdateManyWithoutPlantsNestedInput
    blights?: BlightsUncheckedUpdateManyWithoutPlantsNestedInput
    PlantOfDay?: PlantOfDayUncheckedUpdateOneWithoutPlantNestedInput
  }

  export type PlantsUncheckedUpdateManyWithoutViewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    common_name?: StringFieldUpdateOperationsInput | string
    scientific_name?: StringFieldUpdateOperationsInput | string
    synonyms?: PlantsUpdatesynonymsInput | string[]
    description?: NullableStringFieldUpdateOperationsInput | string | null
    min_h?: NullableIntFieldUpdateOperationsInput | number | null
    max_h?: NullableIntFieldUpdateOperationsInput | number | null
    min_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    max_ph?: NullableFloatFieldUpdateOperationsInput | number | null
    min_temp?: NullableIntFieldUpdateOperationsInput | number | null
    max_temp?: NullableIntFieldUpdateOperationsInput | number | null
    water?: NullableEnumLevelFieldUpdateOperationsInput | $Enums.Level | null
    habit?: NullableStringFieldUpdateOperationsInput | string | null
    wikipedia?: NullableStringFieldUpdateOperationsInput | string | null
    britannica?: NullableStringFieldUpdateOperationsInput | string | null
    img?: NullableStringFieldUpdateOperationsInput | string | null
    imgs?: PlantsUpdateimgsInput | string[]
    taxonomyId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PlantsCountOutputTypeDefaultArgs instead
     */
    export type PlantsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlantsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PestsCountOutputTypeDefaultArgs instead
     */
    export type PestsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PestsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BlightsCountOutputTypeDefaultArgs instead
     */
    export type BlightsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BlightsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PestisidesCountOutputTypeDefaultArgs instead
     */
    export type PestisidesCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PestisidesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ViewsCountOutputTypeDefaultArgs instead
     */
    export type ViewsCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ViewsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlantsDefaultArgs instead
     */
    export type PlantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlantsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PestsDefaultArgs instead
     */
    export type PestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PestsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BlightsDefaultArgs instead
     */
    export type BlightsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BlightsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PestisidesDefaultArgs instead
     */
    export type PestisidesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PestisidesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TaxonomyDefaultArgs instead
     */
    export type TaxonomyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TaxonomyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SearchDefaultArgs instead
     */
    export type SearchArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SearchDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlantOfDayDefaultArgs instead
     */
    export type PlantOfDayArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlantOfDayDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ViewsDefaultArgs instead
     */
    export type ViewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ViewsDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}